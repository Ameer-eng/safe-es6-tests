** heap **
⊥Heap

** context **
⊥Elem

** allocated location set **
mayAlloc: (⊥(location)), mustAlloc: (Top(location))


-----IP succ-----


Map()


-----CallInfo-----





-----CFG-----


function[0] top-level {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] noop(StartOfFile)
    [1] <>old<>1 := x
    [2] x := <>old<>1 + 5
    [3] noop(EndOfFile)

  Exit[-2]

  ExitExc[-3]

}

function[-237] Boolean {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @BoolObj(<>value<>1) @ #-41
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-236] Boolean {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @ToBoolean(<>value<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-235] valueOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>B<>1 := this

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>B<>1 === "boolean")
    [1] <>b<>2 := <>B<>1

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>B<>1 !== "boolean")

  Block[3] -> Exit, ExitExc
    [0] return(<>b<>2)

  Block[4] -> [7], [6], ExitExc
    [0] assert(typeof <>B<>1 === "object")

  Block[5] -> [14], [13], ExitExc
    [0] assert(typeof <>B<>1 !== "object")

  Block[6] -> [8], ExitExc
    [0] assert(<>B<>1 !== null)
    [1] <>y<>4 := @Class(<>B<>1)
    [2] <>new<>5 := <>y<>4 === "Boolean"

  Block[7] -> [10], [9], ExitExc
    [0] assert(<>B<>1 === null)

  Block[8] -> [12]

  Block[9] -> [11], ExitExc
    [0] assert(typeof <>B<>1 !== null == "boolean")
    [1] <>new<>5 := false

  Block[10] -> [11], ExitExc
    [0] assert(typeof <>B<>1 !== null != "boolean")
    [1] <>new<>5 := <>B<>1 !== null

  Block[11] -> [8]

  Block[12] -> [17], [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof typeof <>B<>1 === "object" == "boolean")
    [1] <>new<>5 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof typeof <>B<>1 === "object" != "boolean")
    [1] <>new<>5 := typeof <>B<>1 === "object"

  Block[15] -> [12]

  Block[16] -> [18], ExitExc
    [0] assert(<>new<>5)
    [1] <>Global<>ignore3 := @PrimitiveValue(<>B<>1)
    [2] <>b<>2 := <>Global<>ignore3

  Block[17] -> [19], ExitExc
    [0] assert(! <>new<>5)
    [1] <>fun<>6 := @ToObject(TypeError) @ #-21
    [2] <>arguments<>7 := allocArg(0) @ #-22
    [3] <>proto<>8 := <>fun<>6["prototype"]
    [4] <>obj<>9 := alloc(<>proto<>8) @ #-23

  Block[18] -> [3]

  Call[19] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-24

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[25] -> ExitExc
    [0] throw(<>new1<>12)

  Exit[-2]

  ExitExc[-3]

}

function[-234] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>B<>1 := this

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>B<>1 === "Boolean")
    [1] <>b<>2 := <>B<>1

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>B<>1 !== "Boolean")

  Block[3] -> [27], [26]

  Block[4] -> [7], [6], ExitExc
    [0] assert(typeof <>B<>1 === "object")

  Block[5] -> [14], [13], ExitExc
    [0] assert(typeof <>B<>1 !== "object")

  Block[6] -> [8], ExitExc
    [0] assert(<>B<>1 !== null)
    [1] <>y<>4 := @Class(<>B<>1)
    [2] <>new<>5 := <>y<>4 === "Boolean"

  Block[7] -> [10], [9], ExitExc
    [0] assert(<>B<>1 === null)

  Block[8] -> [12]

  Block[9] -> [11], ExitExc
    [0] assert(typeof <>B<>1 !== null == "boolean")
    [1] <>new<>5 := false

  Block[10] -> [11], ExitExc
    [0] assert(typeof <>B<>1 !== null != "boolean")
    [1] <>new<>5 := <>B<>1 !== null

  Block[11] -> [8]

  Block[12] -> [17], [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof typeof <>B<>1 === "object" == "boolean")
    [1] <>new<>5 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof typeof <>B<>1 === "object" != "boolean")
    [1] <>new<>5 := typeof <>B<>1 === "object"

  Block[15] -> [12]

  Block[16] -> [18], ExitExc
    [0] assert(<>new<>5)
    [1] <>Global<>ignore3 := @PrimitiveValue(<>B<>1)
    [2] <>b<>2 := <>Global<>ignore3

  Block[17] -> [19], ExitExc
    [0] assert(! <>new<>5)
    [1] <>fun<>6 := @ToObject(TypeError) @ #-11
    [2] <>arguments<>7 := allocArg(0) @ #-12
    [3] <>proto<>8 := <>fun<>6["prototype"]
    [4] <>obj<>9 := alloc(<>proto<>8) @ #-13

  Block[18] -> [3]

  Call[19] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-14

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[25] -> ExitExc
    [0] throw(<>new1<>12)

  Block[26] -> Exit, ExitExc
    [0] assert(<>b<>2)
    [1] return("true")

  Block[27] -> Exit, ExitExc
    [0] assert(! <>b<>2)
    [1] return("false")

  Block[28] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-233] componentDidMount {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-232] Component {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-231] createElement {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(<>props<>2 === null)
    [1] <>Global<>ignore1 := alloc() @ #-11
    [2] <>props<>2 := <>Global<>ignore1

  Block[2] -> [3], ExitExc
    [0] assert(<>props<>2 !== null)

  Block[3] -> [4], ExitExc
    [0] <>Global<>ignore2 := allocArray(0) @ #-12
    [1] <>childArray<>4 := <>Global<>ignore2
    [2] <>i<>5 := 2
    [3] <>y<>9 := <>i<>5
    [4] <>obj<>10 := @ToObject(<>arguments<>8) @ #-13

  LoopHead[4] -> [6], [5]

  Block[5] -> [8], [7], ExitExc
    [0] assert(<>y<>9 < <>obj<>10["length"])
    [1] <>obj<>11 := @ToObject(<>arguments<>8) @ #-14
    [2] <>child<>6 := <>obj<>11[<>i<>5]

  Block[6] -> [31], ExitExc
    [0] assert(! <>y<>9 < <>obj<>10["length"])

  Block[7] -> [30], ExitExc
    [0] assert(<>child<>6 === null)

  Block[8] -> [9], ExitExc
    [0] assert(<>child<>6 !== null)

  Block[9] -> [11], [10]

  Block[10] -> [12], ExitExc
    [0] assert(typeof <>child<>6 === "string")
    [1] <>temp<>12 := allocArray(0) @ #-15
    [2] <>temp<>13 := alloc() @ #-16
    [3] <>temp<>13["text"] := <>child<>6
    [4] <>temp<>13["children"] := <>temp<>12
    [5] <>Global<>ignore7 := alloc() @ #-17
    [6] <>Global<>ignore7["type"] := "plaintext"
    [7] <>Global<>ignore7["props"] := <>temp<>13
    [8] <>child<>6 := <>Global<>ignore7

  Block[11] -> [12], ExitExc
    [0] assert(typeof <>child<>6 !== "string")

  Block[12] -> [13], ExitExc
    [0] <>obj<>14 := @ToObject(Array) @ #-18
    [1] <>temp<>15 := <>child<>6
    [2] <>arguments<>16 := allocArg(1) @ #-19
    [3] <>arguments<>16["0"] := <>temp<>15
    [4] <>fun<>17 := @ToObject(<>obj<>14["isArray"]) @ #-110
    [5] <>this<> := enterCode(<>obj<>14)

  Call[13] -> ExitExc
    [0] call(<>fun<>17, <>this<>, <>arguments<>16) @ #-111

  AfterCall[14] -> [17], [16]

  AfterCatch[15] -> ExitExc

  Block[16] -> [18], ExitExc
    [0] assert(<>new<>18)
    [1] <>j<>7 := 0
    [2] <>y<>19 := <>j<>7
    [3] <>obj<>20 := @ToObject(<>child<>6) @ #-112

  Block[17] -> [27], ExitExc
    [0] assert(! <>new<>18)
    [1] <>obj<>28 := @ToObject(<>childArray<>4) @ #-119
    [2] <>temp<>29 := <>child<>6
    [3] <>arguments<>30 := allocArg(1) @ #-120
    [4] <>arguments<>30["0"] := <>temp<>29
    [5] <>fun<>31 := @ToObject(<>obj<>28["push"]) @ #-121
    [6] <>this<> := enterCode(<>obj<>28)

  LoopHead[18] -> [20], [19]

  Block[19] -> [21], ExitExc
    [0] assert(<>y<>19 < <>obj<>20["length"])
    [1] <>obj<>21 := @ToObject(<>childArray<>4) @ #-113
    [2] <>obj<>22 := @ToObject(<>child<>6) @ #-114
    [3] <>temp<>23 := <>obj<>22[<>j<>7]
    [4] <>arguments<>24 := allocArg(1) @ #-115
    [5] <>arguments<>24["0"] := <>temp<>23
    [6] <>fun<>25 := @ToObject(<>obj<>21["push"]) @ #-116
    [7] <>this<> := enterCode(<>obj<>21)

  Block[20] -> [25], ExitExc
    [0] assert(! <>y<>19 < <>obj<>20["length"])

  Call[21] -> ExitExc
    [0] call(<>fun<>25, <>this<>, <>arguments<>24) @ #-117

  AfterCall[22] -> [24]

  AfterCatch[23] -> ExitExc

  LCont[24] -> [18], ExitExc
    [0] <>old<>26 := <>j<>7
    [1] <>new<>27 := @ToNumber(<>old<>26)
    [2] <>j<>7 := <>new<>27 + 1
    [3] <>Global<>ignore10 := <>new<>27
    [4] <>y<>19 := <>j<>7
    [5] <>obj<>20 := @ToObject(<>child<>6) @ #-118

  LBreak[25] -> [26]

  Block[26] -> [30]

  Call[27] -> ExitExc
    [0] call(<>fun<>31, <>this<>, <>arguments<>30) @ #-122

  AfterCall[28] -> [26]

  AfterCatch[29] -> ExitExc

  LCont[30] -> [4], ExitExc
    [0] <>old<>32 := <>i<>5
    [1] <>new<>33 := @ToNumber(<>old<>32)
    [2] <>i<>5 := <>new<>33 + 1
    [3] <>Global<>ignore5 := <>new<>33
    [4] <>y<>9 := <>i<>5
    [5] <>obj<>10 := @ToObject(<>arguments<>8) @ #-123

  LBreak[31] -> Exit, ExitExc
    [0] <>obj<>34 := @ToObject(<>props<>2) @ #-124
    [1] <>obj<>34["children"] := <>childArray<>4
    [2] <>new1<>35 := alloc() @ #-125
    [3] <>new1<>35["type"] := <>type<>1
    [4] <>new1<>35["props"] := <>props<>2
    [5] return(<>new1<>35)

  Exit[-2]

  ExitExc[-3]

}

function[-230] comparefn<>funexpr@6:19-14:8<> {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(<>left<>11 < <>right<>12)
    [1] return(- 1)

  Block[2] -> [5], [4], ExitExc
    [0] assert(! <>left<>11 < <>right<>12)

  Block[3] -> Exit

  Block[4] -> Exit, ExitExc
    [0] assert(<>left<>11 == <>right<>12)
    [1] return(0)

  Block[5] -> [8], [7], ExitExc
    [0] assert(<>left<>11 != <>right<>12)

  Block[6] -> [3]

  Block[7] -> Exit, ExitExc
    [0] assert(<>left<>11 > <>right<>12)
    [1] return(1)

  Block[8] -> [9], ExitExc
    [0] assert(! <>left<>11 > <>right<>12)

  Block[9] -> [6]

  Exit[-2]

  ExitExc[-3]

}

function[-229] isArray {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [7], ExitExc
    [0] assert(typeof <>arg<>1 !== "object")

  Block[2] -> [3], ExitExc
    [0] assert(typeof <>arg<>1 === "object")

  Block[3] -> [5], [4]

  Block[4] -> [7], ExitExc
    [0] assert(<>arg<>1 === null)

  Block[5] -> [6], ExitExc
    [0] assert(<>arg<>1 !== null)

  Block[6] -> [8]

  Branch[7] -> Exit, ExitExc
    [0] return(false)

  Branch[8] -> [10], [9]
    [0] <>new0<>3 := @Class(<>arg<>1)
    [1] <>new<>4 := @SameValue(<>new0<>3, "Array")

  Block[9] -> Exit, ExitExc
    [0] assert(<>new<>4)
    [1] return(true)

  Block[10] -> [11], ExitExc
    [0] assert(! <>new<>4)

  Block[11] -> Exit, ExitExc
    [0] return(false)

  Exit[-2]

  ExitExc[-3]

}

function[-228] Array {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := allocArray(0) @ #-231
    [1] <>arr<>2 := <>Global<>ignore1
    [2] <>obj<>5 := @ToObject(<>arguments<>4) @ #-232

  Block[1] -> [4], [3], ExitExc
    [0] assert(<>obj<>5["length"] === 1)

  Block[2] -> [17], ExitExc
    [0] assert(<>obj<>5["length"] !== 1)
    [1] <>i<>3 := 0
    [2] <>y<>18 := <>i<>3
    [3] <>obj<>19 := @ToObject(<>arguments<>4) @ #-2310

  Block[3] -> [6], [5], ExitExc
    [0] assert(typeof <>len<>1 === "number")
    [1] <>new0<>6 := @ToUint32(<>len<>1)
    [2] <>new<>7 := @SameValue(<>new0<>6, <>len<>1)

  Block[4] -> [15], ExitExc
    [0] assert(typeof <>len<>1 !== "number")
    [1] <>obj<>16 := @ToObject(<>arr<>2) @ #-238
    [2] <>obj<>16["length"] := 1
    [3] <>obj<>17 := @ToObject(<>arr<>2) @ #-239
    [4] <>obj<>17[0] := <>len<>1

  Block[5] -> [7], ExitExc
    [0] assert(<>new<>7)
    [1] <>obj<>8 := @ToObject(<>arr<>2) @ #-233
    [2] <>obj<>8["length"] := <>len<>1

  Block[6] -> [8], ExitExc
    [0] assert(! <>new<>7)
    [1] <>fun<>9 := @ToObject(RangeError) @ #-234
    [2] <>arguments<>10 := allocArg(0) @ #-235
    [3] <>proto<>11 := <>fun<>9["prototype"]
    [4] <>obj<>12 := alloc(<>proto<>11) @ #-236

  Block[7] -> [15]

  Call[8] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-237

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[14] -> ExitExc
    [0] throw(<>new1<>15)

  Block[15] -> [16]

  Block[16] -> Exit, ExitExc
    [0] return(<>arr<>2)

  LoopHead[17] -> [19], [18]

  Block[18] -> [20], ExitExc
    [0] assert(<>y<>18 < <>obj<>19["length"])
    [1] <>obj<>20 := @ToObject(<>arr<>2) @ #-2311
    [2] <>obj<>21 := @ToObject(<>arguments<>4) @ #-2312
    [3] <>obj<>20[<>i<>3] := <>obj<>21[<>i<>3]

  Block[19] -> [21], ExitExc
    [0] assert(! <>y<>18 < <>obj<>19["length"])

  LCont[20] -> [17], ExitExc
    [0] <>old<>22 := <>i<>3
    [1] <>new<>23 := @ToNumber(<>old<>22)
    [2] <>i<>3 := <>new<>23 + 1
    [3] <>Global<>ignore7 := <>new<>23
    [4] <>y<>18 := <>i<>3
    [5] <>obj<>19 := @ToObject(<>arguments<>4) @ #-2313

  LBreak[21] -> [16], ExitExc
    [0] <>obj<>24 := @ToObject(<>arr<>2) @ #-2314
    [1] <>obj<>25 := @ToObject(<>arguments<>4) @ #-2315
    [2] <>obj<>24["length"] := <>obj<>25["length"]

  Exit[-2]

  ExitExc[-3]

}

function[-227] Array {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := allocArray(0) @ #-221
    [1] <>arr<>2 := <>Global<>ignore1
    [2] <>obj<>5 := @ToObject(<>arguments<>4) @ #-222

  Block[1] -> [4], [3], ExitExc
    [0] assert(<>obj<>5["length"] === 1)

  Block[2] -> [17], ExitExc
    [0] assert(<>obj<>5["length"] !== 1)
    [1] <>i<>3 := 0
    [2] <>y<>18 := <>i<>3
    [3] <>obj<>19 := @ToObject(<>arguments<>4) @ #-2210

  Block[3] -> [6], [5], ExitExc
    [0] assert(typeof <>len<>1 === "number")
    [1] <>new0<>6 := @ToUint32(<>len<>1)
    [2] <>new<>7 := @SameValue(<>new0<>6, <>len<>1)

  Block[4] -> [15], ExitExc
    [0] assert(typeof <>len<>1 !== "number")
    [1] <>obj<>16 := @ToObject(<>arr<>2) @ #-228
    [2] <>obj<>16["length"] := 1
    [3] <>obj<>17 := @ToObject(<>arr<>2) @ #-229
    [4] <>obj<>17[0] := <>len<>1

  Block[5] -> [7], ExitExc
    [0] assert(<>new<>7)
    [1] <>obj<>8 := @ToObject(<>arr<>2) @ #-223
    [2] <>obj<>8["length"] := <>len<>1

  Block[6] -> [8], ExitExc
    [0] assert(! <>new<>7)
    [1] <>fun<>9 := @ToObject(RangeError) @ #-224
    [2] <>arguments<>10 := allocArg(0) @ #-225
    [3] <>proto<>11 := <>fun<>9["prototype"]
    [4] <>obj<>12 := alloc(<>proto<>11) @ #-226

  Block[7] -> [15]

  Call[8] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-227

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[14] -> ExitExc
    [0] throw(<>new1<>15)

  Block[15] -> [16]

  Block[16] -> Exit, ExitExc
    [0] return(<>arr<>2)

  LoopHead[17] -> [19], [18]

  Block[18] -> [20], ExitExc
    [0] assert(<>y<>18 < <>obj<>19["length"])
    [1] <>obj<>20 := @ToObject(<>arr<>2) @ #-2211
    [2] <>obj<>21 := @ToObject(<>arguments<>4) @ #-2212
    [3] <>obj<>20[<>i<>3] := <>obj<>21[<>i<>3]

  Block[19] -> [21], ExitExc
    [0] assert(! <>y<>18 < <>obj<>19["length"])

  LCont[20] -> [17], ExitExc
    [0] <>old<>22 := <>i<>3
    [1] <>new<>23 := @ToNumber(<>old<>22)
    [2] <>i<>3 := <>new<>23 + 1
    [3] <>Global<>ignore7 := <>new<>23
    [4] <>y<>18 := <>i<>3
    [5] <>obj<>19 := @ToObject(<>arguments<>4) @ #-2213

  LBreak[21] -> [16], ExitExc
    [0] <>obj<>24 := @ToObject(<>arr<>2) @ #-2214
    [1] <>obj<>25 := @ToObject(<>arguments<>4) @ #-2215
    [2] <>obj<>24["length"] := <>obj<>25["length"]

  Exit[-2]

  ExitExc[-3]

}

function[-226] reduceRight {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-211
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>12 := @ToObject(<>O<>3) @ #-212
    [3] <>lenValue<>4 := <>obj<>12["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>13 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>13 === false)
    [1] <>fun<>14 := @ToObject(TypeError) @ #-213
    [2] <>arguments<>15 := allocArg(0) @ #-214
    [3] <>proto<>16 := <>fun<>14["prototype"]
    [4] <>obj<>17 := alloc(<>proto<>16) @ #-215

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>13 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>14, <>obj<>17, <>arguments<>15) @ #-216

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>19 := @isObject(<>newObj<>18)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>19)
    [1] <>new1<>20 := <>newObj<>18

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>19)
    [1] <>new1<>20 := <>obj<>17

  Block[9] -> ExitExc
    [0] throw(<>new1<>20)

  Block[10] -> [12], [11]

  Block[11] -> [13], ExitExc
    [0] assert(<>len<>5 === 0)
    [1] <>obj<>21 := @ToObject(<>arguments<>11) @ #-217
    [2] <>new<>22 := <>obj<>21["length"] < 2

  Block[12] -> [15], [14], ExitExc
    [0] assert(<>len<>5 !== 0)

  Block[13] -> [18], [17]

  Block[14] -> [16], ExitExc
    [0] assert(typeof <>len<>5 === 0 == "boolean")
    [1] <>new<>22 := false

  Block[15] -> [16], ExitExc
    [0] assert(typeof <>len<>5 === 0 != "boolean")
    [1] <>new<>22 := <>len<>5 === 0

  Block[16] -> [13]

  Block[17] -> [19], ExitExc
    [0] assert(<>new<>22)
    [1] <>fun<>23 := @ToObject(TypeError) @ #-218
    [2] <>arguments<>24 := allocArg(0) @ #-219
    [3] <>proto<>25 := <>fun<>23["prototype"]
    [4] <>obj<>26 := alloc(<>proto<>25) @ #-2110

  Block[18] -> [26], ExitExc
    [0] assert(! <>new<>22)

  Call[19] -> ExitExc
    [0] construct(<>fun<>23, <>obj<>26, <>arguments<>24) @ #-2111

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>28 := @isObject(<>newObj<>27)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>28)
    [1] <>new1<>29 := <>newObj<>27

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>28)
    [1] <>new1<>29 := <>obj<>26

  Block[25] -> ExitExc
    [0] throw(<>new1<>29)

  Block[26] -> [28], [27], ExitExc
    [0] <>k<>6 := <>len<>5 - 1
    [1] <>obj<>30 := @ToObject(<>arguments<>11) @ #-2112

  Block[27] -> [29], ExitExc
    [0] assert(<>obj<>30["length"] > 1)
    [1] <>accumulator<>7 := <>initialValue<>2

  Block[28] -> [31], [30], ExitExc
    [0] assert(! <>obj<>30["length"] > 1)
    [1] <>kPresent<>8 := false

  Block[29] -> [60]

  Block[30] -> [32], ExitExc
    [0] assert(<>kPresent<>8 === false)
    [1] <>new1<>31 := <>k<>6 >= 0

  Block[31] -> [34], [33], ExitExc
    [0] assert(<>kPresent<>8 !== false)

  Block[32] -> [36]

  Block[33] -> [35], ExitExc
    [0] assert(typeof <>kPresent<>8 === false == "boolean")
    [1] <>new1<>31 := false

  Block[34] -> [35], ExitExc
    [0] assert(typeof <>kPresent<>8 === false != "boolean")
    [1] <>new1<>31 := <>kPresent<>8 === false

  Block[35] -> [32]

  LoopHead[36] -> [38], [37]

  Block[37] -> [40], [39], ExitExc
    [0] assert(<>new1<>31)
    [1] <>Global<>ignore7 := @ToString(<>k<>6)
    [2] <>Pk<>9 := <>Global<>ignore7
    [3] <>kPresent<>8 := <>Pk<>9 in <>O<>3

  Block[38] -> [49], ExitExc
    [0] assert(! <>new1<>31)

  Block[39] -> [41], ExitExc
    [0] assert(<>kPresent<>8)
    [1] <>obj<>32 := @ToObject(<>O<>3) @ #-2113
    [2] <>accumulator<>7 := <>obj<>32[<>Pk<>9]

  Block[40] -> [41], ExitExc
    [0] assert(! <>kPresent<>8)

  Block[41] -> [42], ExitExc
    [0] <>old<>33 := <>k<>6
    [1] <>k<>6 := <>old<>33 - 1

  LCont[42] -> [44], [43]

  Block[43] -> [45], ExitExc
    [0] assert(<>kPresent<>8 === false)
    [1] <>new1<>31 := <>k<>6 >= 0

  Block[44] -> [47], [46], ExitExc
    [0] assert(<>kPresent<>8 !== false)

  Block[45] -> [36]

  Block[46] -> [48], ExitExc
    [0] assert(typeof <>kPresent<>8 === false == "boolean")
    [1] <>new1<>31 := false

  Block[47] -> [48], ExitExc
    [0] assert(typeof <>kPresent<>8 === false != "boolean")
    [1] <>new1<>31 := <>kPresent<>8 === false

  Block[48] -> [45]

  LBreak[49] -> [51], [50]

  Block[50] -> [52], ExitExc
    [0] assert(! <>kPresent<>8)
    [1] <>fun<>34 := @ToObject(TypeError) @ #-2114
    [2] <>arguments<>35 := allocArg(0) @ #-2115
    [3] <>proto<>36 := <>fun<>34["prototype"]
    [4] <>obj<>37 := alloc(<>proto<>36) @ #-2116

  Block[51] -> [59], ExitExc
    [0] assert(! ! <>kPresent<>8)

  Call[52] -> ExitExc
    [0] construct(<>fun<>34, <>obj<>37, <>arguments<>35) @ #-2117

  AfterCall[53] -> [55]

  AfterCatch[54] -> ExitExc

  Block[55] -> [57], [56]
    [0] <>cond<>39 := @isObject(<>newObj<>38)

  Block[56] -> [58], ExitExc
    [0] assert(<>cond<>39)
    [1] <>new1<>40 := <>newObj<>38

  Block[57] -> [58], ExitExc
    [0] assert(! <>cond<>39)
    [1] <>new1<>40 := <>obj<>37

  Block[58] -> ExitExc
    [0] throw(<>new1<>40)

  Block[59] -> [29]

  LoopHead[60] -> [62], [61]

  Block[61] -> [64], [63], ExitExc
    [0] assert(<>k<>6 >= 0)
    [1] <>Global<>ignore11 := @ToString(<>k<>6)
    [2] <>Pk<>9 := <>Global<>ignore11
    [3] <>kPresent<>8 := <>Pk<>9 in <>O<>3

  Block[62] -> [71], ExitExc
    [0] assert(! <>k<>6 >= 0)

  Block[63] -> [65], ExitExc
    [0] assert(<>kPresent<>8)
    [1] <>obj<>41 := @ToObject(<>O<>3) @ #-2118
    [2] <>kValue<>10 := <>obj<>41[<>Pk<>9]
    [3] <>temp<>42 := <>accumulator<>7
    [4] <>temp<>43 := <>kValue<>10
    [5] <>temp<>44 := <>k<>6
    [6] <>temp<>45 := <>O<>3
    [7] <>new2<>46 := allocArray(4) @ #-2119
    [8] <>new2<>46["0"] := <>temp<>42
    [9] <>new2<>46["1"] := <>temp<>43
    [10] <>new2<>46["2"] := <>temp<>44
    [11] <>new2<>46["3"] := <>temp<>45

  Block[64] -> [69], ExitExc
    [0] assert(! <>kPresent<>8)

  Call[65] -> ExitExc
    [0] call(<>callbackfn<>1, undefined, <>new2<>46) @ #-2120

  AfterCall[66] -> [68]

  AfterCatch[67] -> ExitExc

  Block[68] -> [69], ExitExc
    [0] <>accumulator<>7 := <>Global<>ignore14

  Block[69] -> [70], ExitExc
    [0] <>old<>47 := <>k<>6
    [1] <>k<>6 := <>old<>47 - 1

  LCont[70] -> [60]

  LBreak[71] -> Exit, ExitExc
    [0] return(<>accumulator<>7)

  Exit[-2]

  ExitExc[-3]

}

function[-225] reduce {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-201
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>12 := @ToObject(<>O<>3) @ #-202
    [3] <>lenValue<>4 := <>obj<>12["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>13 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>13 === false)
    [1] <>fun<>14 := @ToObject(TypeError) @ #-203
    [2] <>arguments<>15 := allocArg(0) @ #-204
    [3] <>proto<>16 := <>fun<>14["prototype"]
    [4] <>obj<>17 := alloc(<>proto<>16) @ #-205

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>13 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>14, <>obj<>17, <>arguments<>15) @ #-206

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>19 := @isObject(<>newObj<>18)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>19)
    [1] <>new1<>20 := <>newObj<>18

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>19)
    [1] <>new1<>20 := <>obj<>17

  Block[9] -> ExitExc
    [0] throw(<>new1<>20)

  Block[10] -> [12], [11]

  Block[11] -> [13], ExitExc
    [0] assert(<>len<>5 === 0)
    [1] <>obj<>21 := @ToObject(<>arguments<>11) @ #-207
    [2] <>new<>22 := <>obj<>21["length"] < 2

  Block[12] -> [15], [14], ExitExc
    [0] assert(<>len<>5 !== 0)

  Block[13] -> [18], [17]

  Block[14] -> [16], ExitExc
    [0] assert(typeof <>len<>5 === 0 == "boolean")
    [1] <>new<>22 := false

  Block[15] -> [16], ExitExc
    [0] assert(typeof <>len<>5 === 0 != "boolean")
    [1] <>new<>22 := <>len<>5 === 0

  Block[16] -> [13]

  Block[17] -> [19], ExitExc
    [0] assert(<>new<>22)
    [1] <>fun<>23 := @ToObject(TypeError) @ #-208
    [2] <>arguments<>24 := allocArg(0) @ #-209
    [3] <>proto<>25 := <>fun<>23["prototype"]
    [4] <>obj<>26 := alloc(<>proto<>25) @ #-2010

  Block[18] -> [26], ExitExc
    [0] assert(! <>new<>22)

  Call[19] -> ExitExc
    [0] construct(<>fun<>23, <>obj<>26, <>arguments<>24) @ #-2011

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>28 := @isObject(<>newObj<>27)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>28)
    [1] <>new1<>29 := <>newObj<>27

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>28)
    [1] <>new1<>29 := <>obj<>26

  Block[25] -> ExitExc
    [0] throw(<>new1<>29)

  Block[26] -> [28], [27], ExitExc
    [0] <>k<>6 := 0
    [1] <>obj<>30 := @ToObject(<>arguments<>11) @ #-2012

  Block[27] -> [29], ExitExc
    [0] assert(<>obj<>30["length"] > 1)
    [1] <>accumulator<>7 := <>initialValue<>2

  Block[28] -> [31], [30], ExitExc
    [0] assert(! <>obj<>30["length"] > 1)
    [1] <>kPresent<>8 := false

  Block[29] -> [60]

  Block[30] -> [32], ExitExc
    [0] assert(<>kPresent<>8 === false)
    [1] <>new1<>31 := <>k<>6 < <>len<>5

  Block[31] -> [34], [33], ExitExc
    [0] assert(<>kPresent<>8 !== false)

  Block[32] -> [36]

  Block[33] -> [35], ExitExc
    [0] assert(typeof <>kPresent<>8 === false == "boolean")
    [1] <>new1<>31 := false

  Block[34] -> [35], ExitExc
    [0] assert(typeof <>kPresent<>8 === false != "boolean")
    [1] <>new1<>31 := <>kPresent<>8 === false

  Block[35] -> [32]

  LoopHead[36] -> [38], [37]

  Block[37] -> [40], [39], ExitExc
    [0] assert(<>new1<>31)
    [1] <>Global<>ignore7 := @ToString(<>k<>6)
    [2] <>Pk<>9 := <>Global<>ignore7
    [3] <>kPresent<>8 := <>Pk<>9 in <>O<>3

  Block[38] -> [49], ExitExc
    [0] assert(! <>new1<>31)

  Block[39] -> [41], ExitExc
    [0] assert(<>kPresent<>8)
    [1] <>obj<>32 := @ToObject(<>O<>3) @ #-2013
    [2] <>accumulator<>7 := <>obj<>32[<>Pk<>9]

  Block[40] -> [41], ExitExc
    [0] assert(! <>kPresent<>8)

  Block[41] -> [42], ExitExc
    [0] <>old<>33 := <>k<>6
    [1] <>k<>6 := <>old<>33 + 1

  LCont[42] -> [44], [43]

  Block[43] -> [45], ExitExc
    [0] assert(<>kPresent<>8 === false)
    [1] <>new1<>31 := <>k<>6 < <>len<>5

  Block[44] -> [47], [46], ExitExc
    [0] assert(<>kPresent<>8 !== false)

  Block[45] -> [36]

  Block[46] -> [48], ExitExc
    [0] assert(typeof <>kPresent<>8 === false == "boolean")
    [1] <>new1<>31 := false

  Block[47] -> [48], ExitExc
    [0] assert(typeof <>kPresent<>8 === false != "boolean")
    [1] <>new1<>31 := <>kPresent<>8 === false

  Block[48] -> [45]

  LBreak[49] -> [51], [50]

  Block[50] -> [52], ExitExc
    [0] assert(! <>kPresent<>8)
    [1] <>fun<>34 := @ToObject(TypeError) @ #-2014
    [2] <>arguments<>35 := allocArg(0) @ #-2015
    [3] <>proto<>36 := <>fun<>34["prototype"]
    [4] <>obj<>37 := alloc(<>proto<>36) @ #-2016

  Block[51] -> [59], ExitExc
    [0] assert(! ! <>kPresent<>8)

  Call[52] -> ExitExc
    [0] construct(<>fun<>34, <>obj<>37, <>arguments<>35) @ #-2017

  AfterCall[53] -> [55]

  AfterCatch[54] -> ExitExc

  Block[55] -> [57], [56]
    [0] <>cond<>39 := @isObject(<>newObj<>38)

  Block[56] -> [58], ExitExc
    [0] assert(<>cond<>39)
    [1] <>new1<>40 := <>newObj<>38

  Block[57] -> [58], ExitExc
    [0] assert(! <>cond<>39)
    [1] <>new1<>40 := <>obj<>37

  Block[58] -> ExitExc
    [0] throw(<>new1<>40)

  Block[59] -> [29]

  LoopHead[60] -> [62], [61]

  Block[61] -> [64], [63], ExitExc
    [0] assert(<>k<>6 < <>len<>5)
    [1] <>Global<>ignore11 := @ToString(<>k<>6)
    [2] <>Pk<>9 := <>Global<>ignore11
    [3] <>kPresent<>8 := <>Pk<>9 in <>O<>3

  Block[62] -> [71], ExitExc
    [0] assert(! <>k<>6 < <>len<>5)

  Block[63] -> [65], ExitExc
    [0] assert(<>kPresent<>8)
    [1] <>obj<>41 := @ToObject(<>O<>3) @ #-2018
    [2] <>kValue<>10 := <>obj<>41[<>Pk<>9]
    [3] <>temp<>42 := <>accumulator<>7
    [4] <>temp<>43 := <>kValue<>10
    [5] <>temp<>44 := <>k<>6
    [6] <>temp<>45 := <>O<>3
    [7] <>new2<>46 := allocArray(4) @ #-2019
    [8] <>new2<>46["0"] := <>temp<>42
    [9] <>new2<>46["1"] := <>temp<>43
    [10] <>new2<>46["2"] := <>temp<>44
    [11] <>new2<>46["3"] := <>temp<>45

  Block[64] -> [69], ExitExc
    [0] assert(! <>kPresent<>8)

  Call[65] -> ExitExc
    [0] call(<>callbackfn<>1, undefined, <>new2<>46) @ #-2020

  AfterCall[66] -> [68]

  AfterCatch[67] -> ExitExc

  Block[68] -> [69], ExitExc
    [0] <>accumulator<>7 := <>Global<>ignore14

  Block[69] -> [70], ExitExc
    [0] <>old<>47 := <>k<>6
    [1] <>k<>6 := <>old<>47 + 1

  LCont[70] -> [60]

  LBreak[71] -> Exit, ExitExc
    [0] return(<>accumulator<>7)

  Exit[-2]

  ExitExc[-3]

}

function[-224] filter {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-191
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>15 := @ToObject(<>O<>3) @ #-192
    [3] <>lenValue<>4 := <>obj<>15["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>16 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>16 === false)
    [1] <>fun<>17 := @ToObject(TypeError) @ #-193
    [2] <>arguments<>18 := allocArg(0) @ #-194
    [3] <>proto<>19 := <>fun<>17["prototype"]
    [4] <>obj<>20 := alloc(<>proto<>19) @ #-195

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>16 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>17, <>obj<>20, <>arguments<>18) @ #-196

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>22 := @isObject(<>newObj<>21)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>22)
    [1] <>new1<>23 := <>newObj<>21

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>22)
    [1] <>new1<>23 := <>obj<>20

  Block[9] -> ExitExc
    [0] throw(<>new1<>23)

  Block[10] -> [12], [11], ExitExc
    [0] <>obj<>24 := @ToObject(<>arguments<>14) @ #-197

  Block[11] -> [13], ExitExc
    [0] assert(<>obj<>24["length"] > 1)
    [1] <>T<>6 := <>thisArg<>2

  Block[12] -> [13], ExitExc
    [0] assert(! <>obj<>24["length"] > 1)
    [1] <>T<>6 := undefined

  Block[13] -> [14], ExitExc
    [0] <>fun<>25 := @ToObject(Array) @ #-198
    [1] <>arguments<>26 := allocArg(0) @ #-199
    [2] <>proto<>27 := <>fun<>25["prototype"]
    [3] <>obj<>28 := alloc(<>proto<>27) @ #-1910

  Call[14] -> ExitExc
    [0] construct(<>fun<>25, <>obj<>28, <>arguments<>26) @ #-1911

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>30 := @isObject(<>newObj<>29)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>30)
    [1] <>Global<>ignore6 := <>newObj<>29

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>30)
    [1] <>Global<>ignore6 := <>obj<>28

  Block[20] -> [21], ExitExc
    [0] <>A<>7 := <>Global<>ignore6
    [1] <>k<>8 := 0
    [2] <>to<>9 := 0

  LoopHead[21] -> [23], [22]

  Block[22] -> [25], [24], ExitExc
    [0] assert(<>k<>8 < <>len<>5)
    [1] <>Global<>ignore9 := @ToString(<>k<>8)
    [2] <>Pk<>10 := <>Global<>ignore9
    [3] <>kPresent<>11 := <>Pk<>10 in <>O<>3

  Block[23] -> [35], ExitExc
    [0] assert(! <>k<>8 < <>len<>5)

  Block[24] -> [26], ExitExc
    [0] assert(<>kPresent<>11)
    [1] <>obj<>31 := @ToObject(<>O<>3) @ #-1912
    [2] <>kValue<>12 := <>obj<>31[<>Pk<>10]
    [3] <>temp<>32 := <>kValue<>12
    [4] <>temp<>33 := <>k<>8
    [5] <>temp<>34 := <>O<>3
    [6] <>new2<>35 := allocArray(3) @ #-1913
    [7] <>new2<>35["0"] := <>temp<>32
    [8] <>new2<>35["1"] := <>temp<>33
    [9] <>new2<>35["2"] := <>temp<>34

  Block[25] -> [33], ExitExc
    [0] assert(! <>kPresent<>11)

  Call[26] -> ExitExc
    [0] call(<>callbackfn<>1, <>T<>6, <>new2<>35) @ #-1914

  AfterCall[27] -> [29]

  AfterCatch[28] -> ExitExc

  Block[29] -> [31], [30], ExitExc
    [0] <>selected<>13 := <>Global<>ignore12
    [1] <>y<>36 := @ToBoolean(<>selected<>13)

  Block[30] -> [32], ExitExc
    [0] assert(<>y<>36 === true)
    [1] <>new1<>37 := @ToString(<>to<>9)
    [2] <>new2<>38 := alloc() @ #-1915
    [3] <>new2<>38["value"] := <>kValue<>12
    [4] <>new2<>38["writable"] := true
    [5] <>new2<>38["enumerable"] := true
    [6] <>new2<>38["configurable"] := true
    [7] <>Global<>ignore13 := @DefineOwnProperty(<>A<>7, <>new1<>37, <>new2<>38)
    [8] <>old<>39 := <>to<>9
    [9] <>to<>9 := <>old<>39 + 1

  Block[31] -> [32], ExitExc
    [0] assert(<>y<>36 !== true)

  Block[32] -> [33]

  Block[33] -> [34], ExitExc
    [0] <>old<>40 := <>k<>8
    [1] <>k<>8 := <>old<>40 + 1

  LCont[34] -> [21]

  LBreak[35] -> Exit, ExitExc
    [0] <>obj<>41 := @ToObject(<>A<>7) @ #-1916
    [1] <>obj<>41["length"] := <>k<>8
    [2] return(<>A<>7)

  Exit[-2]

  ExitExc[-3]

}

function[-223] map {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-181
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>14 := @ToObject(<>O<>3) @ #-182
    [3] <>lenValue<>4 := <>obj<>14["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>15 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>15 === false)
    [1] <>fun<>16 := @ToObject(TypeError) @ #-183
    [2] <>arguments<>17 := allocArg(0) @ #-184
    [3] <>proto<>18 := <>fun<>16["prototype"]
    [4] <>obj<>19 := alloc(<>proto<>18) @ #-185

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>15 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>16, <>obj<>19, <>arguments<>17) @ #-186

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>21 := @isObject(<>newObj<>20)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>21)
    [1] <>new1<>22 := <>newObj<>20

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>21)
    [1] <>new1<>22 := <>obj<>19

  Block[9] -> ExitExc
    [0] throw(<>new1<>22)

  Block[10] -> [12], [11], ExitExc
    [0] <>obj<>23 := @ToObject(<>arguments<>13) @ #-187

  Block[11] -> [13], ExitExc
    [0] assert(<>obj<>23["length"] > 1)
    [1] <>T<>6 := <>thisArg<>2

  Block[12] -> [13], ExitExc
    [0] assert(! <>obj<>23["length"] > 1)
    [1] <>T<>6 := undefined

  Block[13] -> [14], ExitExc
    [0] <>fun<>24 := @ToObject(Array) @ #-188
    [1] <>temp<>25 := <>len<>5
    [2] <>arguments<>26 := allocArg(1) @ #-189
    [3] <>arguments<>26["0"] := <>temp<>25
    [4] <>proto<>27 := <>fun<>24["prototype"]
    [5] <>obj<>28 := alloc(<>proto<>27) @ #-1810

  Call[14] -> ExitExc
    [0] construct(<>fun<>24, <>obj<>28, <>arguments<>26) @ #-1811

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>30 := @isObject(<>newObj<>29)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>30)
    [1] <>Global<>ignore6 := <>newObj<>29

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>30)
    [1] <>Global<>ignore6 := <>obj<>28

  Block[20] -> [21], ExitExc
    [0] <>A<>7 := <>Global<>ignore6
    [1] <>k<>8 := 0

  LoopHead[21] -> [23], [22]

  Block[22] -> [25], [24], ExitExc
    [0] assert(<>k<>8 < <>len<>5)
    [1] <>Global<>ignore8 := @ToString(<>k<>8)
    [2] <>Pk<>9 := <>Global<>ignore8
    [3] <>kPresent<>10 := <>Pk<>9 in <>O<>3

  Block[23] -> [32], ExitExc
    [0] assert(! <>k<>8 < <>len<>5)

  Block[24] -> [26], ExitExc
    [0] assert(<>kPresent<>10)
    [1] <>obj<>31 := @ToObject(<>O<>3) @ #-1812
    [2] <>kValue<>11 := <>obj<>31[<>Pk<>9]
    [3] <>temp<>32 := <>kValue<>11
    [4] <>temp<>33 := <>k<>8
    [5] <>temp<>34 := <>O<>3
    [6] <>new2<>35 := allocArray(3) @ #-1813
    [7] <>new2<>35["0"] := <>temp<>32
    [8] <>new2<>35["1"] := <>temp<>33
    [9] <>new2<>35["2"] := <>temp<>34

  Block[25] -> [30], ExitExc
    [0] assert(! <>kPresent<>10)

  Call[26] -> ExitExc
    [0] call(<>callbackfn<>1, <>T<>6, <>new2<>35) @ #-1814

  AfterCall[27] -> [29]

  AfterCatch[28] -> ExitExc

  Block[29] -> [30], ExitExc
    [0] <>mappedValue<>12 := <>Global<>ignore11
    [1] <>new2<>36 := alloc() @ #-1815
    [2] <>new2<>36["value"] := <>mappedValue<>12
    [3] <>new2<>36["writable"] := true
    [4] <>new2<>36["enumerable"] := true
    [5] <>new2<>36["configurable"] := true
    [6] <>Global<>ignore12 := @DefineOwnProperty(<>A<>7, <>Pk<>9, <>new2<>36)

  Block[30] -> [31], ExitExc
    [0] <>old<>37 := <>k<>8
    [1] <>k<>8 := <>old<>37 + 1

  LCont[31] -> [21]

  LBreak[32] -> Exit, ExitExc
    [0] return(<>A<>7)

  Exit[-2]

  ExitExc[-3]

}

function[-222] forEach {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-171
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>12 := @ToObject(<>O<>3) @ #-172
    [3] <>lenValue<>4 := <>obj<>12["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>13 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>13 === false)
    [1] <>fun<>14 := @ToObject(TypeError) @ #-173
    [2] <>arguments<>15 := allocArg(0) @ #-174
    [3] <>proto<>16 := <>fun<>14["prototype"]
    [4] <>obj<>17 := alloc(<>proto<>16) @ #-175

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>13 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>14, <>obj<>17, <>arguments<>15) @ #-176

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>19 := @isObject(<>newObj<>18)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>19)
    [1] <>new1<>20 := <>newObj<>18

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>19)
    [1] <>new1<>20 := <>obj<>17

  Block[9] -> ExitExc
    [0] throw(<>new1<>20)

  Block[10] -> [12], [11], ExitExc
    [0] <>obj<>21 := @ToObject(<>arguments<>11) @ #-177

  Block[11] -> [13], ExitExc
    [0] assert(<>obj<>21["length"] > 1)
    [1] <>T<>6 := <>thisArg<>2

  Block[12] -> [13], ExitExc
    [0] assert(! <>obj<>21["length"] > 1)
    [1] <>T<>6 := undefined

  Block[13] -> [14], ExitExc
    [0] <>k<>7 := 0

  LoopHead[14] -> [16], [15]

  Block[15] -> [18], [17], ExitExc
    [0] assert(<>k<>7 < <>len<>5)
    [1] <>Global<>ignore7 := @ToString(<>k<>7)
    [2] <>Pk<>8 := <>Global<>ignore7
    [3] <>kPresent<>9 := <>Pk<>8 in <>O<>3

  Block[16] -> [24], ExitExc
    [0] assert(! <>k<>7 < <>len<>5)

  Block[17] -> [19], ExitExc
    [0] assert(<>kPresent<>9)
    [1] <>obj<>22 := @ToObject(<>O<>3) @ #-178
    [2] <>kValue<>10 := <>obj<>22[<>Pk<>8]
    [3] <>temp<>23 := <>kValue<>10
    [4] <>temp<>24 := <>k<>7
    [5] <>temp<>25 := <>O<>3
    [6] <>new2<>26 := allocArray(3) @ #-179
    [7] <>new2<>26["0"] := <>temp<>23
    [8] <>new2<>26["1"] := <>temp<>24
    [9] <>new2<>26["2"] := <>temp<>25

  Block[18] -> [22], ExitExc
    [0] assert(! <>kPresent<>9)

  Call[19] -> ExitExc
    [0] call(<>callbackfn<>1, <>T<>6, <>new2<>26) @ #-1710

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [23], ExitExc
    [0] <>old<>27 := <>k<>7
    [1] <>k<>7 := <>old<>27 + 1

  LCont[23] -> [14]

  LBreak[24] -> Exit, ExitExc
    [0] return(undefined)

  Exit[-2]

  ExitExc[-3]

}

function[-221] some {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-161
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>13 := @ToObject(<>O<>3) @ #-162
    [3] <>lenValue<>4 := <>obj<>13["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>14 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>14 === false)
    [1] <>fun<>15 := @ToObject(TypeError) @ #-163
    [2] <>arguments<>16 := allocArg(0) @ #-164
    [3] <>proto<>17 := <>fun<>15["prototype"]
    [4] <>obj<>18 := alloc(<>proto<>17) @ #-165

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>14 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>15, <>obj<>18, <>arguments<>16) @ #-166

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>20 := @isObject(<>newObj<>19)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>20)
    [1] <>new1<>21 := <>newObj<>19

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>20)
    [1] <>new1<>21 := <>obj<>18

  Block[9] -> ExitExc
    [0] throw(<>new1<>21)

  Block[10] -> [12], [11], ExitExc
    [0] <>obj<>22 := @ToObject(<>arguments<>12) @ #-167

  Block[11] -> [13], ExitExc
    [0] assert(<>obj<>22["length"] > 1)
    [1] <>T<>6 := <>thisArg<>2

  Block[12] -> [13], ExitExc
    [0] assert(! <>obj<>22["length"] > 1)
    [1] <>T<>6 := undefined

  Block[13] -> [14], ExitExc
    [0] <>k<>7 := 0

  LoopHead[14] -> [16], [15]

  Block[15] -> [18], [17], ExitExc
    [0] assert(<>k<>7 < <>len<>5)
    [1] <>Global<>ignore7 := @ToString(<>k<>7)
    [2] <>Pk<>8 := <>Global<>ignore7
    [3] <>kPresent<>9 := <>Pk<>8 in <>O<>3

  Block[16] -> [28], ExitExc
    [0] assert(! <>k<>7 < <>len<>5)

  Block[17] -> [19], ExitExc
    [0] assert(<>kPresent<>9)
    [1] <>obj<>23 := @ToObject(<>O<>3) @ #-168
    [2] <>kValue<>10 := <>obj<>23[<>Pk<>8]
    [3] <>temp<>24 := <>kValue<>10
    [4] <>temp<>25 := <>k<>7
    [5] <>temp<>26 := <>O<>3
    [6] <>new2<>27 := allocArray(3) @ #-169
    [7] <>new2<>27["0"] := <>temp<>24
    [8] <>new2<>27["1"] := <>temp<>25
    [9] <>new2<>27["2"] := <>temp<>26

  Block[18] -> [26], ExitExc
    [0] assert(! <>kPresent<>9)

  Call[19] -> ExitExc
    [0] call(<>callbackfn<>1, <>T<>6, <>new2<>27) @ #-1610

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23], ExitExc
    [0] <>testResult<>11 := <>Global<>ignore10
    [1] <>y<>28 := @ToBoolean(<>testResult<>11)

  Block[23] -> Exit, ExitExc
    [0] assert(<>y<>28 === true)
    [1] return(true)

  Block[24] -> [25], ExitExc
    [0] assert(<>y<>28 !== true)

  Block[25] -> [26]

  Block[26] -> [27], ExitExc
    [0] <>old<>29 := <>k<>7
    [1] <>k<>7 := <>old<>29 + 1

  LCont[27] -> [14]

  LBreak[28] -> Exit, ExitExc
    [0] return(false)

  Exit[-2]

  ExitExc[-3]

}

function[-220] every {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-151
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>13 := @ToObject(<>O<>3) @ #-152
    [3] <>lenValue<>4 := <>obj<>13["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>y<>14 := @IsCallable(<>callbackfn<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>14 === false)
    [1] <>fun<>15 := @ToObject(TypeError) @ #-153
    [2] <>arguments<>16 := allocArg(0) @ #-154
    [3] <>proto<>17 := <>fun<>15["prototype"]
    [4] <>obj<>18 := alloc(<>proto<>17) @ #-155

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>14 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>15, <>obj<>18, <>arguments<>16) @ #-156

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>20 := @isObject(<>newObj<>19)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>20)
    [1] <>new1<>21 := <>newObj<>19

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>20)
    [1] <>new1<>21 := <>obj<>18

  Block[9] -> ExitExc
    [0] throw(<>new1<>21)

  Block[10] -> [12], [11], ExitExc
    [0] <>obj<>22 := @ToObject(<>arguments<>12) @ #-157

  Block[11] -> [13], ExitExc
    [0] assert(<>obj<>22["length"] > 1)
    [1] <>T<>6 := <>thisArg<>2

  Block[12] -> [13], ExitExc
    [0] assert(! <>obj<>22["length"] > 1)
    [1] <>T<>6 := undefined

  Block[13] -> [14], ExitExc
    [0] <>k<>7 := 0

  LoopHead[14] -> [16], [15]

  Block[15] -> [18], [17], ExitExc
    [0] assert(<>k<>7 < <>len<>5)
    [1] <>Global<>ignore7 := @ToString(<>k<>7)
    [2] <>Pk<>8 := <>Global<>ignore7
    [3] <>kPresent<>9 := <>Pk<>8 in <>O<>3

  Block[16] -> [28], ExitExc
    [0] assert(! <>k<>7 < <>len<>5)

  Block[17] -> [19], ExitExc
    [0] assert(<>kPresent<>9)
    [1] <>obj<>23 := @ToObject(<>O<>3) @ #-158
    [2] <>kValue<>10 := <>obj<>23[<>Pk<>8]
    [3] <>temp<>24 := <>kValue<>10
    [4] <>temp<>25 := <>k<>7
    [5] <>temp<>26 := <>O<>3
    [6] <>new2<>27 := allocArray(3) @ #-159
    [7] <>new2<>27["0"] := <>temp<>24
    [8] <>new2<>27["1"] := <>temp<>25
    [9] <>new2<>27["2"] := <>temp<>26

  Block[18] -> [26], ExitExc
    [0] assert(! <>kPresent<>9)

  Call[19] -> ExitExc
    [0] call(<>callbackfn<>1, <>T<>6, <>new2<>27) @ #-1510

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23], ExitExc
    [0] <>testResult<>11 := <>Global<>ignore10
    [1] <>y<>28 := @ToBoolean(<>testResult<>11)

  Block[23] -> Exit, ExitExc
    [0] assert(<>y<>28 === false)
    [1] return(false)

  Block[24] -> [25], ExitExc
    [0] assert(<>y<>28 !== false)

  Block[25] -> [26]

  Block[26] -> [27], ExitExc
    [0] <>old<>29 := <>k<>7
    [1] <>k<>7 := <>old<>29 + 1

  LCont[27] -> [14]

  LBreak[28] -> Exit, ExitExc
    [0] return(true)

  Exit[-2]

  ExitExc[-3]

}

function[-219] lastIndexOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-141
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>12 := @ToObject(<>O<>3) @ #-142
    [3] <>lenValue<>4 := <>obj<>12["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>new<>13 := @SameValue(<>len<>5, 0)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>13)
    [1] return(- 1)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>13)

  Block[3] -> [5], [4], ExitExc
    [0] <>obj<>14 := @ToObject(<>arguments<>11) @ #-143

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>14["length"] > 1)
    [1] <>Global<>ignore4 := @ToInteger(<>fromIndex<>2)
    [2] <>n<>6 := <>Global<>ignore4

  Block[5] -> [6], ExitExc
    [0] assert(! <>obj<>14["length"] > 1)
    [1] <>n<>6 := <>len<>5 - 1

  Block[6] -> [8], [7]

  Block[7] -> [9], ExitExc
    [0] assert(<>n<>6 >= 0)
    [1] <>obj<>15 := @ToObject(Math) @ #-144
    [2] <>temp<>16 := <>n<>6
    [3] <>temp<>17 := <>len<>5 - 1
    [4] <>arguments<>18 := allocArg(2) @ #-145
    [5] <>arguments<>18["0"] := <>temp<>16
    [6] <>arguments<>18["1"] := <>temp<>17
    [7] <>fun<>19 := @ToObject(<>obj<>15["min"]) @ #-146
    [8] <>this<> := enterCode(<>obj<>15)

  Block[8] -> [13], ExitExc
    [0] assert(! <>n<>6 >= 0)
    [1] <>y<>20 := <>len<>5
    [2] <>z<>21 := @abs(<>n<>6)
    [3] <>k<>7 := <>y<>20 - <>z<>21

  Call[9] -> ExitExc
    [0] call(<>fun<>19, <>this<>, <>arguments<>18) @ #-147

  AfterCall[10] -> [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> [13], ExitExc
    [0] <>k<>7 := <>Global<>ignore6

  Block[13] -> [14]

  LoopHead[14] -> [16], [15]

  Block[15] -> [18], [17], ExitExc
    [0] assert(<>k<>7 >= 0)
    [1] <>y<>22 := @ToString(<>k<>7)
    [2] <>kPresent<>8 := <>y<>22 in <>O<>3

  Block[16] -> [24], ExitExc
    [0] assert(! <>k<>7 >= 0)

  Block[17] -> [20], [19], ExitExc
    [0] assert(<>kPresent<>8)
    [1] <>obj<>23 := @ToObject(<>O<>3) @ #-148
    [2] <>field1<>24 := @ToString(<>k<>7)
    [3] <>elementK<>9 := <>obj<>23[<>field1<>24]
    [4] <>same<>10 := <>searchElement<>1 === <>elementK<>9

  Block[18] -> [22], ExitExc
    [0] assert(! <>kPresent<>8)

  Block[19] -> Exit, ExitExc
    [0] assert(<>same<>10)
    [1] return(<>k<>7)

  Block[20] -> [21], ExitExc
    [0] assert(! <>same<>10)

  Block[21] -> [22]

  Block[22] -> [23], ExitExc
    [0] <>old<>25 := <>k<>7
    [1] <>k<>7 := <>old<>25 - 1

  LCont[23] -> [14]

  LBreak[24] -> Exit, ExitExc
    [0] return(- 1)

  Exit[-2]

  ExitExc[-3]

}

function[-218] indexOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-131
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>obj<>12 := @ToObject(<>O<>3) @ #-132
    [3] <>lenValue<>4 := <>obj<>12["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenValue<>4)
    [5] <>len<>5 := <>Global<>ignore3
    [6] <>new<>13 := @SameValue(<>len<>5, 0)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>13)
    [1] return(- 1)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>13)

  Block[3] -> [5], [4], ExitExc
    [0] <>obj<>14 := @ToObject(<>arguments<>11) @ #-133

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>14["length"] > 1)
    [1] <>Global<>ignore4 := @ToInteger(<>fromIndex<>2)
    [2] <>n<>6 := <>Global<>ignore4

  Block[5] -> [6], ExitExc
    [0] assert(! <>obj<>14["length"] > 1)
    [1] <>n<>6 := 0

  Block[6] -> [8], [7]

  Block[7] -> Exit, ExitExc
    [0] assert(<>n<>6 >= <>len<>5)
    [1] return(- 1)

  Block[8] -> [9], ExitExc
    [0] assert(! <>n<>6 >= <>len<>5)

  Block[9] -> [11], [10]

  Block[10] -> [12], ExitExc
    [0] assert(<>n<>6 >= 0)
    [1] <>k<>7 := <>n<>6

  Block[11] -> [14], [13], ExitExc
    [0] assert(! <>n<>6 >= 0)
    [1] <>y<>15 := <>len<>5
    [2] <>z<>16 := @abs(<>n<>6)
    [3] <>k<>7 := <>y<>15 - <>z<>16

  Block[12] -> [16]

  Block[13] -> [15], ExitExc
    [0] assert(<>k<>7 < 0)
    [1] <>k<>7 := 0

  Block[14] -> [15], ExitExc
    [0] assert(! <>k<>7 < 0)

  Block[15] -> [12]

  LoopHead[16] -> [18], [17]

  Block[17] -> [20], [19], ExitExc
    [0] assert(<>k<>7 < <>len<>5)
    [1] <>y<>17 := @ToString(<>k<>7)
    [2] <>kPresent<>8 := <>y<>17 in <>O<>3

  Block[18] -> [26], ExitExc
    [0] assert(! <>k<>7 < <>len<>5)

  Block[19] -> [22], [21], ExitExc
    [0] assert(<>kPresent<>8)
    [1] <>obj<>18 := @ToObject(<>O<>3) @ #-134
    [2] <>field1<>19 := @ToString(<>k<>7)
    [3] <>elementK<>9 := <>obj<>18[<>field1<>19]
    [4] <>same<>10 := <>searchElement<>1 === <>elementK<>9

  Block[20] -> [24], ExitExc
    [0] assert(! <>kPresent<>8)

  Block[21] -> Exit, ExitExc
    [0] assert(<>same<>10)
    [1] return(<>k<>7)

  Block[22] -> [23], ExitExc
    [0] assert(! <>same<>10)

  Block[23] -> [24]

  Block[24] -> [25], ExitExc
    [0] <>old<>20 := <>k<>7
    [1] <>k<>7 := <>old<>20 + 1

  LCont[25] -> [16]

  LBreak[26] -> Exit, ExitExc
    [0] return(- 1)

  Exit[-2]

  ExitExc[-3]

}

function[-217] unshift {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-121
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>obj<>15 := @ToObject(<>O<>1) @ #-122
    [3] <>lenVal<>2 := <>obj<>15["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenVal<>2)
    [5] <>len<>3 := <>Global<>ignore3
    [6] <>obj<>16 := @ToObject(<>arguments<>14) @ #-123
    [7] <>argCount<>4 := <>obj<>16["length"]
    [8] <>k<>5 := <>len<>3

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>k<>5 > 0)
    [1] <>Global<>ignore6 := @ToString(<>k<>5 - 1)
    [2] <>from<>6 := <>Global<>ignore6
    [3] <>Global<>ignore7 := @ToString(<>k<>5 + <>argCount<>4 - 1)
    [4] <>to<>7 := <>Global<>ignore7
    [5] <>fromPresent<>8 := <>from<>6 in <>O<>1

  Block[3] -> [8], ExitExc
    [0] assert(! <>k<>5 > 0)

  Block[4] -> [6], ExitExc
    [0] assert(<>fromPresent<>8)
    [1] <>obj<>17 := @ToObject(<>O<>1) @ #-124
    [2] <>fromValue<>9 := <>obj<>17[<>from<>6]
    [3] <>obj<>18 := @ToObject(<>O<>1) @ #-125
    [4] <>obj<>18[<>to<>7] := <>fromValue<>9

  Block[5] -> [6], ExitExc
    [0] assert(! <>fromPresent<>8)
    [1] <>obj<>19 := @ToObject(<>O<>1) @ #-126
    [2] <>Global<>ignore11 := delete(<>obj<>19, <>to<>7)

  Block[6] -> [7], ExitExc
    [0] <>old<>20 := <>k<>5
    [1] <>k<>5 := <>old<>20 - 1

  LCont[7] -> [1]

  LBreak[8] -> [9], ExitExc
    [0] <>j<>10 := 0
    [1] <>items<>11 := <>arguments<>14
    [2] <>i<>12 := 0
    [3] <>y<>21 := <>i<>12
    [4] <>obj<>22 := @ToObject(<>items<>11) @ #-127

  LoopHead[9] -> [11], [10]

  Block[10] -> [12], ExitExc
    [0] assert(<>y<>21 < <>obj<>22["length"])
    [1] <>obj<>23 := @ToObject(<>items<>11) @ #-128
    [2] <>E<>13 := <>obj<>23[<>i<>12]
    [3] <>obj<>24 := @ToObject(<>O<>1) @ #-129
    [4] <>field1<>25 := @ToString(<>j<>10)
    [5] <>obj<>24[<>field1<>25] := <>E<>13
    [6] <>old<>26 := <>j<>10
    [7] <>j<>10 := <>old<>26 + 1

  Block[11] -> [13], ExitExc
    [0] assert(! <>y<>21 < <>obj<>22["length"])

  LCont[12] -> [9], ExitExc
    [0] <>old<>27 := <>i<>12
    [1] <>new<>28 := @ToNumber(<>old<>27)
    [2] <>i<>12 := <>new<>28 + 1
    [3] <>Global<>ignore17 := <>new<>28
    [4] <>y<>21 := <>i<>12
    [5] <>obj<>22 := @ToObject(<>items<>11) @ #-1210

  LBreak[13] -> Exit, ExitExc
    [0] <>obj<>29 := @ToObject(<>O<>1) @ #-1211
    [1] <>obj<>29["length"] := <>len<>3 + <>argCount<>4
    [2] return(<>len<>3 + <>argCount<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-216] splice {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-111
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>fun<>19 := @ToObject(Array) @ #-112
    [3] <>arguments<>20 := allocArg(0) @ #-113
    [4] <>proto<>21 := <>fun<>19["prototype"]
    [5] <>obj<>22 := alloc(<>proto<>21) @ #-114

  Call[1] -> ExitExc
    [0] construct(<>fun<>19, <>obj<>22, <>arguments<>20) @ #-115

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>24 := @isObject(<>newObj<>23)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>24)
    [1] <>Global<>ignore2 := <>newObj<>23

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>24)
    [1] <>Global<>ignore2 := <>obj<>22

  Block[7] -> [9], [8], ExitExc
    [0] <>A<>4 := <>Global<>ignore2
    [1] <>obj<>25 := @ToObject(<>O<>3) @ #-116
    [2] <>lenVal<>5 := <>obj<>25["length"]
    [3] <>Global<>ignore4 := @ToUint32(<>lenVal<>5)
    [4] <>len<>6 := <>Global<>ignore4
    [5] <>Global<>ignore5 := @ToInteger(<>start<>1)
    [6] <>relativeStart<>7 := <>Global<>ignore5

  Block[8] -> [10], ExitExc
    [0] assert(<>relativeStart<>7 < 0)
    [1] <>obj<>26 := @ToObject(Math) @ #-117
    [2] <>temp<>27 := <>len<>6 + <>relativeStart<>7
    [3] <>temp<>28 := 0
    [4] <>arguments<>29 := allocArg(2) @ #-118
    [5] <>arguments<>29["0"] := <>temp<>27
    [6] <>arguments<>29["1"] := <>temp<>28
    [7] <>fun<>30 := @ToObject(<>obj<>26["max"]) @ #-119
    [8] <>this<> := enterCode(<>obj<>26)

  Block[9] -> [15], ExitExc
    [0] assert(! <>relativeStart<>7 < 0)
    [1] <>obj<>31 := @ToObject(Math) @ #-1111
    [2] <>temp<>32 := <>relativeStart<>7
    [3] <>temp<>33 := <>len<>6
    [4] <>arguments<>34 := allocArg(2) @ #-1112
    [5] <>arguments<>34["0"] := <>temp<>32
    [6] <>arguments<>34["1"] := <>temp<>33
    [7] <>fun<>35 := @ToObject(<>obj<>31["min"]) @ #-1113
    [8] <>this<> := enterCode(<>obj<>31)

  Call[10] -> ExitExc
    [0] call(<>fun<>30, <>this<>, <>arguments<>29) @ #-1110

  AfterCall[11] -> [13]

  AfterCatch[12] -> ExitExc

  Block[13] -> [14], ExitExc
    [0] <>actualStart<>8 := <>Global<>ignore6

  Block[14] -> [19], ExitExc
    [0] <>obj<>36 := @ToObject(Math) @ #-1115
    [1] <>obj<>37 := @ToObject(Math) @ #-1116
    [2] <>temp<>38 := @ToInteger(<>deleteCount<>2)
    [3] <>temp<>39 := 0
    [4] <>arguments<>40 := allocArg(2) @ #-1117
    [5] <>arguments<>40["0"] := <>temp<>38
    [6] <>arguments<>40["1"] := <>temp<>39
    [7] <>fun<>41 := @ToObject(<>obj<>37["max"]) @ #-1118
    [8] <>this<> := enterCode(<>obj<>37)

  Call[15] -> ExitExc
    [0] call(<>fun<>35, <>this<>, <>arguments<>34) @ #-1114

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> [14], ExitExc
    [0] <>actualStart<>8 := <>Global<>ignore7

  Call[19] -> ExitExc
    [0] call(<>fun<>41, <>this<>, <>arguments<>40) @ #-1119

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [23], ExitExc
    [0] <>temp<>43 := <>len<>6 - <>actualStart<>8
    [1] <>arguments<>44 := allocArg(2) @ #-1120
    [2] <>arguments<>44["0"] := <>temp<>42
    [3] <>arguments<>44["1"] := <>temp<>43
    [4] <>fun<>45 := @ToObject(<>obj<>36["min"]) @ #-1121
    [5] <>this<> := enterCode(<>obj<>36)

  Call[23] -> ExitExc
    [0] call(<>fun<>45, <>this<>, <>arguments<>44) @ #-1122

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [27], ExitExc
    [0] <>actualDeleteCount<>9 := <>Global<>ignore8
    [1] <>k<>10 := 0

  LoopHead[27] -> [29], [28]

  Block[28] -> [31], [30], ExitExc
    [0] assert(<>k<>10 < <>actualDeleteCount<>9)
    [1] <>Global<>ignore10 := @ToString(<>actualStart<>8 + <>k<>10)
    [2] <>from<>11 := <>Global<>ignore10
    [3] <>fromPresent<>12 := <>from<>11 in <>O<>3

  Block[29] -> [34], ExitExc
    [0] assert(! <>k<>10 < <>actualDeleteCount<>9)

  Block[30] -> [32], ExitExc
    [0] assert(<>fromPresent<>12)
    [1] <>obj<>46 := @ToObject(<>O<>3) @ #-1123
    [2] <>fromValue<>13 := <>obj<>46[<>from<>11]
    [3] <>new1<>47 := @ToString(<>k<>10)
    [4] <>new2<>48 := alloc() @ #-1124
    [5] <>new2<>48["value"] := <>fromValue<>13
    [6] <>new2<>48["writable"] := true
    [7] <>new2<>48["enumerable"] := true
    [8] <>new2<>48["configurable"] := true
    [9] <>Global<>ignore13 := @DefineOwnProperty(<>A<>4, <>new1<>47, <>new2<>48)

  Block[31] -> [32], ExitExc
    [0] assert(! <>fromPresent<>12)

  Block[32] -> [33], ExitExc
    [0] <>old<>49 := <>k<>10
    [1] <>k<>10 := <>old<>49 + 1

  LCont[33] -> [27]

  LBreak[34] -> [35], ExitExc
    [0] <>fun<>50 := @ToObject(Array) @ #-1125
    [1] <>arguments<>51 := allocArg(0) @ #-1126
    [2] <>proto<>52 := <>fun<>50["prototype"]
    [3] <>obj<>53 := alloc(<>proto<>52) @ #-1127

  Call[35] -> ExitExc
    [0] construct(<>fun<>50, <>obj<>53, <>arguments<>51) @ #-1128

  AfterCall[36] -> [38]

  AfterCatch[37] -> ExitExc

  Block[38] -> [40], [39]
    [0] <>cond<>55 := @isObject(<>newObj<>54)

  Block[39] -> [41], ExitExc
    [0] assert(<>cond<>55)
    [1] <>Global<>ignore15 := <>newObj<>54

  Block[40] -> [41], ExitExc
    [0] assert(! <>cond<>55)
    [1] <>Global<>ignore15 := <>obj<>53

  Block[41] -> [42], ExitExc
    [0] items := <>Global<>ignore15
    [1] <>i<>14 := 0
    [2] <>y<>56 := <>i<>14
    [3] <>obj<>57 := @ToObject(<>arguments<>18) @ #-1129

  LoopHead[42] -> [44], [43]

  Block[43] -> [45], ExitExc
    [0] assert(<>y<>56 < <>obj<>57["length"] - 2)
    [1] <>obj<>58 := @ToObject(items) @ #-1130
    [2] <>obj<>59 := @ToObject(<>arguments<>18) @ #-1131
    [3] <>obj<>58[<>i<>14] := <>obj<>59[<>i<>14 + 2]

  Block[44] -> [46], ExitExc
    [0] assert(! <>y<>56 < <>obj<>57["length"] - 2)

  LCont[45] -> [42], ExitExc
    [0] <>old<>60 := <>i<>14
    [1] <>new<>61 := @ToNumber(<>old<>60)
    [2] <>i<>14 := <>new<>61 + 1
    [3] <>Global<>ignore18 := <>new<>61
    [4] <>y<>56 := <>i<>14
    [5] <>obj<>57 := @ToObject(<>arguments<>18) @ #-1132

  LBreak[46] -> [48], [47], ExitExc
    [0] <>obj<>62 := @ToObject(items) @ #-1133
    [1] <>itemCount<>15 := <>obj<>62["length"]

  Block[47] -> [49], ExitExc
    [0] assert(<>itemCount<>15 < <>actualDeleteCount<>9)
    [1] <>k<>10 := <>actualStart<>8

  Block[48] -> [63], ExitExc
    [0] assert(! <>itemCount<>15 < <>actualDeleteCount<>9)
    [1] <>k<>10 := <>len<>6 - <>actualDeleteCount<>9

  LoopHead[49] -> [51], [50]

  Block[50] -> [53], [52], ExitExc
    [0] assert(<>k<>10 < <>len<>6 - <>actualDeleteCount<>9)
    [1] <>Global<>ignore22 := @ToString(<>k<>10 + <>actualDeleteCount<>9)
    [2] <>from<>11 := <>Global<>ignore22
    [3] <>Global<>ignore23 := @ToString(<>k<>10 + <>itemCount<>15)
    [4] <>to<>16 := <>Global<>ignore23
    [5] <>fromPresent<>12 := <>from<>11 in <>O<>3

  Block[51] -> [56], ExitExc
    [0] assert(! <>k<>10 < <>len<>6 - <>actualDeleteCount<>9)

  Block[52] -> [54], ExitExc
    [0] assert(<>fromPresent<>12)
    [1] <>obj<>63 := @ToObject(<>O<>3) @ #-1134
    [2] <>fromValue<>13 := <>obj<>63[<>from<>11]
    [3] <>obj<>64 := @ToObject(<>O<>3) @ #-1135
    [4] <>obj<>64[<>to<>16] := <>fromValue<>13

  Block[53] -> [54], ExitExc
    [0] assert(! <>fromPresent<>12)
    [1] <>obj<>65 := @ToObject(<>O<>3) @ #-1136
    [2] <>Global<>ignore27 := delete(<>obj<>65, <>to<>16)

  Block[54] -> [55], ExitExc
    [0] <>old<>66 := <>k<>10
    [1] <>k<>10 := <>old<>66 + 1

  LCont[55] -> [49]

  LBreak[56] -> [57], ExitExc
    [0] <>k<>10 := <>len<>6

  LoopHead[57] -> [59], [58]

  Block[58] -> [60], ExitExc
    [0] assert(<>k<>10 > <>len<>6 - <>actualDeleteCount<>9 + <>itemCount<>15)
    [1] <>obj<>67 := @ToObject(<>O<>3) @ #-1137
    [2] <>field1<>68 := @ToString(<>k<>10 - 1)
    [3] <>Global<>ignore30 := delete(<>obj<>67, <>field1<>68)
    [4] <>old<>69 := <>k<>10
    [5] <>k<>10 := <>old<>69 - 1

  Block[59] -> [61], ExitExc
    [0] assert(! <>k<>10 > <>len<>6 - <>actualDeleteCount<>9 + <>itemCount<>15)

  LCont[60] -> [57]

  LBreak[61] -> [62]

  Block[62] -> [71], ExitExc
    [0] <>k<>10 := <>actualStart<>8
    [1] <>i<>14 := 0
    [2] <>y<>74 := <>i<>14
    [3] <>obj<>75 := @ToObject(items) @ #-1141

  LoopHead[63] -> [65], [64]

  Block[64] -> [67], [66], ExitExc
    [0] assert(<>k<>10 > <>actualStart<>8)
    [1] <>Global<>ignore33 := @ToString(<>k<>10 + <>actualDeleteCount<>9 - 1)
    [2] <>from<>11 := <>Global<>ignore33
    [3] <>Global<>ignore34 := @ToString(<>k<>10 + <>itemCount<>15 - 1)
    [4] <>to<>16 := <>Global<>ignore34
    [5] <>fromPresent<>12 := <>from<>11 in <>O<>3

  Block[65] -> [70], ExitExc
    [0] assert(! <>k<>10 > <>actualStart<>8)

  Block[66] -> [68], ExitExc
    [0] assert(<>fromPresent<>12)
    [1] <>obj<>70 := @ToObject(<>O<>3) @ #-1138
    [2] <>fromValue<>13 := <>obj<>70[<>from<>11]
    [3] <>obj<>71 := @ToObject(<>O<>3) @ #-1139
    [4] <>obj<>71[<>to<>16] := <>fromValue<>13

  Block[67] -> [68], ExitExc
    [0] assert(! <>fromPresent<>12)
    [1] <>obj<>72 := @ToObject(<>O<>3) @ #-1140
    [2] <>Global<>ignore38 := delete(<>obj<>72, <>to<>16)

  Block[68] -> [69], ExitExc
    [0] <>old<>73 := <>k<>10
    [1] <>k<>10 := <>old<>73 - 1

  LCont[69] -> [63]

  LBreak[70] -> [62]

  LoopHead[71] -> [73], [72]

  Block[72] -> [74], ExitExc
    [0] assert(<>y<>74 < <>obj<>75["length"])
    [1] <>obj<>76 := @ToObject(items) @ #-1142
    [2] <>E<>17 := <>obj<>76[<>i<>14]
    [3] <>obj<>77 := @ToObject(<>O<>3) @ #-1143
    [4] <>field1<>78 := @ToString(<>k<>10)
    [5] <>obj<>77[<>field1<>78] := <>E<>17
    [6] <>old<>79 := <>k<>10
    [7] <>k<>10 := <>old<>79 + 1

  Block[73] -> [75], ExitExc
    [0] assert(! <>y<>74 < <>obj<>75["length"])

  LCont[74] -> [71], ExitExc
    [0] <>old<>80 := <>i<>14
    [1] <>new<>81 := @ToNumber(<>old<>80)
    [2] <>i<>14 := <>new<>81 + 1
    [3] <>Global<>ignore43 := <>new<>81
    [4] <>y<>74 := <>i<>14
    [5] <>obj<>75 := @ToObject(items) @ #-1144

  LBreak[75] -> Exit, ExitExc
    [0] <>obj<>82 := @ToObject(<>O<>3) @ #-1145
    [1] <>obj<>82["length"] := <>len<>6 - <>actualDeleteCount<>9 + <>itemCount<>15
    [2] <>obj<>83 := @ToObject(<>A<>4) @ #-1146
    [3] <>obj<>83["length"] := <>actualDeleteCount<>9
    [4] return(<>A<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-215] sort {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-101
    [1] <>a<>2 := <>Global<>ignore1
    [2] <>obj<>9 := @ToObject(<>a<>2) @ #-102
    [3] <>n<>3 := <>obj<>9["length"]
    [4] <>new<>10 := @SameValue(<>comparefn<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(<>new<>10)
    [1] <>Global<>ignore3 := function (-230) @ #-103, #-104
    [2] <>comparefn<>1 := <>Global<>ignore3

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>10)

  Block[3] -> [4], ExitExc
    [0] <>newn<>4 := 0
    [1] <>i<>5 := 1

  LoopHead[4] -> [6], [5]

  Block[5] -> [7], ExitExc
    [0] assert(<>i<>5 < <>n<>3)
    [1] <>obj<>15 := @ToObject(<>comparefn<>1) @ #-105
    [2] <>obj<>16 := @ToObject(<>a<>2) @ #-106
    [3] <>temp<>17 := <>obj<>16[<>i<>5 - 1]
    [4] <>obj<>18 := @ToObject(<>a<>2) @ #-107
    [5] <>temp<>19 := <>obj<>18[<>i<>5]
    [6] <>arguments<>20 := allocArg(2) @ #-108
    [7] <>arguments<>20["0"] := <>temp<>17
    [8] <>arguments<>20["1"] := <>temp<>19
    [9] <>fun<>21 := @GetBase(<>comparefn<>1)
    [10] <>this<> := enterCode(<>fun<>21)

  Block[6] -> [15], ExitExc
    [0] assert(! <>i<>5 < <>n<>3)

  Call[7] -> ExitExc
    [0] call(<>obj<>15, <>this<>, <>arguments<>20) @ #-109

  AfterCall[8] -> [10]

  AfterCatch[9] -> ExitExc

  Block[10] -> [12], [11], ExitExc
    [0] <>result<>6 := <>Global<>ignore8

  Block[11] -> [13], ExitExc
    [0] assert(<>result<>6 === 1)
    [1] <>obj<>22 := @ToObject(<>a<>2) @ #-1010
    [2] <>temp<>7 := <>obj<>22[<>i<>5 - 1]
    [3] <>obj<>23 := @ToObject(<>a<>2) @ #-1011
    [4] <>obj<>24 := @ToObject(<>a<>2) @ #-1012
    [5] <>obj<>23[<>i<>5 - 1] := <>obj<>24[<>i<>5]
    [6] <>obj<>25 := @ToObject(<>a<>2) @ #-1013
    [7] <>obj<>25[<>i<>5] := <>temp<>7
    [8] <>newn<>4 := <>i<>5

  Block[12] -> [13], ExitExc
    [0] assert(<>result<>6 !== 1)

  Block[13] -> [14]

  LCont[14] -> [4], ExitExc
    [0] <>old<>26 := <>i<>5
    [1] <>new<>27 := @ToNumber(<>old<>26)
    [2] <>i<>5 := <>new<>27 + 1
    [3] <>Global<>ignore7 := <>new<>27

  LBreak[15] -> [16], ExitExc
    [0] <>n<>3 := <>newn<>4

  LCont[16] -> [17]

  LoopHead[17] -> [19], [18]

  Block[18] -> [20], ExitExc
    [0] assert(<>n<>3 != 0)
    [1] <>newn<>4 := 0
    [2] <>i<>5 := 1

  Block[19] -> [33], ExitExc
    [0] assert(<>n<>3 == 0)

  LoopHead[20] -> [22], [21]

  Block[21] -> [23], ExitExc
    [0] assert(<>i<>5 < <>n<>3)
    [1] <>obj<>15 := @ToObject(<>comparefn<>1) @ #-1014
    [2] <>obj<>16 := @ToObject(<>a<>2) @ #-1015
    [3] <>temp<>17 := <>obj<>16[<>i<>5 - 1]
    [4] <>obj<>18 := @ToObject(<>a<>2) @ #-1016
    [5] <>temp<>19 := <>obj<>18[<>i<>5]
    [6] <>arguments<>20 := allocArg(2) @ #-1017
    [7] <>arguments<>20["0"] := <>temp<>17
    [8] <>arguments<>20["1"] := <>temp<>19
    [9] <>fun<>21 := @GetBase(<>comparefn<>1)
    [10] <>this<> := enterCode(<>fun<>21)

  Block[22] -> [31], ExitExc
    [0] assert(! <>i<>5 < <>n<>3)

  Call[23] -> ExitExc
    [0] call(<>obj<>15, <>this<>, <>arguments<>20) @ #-1018

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [28], [27], ExitExc
    [0] <>result<>6 := <>Global<>ignore8

  Block[27] -> [29], ExitExc
    [0] assert(<>result<>6 === 1)
    [1] <>obj<>22 := @ToObject(<>a<>2) @ #-1019
    [2] <>temp<>7 := <>obj<>22[<>i<>5 - 1]
    [3] <>obj<>23 := @ToObject(<>a<>2) @ #-1020
    [4] <>obj<>24 := @ToObject(<>a<>2) @ #-1021
    [5] <>obj<>23[<>i<>5 - 1] := <>obj<>24[<>i<>5]
    [6] <>obj<>25 := @ToObject(<>a<>2) @ #-1022
    [7] <>obj<>25[<>i<>5] := <>temp<>7
    [8] <>newn<>4 := <>i<>5

  Block[28] -> [29], ExitExc
    [0] assert(<>result<>6 !== 1)

  Block[29] -> [30]

  LCont[30] -> [20], ExitExc
    [0] <>old<>26 := <>i<>5
    [1] <>new<>27 := @ToNumber(<>old<>26)
    [2] <>i<>5 := <>new<>27 + 1
    [3] <>Global<>ignore7 := <>new<>27

  LBreak[31] -> [32], ExitExc
    [0] <>n<>3 := <>newn<>4

  LCont[32] -> [17]

  LBreak[33] -> Exit, ExitExc
    [0] return(<>a<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-214] slice {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-91
    [1] <>O<>3 := <>Global<>ignore1
    [2] <>fun<>16 := @ToObject(Array) @ #-92
    [3] <>arguments<>17 := allocArg(0) @ #-93
    [4] <>proto<>18 := <>fun<>16["prototype"]
    [5] <>obj<>19 := alloc(<>proto<>18) @ #-94

  Call[1] -> ExitExc
    [0] construct(<>fun<>16, <>obj<>19, <>arguments<>17) @ #-95

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>21 := @isObject(<>newObj<>20)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>21)
    [1] <>Global<>ignore2 := <>newObj<>20

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>21)
    [1] <>Global<>ignore2 := <>obj<>19

  Block[7] -> [9], [8], ExitExc
    [0] <>A<>4 := <>Global<>ignore2
    [1] <>obj<>22 := @ToObject(<>O<>3) @ #-96
    [2] <>lenVal<>5 := <>obj<>22["length"]
    [3] <>Global<>ignore4 := @ToUint32(<>lenVal<>5)
    [4] <>len<>6 := <>Global<>ignore4
    [5] <>Global<>ignore5 := @ToInteger(<>start<>1)
    [6] <>relativeStart<>7 := <>Global<>ignore5

  Block[8] -> [10], ExitExc
    [0] assert(<>relativeStart<>7 < 0)
    [1] <>obj<>23 := @ToObject(Math) @ #-97
    [2] <>temp<>24 := <>len<>6 + <>relativeStart<>7
    [3] <>temp<>25 := 0
    [4] <>arguments<>26 := allocArg(2) @ #-98
    [5] <>arguments<>26["0"] := <>temp<>24
    [6] <>arguments<>26["1"] := <>temp<>25
    [7] <>fun<>27 := @ToObject(<>obj<>23["max"]) @ #-99
    [8] <>this<> := enterCode(<>obj<>23)

  Block[9] -> [15], ExitExc
    [0] assert(! <>relativeStart<>7 < 0)
    [1] <>obj<>28 := @ToObject(Math) @ #-911
    [2] <>temp<>29 := <>relativeStart<>7
    [3] <>temp<>30 := <>len<>6
    [4] <>arguments<>31 := allocArg(2) @ #-912
    [5] <>arguments<>31["0"] := <>temp<>29
    [6] <>arguments<>31["1"] := <>temp<>30
    [7] <>fun<>32 := @ToObject(<>obj<>28["min"]) @ #-913
    [8] <>this<> := enterCode(<>obj<>28)

  Call[10] -> ExitExc
    [0] call(<>fun<>27, <>this<>, <>arguments<>26) @ #-910

  AfterCall[11] -> [13]

  AfterCatch[12] -> ExitExc

  Block[13] -> [14], ExitExc
    [0] <>k<>8 := <>Global<>ignore6

  Block[14] -> [20], [19]
    [0] <>new<>33 := @SameValue(<>end<>2, undefined)

  Call[15] -> ExitExc
    [0] call(<>fun<>32, <>this<>, <>arguments<>31) @ #-914

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> [14], ExitExc
    [0] <>k<>8 := <>Global<>ignore7

  Block[19] -> [21], ExitExc
    [0] assert(<>new<>33)
    [1] <>relativeEnd<>9 := <>len<>6

  Block[20] -> [21], ExitExc
    [0] assert(! <>new<>33)
    [1] <>Global<>ignore9 := @ToInteger(<>end<>2)
    [2] <>relativeEnd<>9 := <>Global<>ignore9

  Block[21] -> [23], [22]

  Block[22] -> [24], ExitExc
    [0] assert(<>relativeEnd<>9 < 0)
    [1] <>obj<>34 := @ToObject(Math) @ #-915
    [2] <>temp<>35 := <>len<>6 + <>relativeEnd<>9
    [3] <>temp<>36 := 0
    [4] <>arguments<>37 := allocArg(2) @ #-916
    [5] <>arguments<>37["0"] := <>temp<>35
    [6] <>arguments<>37["1"] := <>temp<>36
    [7] <>fun<>38 := @ToObject(<>obj<>34["max"]) @ #-917
    [8] <>this<> := enterCode(<>obj<>34)

  Block[23] -> [29], ExitExc
    [0] assert(! <>relativeEnd<>9 < 0)
    [1] <>obj<>39 := @ToObject(Math) @ #-919
    [2] <>temp<>40 := <>relativeEnd<>9
    [3] <>temp<>41 := <>len<>6
    [4] <>arguments<>42 := allocArg(2) @ #-920
    [5] <>arguments<>42["0"] := <>temp<>40
    [6] <>arguments<>42["1"] := <>temp<>41
    [7] <>fun<>43 := @ToObject(<>obj<>39["min"]) @ #-921
    [8] <>this<> := enterCode(<>obj<>39)

  Call[24] -> ExitExc
    [0] call(<>fun<>38, <>this<>, <>arguments<>37) @ #-918

  AfterCall[25] -> [27]

  AfterCatch[26] -> ExitExc

  Block[27] -> [28], ExitExc
    [0] <>final<>10 := <>Global<>ignore10

  Block[28] -> [33], ExitExc
    [0] <>n<>11 := 0

  Call[29] -> ExitExc
    [0] call(<>fun<>43, <>this<>, <>arguments<>42) @ #-922

  AfterCall[30] -> [32]

  AfterCatch[31] -> ExitExc

  Block[32] -> [28], ExitExc
    [0] <>final<>10 := <>Global<>ignore11

  LoopHead[33] -> [35], [34]

  Block[34] -> [37], [36], ExitExc
    [0] assert(<>k<>8 < <>final<>10)
    [1] <>Global<>ignore13 := @ToString(<>k<>8)
    [2] <>Pk<>12 := <>Global<>ignore13
    [3] <>kPresent<>13 := <>Pk<>12 in <>O<>3

  Block[35] -> [40], ExitExc
    [0] assert(! <>k<>8 < <>final<>10)

  Block[36] -> [38], ExitExc
    [0] assert(<>kPresent<>13)
    [1] <>obj<>44 := @ToObject(<>O<>3) @ #-923
    [2] <>kValue<>14 := <>obj<>44[<>Pk<>12]
    [3] <>new1<>45 := @ToString(<>n<>11)
    [4] <>new2<>46 := alloc() @ #-924
    [5] <>new2<>46["value"] := <>kValue<>14
    [6] <>new2<>46["writable"] := true
    [7] <>new2<>46["enumerable"] := true
    [8] <>new2<>46["configurable"] := true
    [9] <>Global<>ignore16 := @DefineOwnProperty(<>A<>4, <>new1<>45, <>new2<>46)

  Block[37] -> [38], ExitExc
    [0] assert(! <>kPresent<>13)

  Block[38] -> [39], ExitExc
    [0] <>old<>47 := <>k<>8
    [1] <>k<>8 := <>old<>47 + 1
    [2] <>old<>48 := <>n<>11
    [3] <>n<>11 := <>old<>48 + 1

  LCont[39] -> [33]

  LBreak[40] -> Exit, ExitExc
    [0] <>obj<>49 := @ToObject(<>A<>4) @ #-925
    [1] <>obj<>49["length"] := <>n<>11
    [2] return(<>A<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-213] shift {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-81
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>obj<>11 := @ToObject(<>O<>1) @ #-82
    [3] <>lenVal<>2 := <>obj<>11["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenVal<>2)
    [5] <>len<>3 := <>Global<>ignore3
    [6] <>new<>12 := @SameValue(<>len<>3, 0)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>12)
    [1] <>obj<>13 := @ToObject(<>O<>1) @ #-83
    [2] <>obj<>13["length"] := 0
    [3] return(undefined)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>12)

  Block[3] -> [4], ExitExc
    [0] <>obj<>14 := @ToObject(<>O<>1) @ #-84
    [1] <>first<>4 := <>obj<>14[0]
    [2] <>k<>5 := 1

  LoopHead[4] -> [6], [5]

  Block[5] -> [8], [7], ExitExc
    [0] assert(<>k<>5 < <>len<>3)
    [1] <>Global<>ignore7 := @ToString(<>k<>5)
    [2] <>from<>6 := <>Global<>ignore7
    [3] <>Global<>ignore8 := @ToString(<>k<>5 - 1)
    [4] <>to<>7 := <>Global<>ignore8
    [5] <>fromPresent<>8 := <>from<>6 in <>O<>1

  Block[6] -> [11], ExitExc
    [0] assert(! <>k<>5 < <>len<>3)

  Block[7] -> [9], ExitExc
    [0] assert(<>fromPresent<>8)
    [1] <>obj<>15 := @ToObject(<>O<>1) @ #-85
    [2] <>fromVal<>9 := <>obj<>15[<>from<>6]
    [3] <>obj<>16 := @ToObject(<>O<>1) @ #-86
    [4] <>obj<>16[<>to<>7] := <>fromVal<>9

  Block[8] -> [9], ExitExc
    [0] assert(! <>fromPresent<>8)
    [1] <>obj<>17 := @ToObject(<>O<>1) @ #-87
    [2] <>Global<>ignore12 := delete(<>obj<>17, <>to<>7)

  Block[9] -> [10], ExitExc
    [0] <>old<>18 := <>k<>5
    [1] <>k<>5 := <>old<>18 + 1

  LCont[10] -> [4]

  LBreak[11] -> Exit, ExitExc
    [0] <>obj<>19 := @ToObject(<>O<>1) @ #-88
    [1] <>field1<>20 := @ToString(<>len<>3 - 1)
    [2] <>Global<>ignore14 := delete(<>obj<>19, <>field1<>20)
    [3] <>obj<>21 := @ToObject(<>O<>1) @ #-89
    [4] <>obj<>21["length"] := <>len<>3 - 1
    [5] return(<>first<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-212] reverse {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-71
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>obj<>14 := @ToObject(<>O<>1) @ #-72
    [3] <>lenVal<>2 := <>obj<>14["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenVal<>2)
    [5] <>len<>3 := <>Global<>ignore3
    [6] <>Global<>ignore4 := @floor(<>len<>3 / 2)
    [7] <>middle<>4 := <>Global<>ignore4
    [8] <>lower<>5 := 0

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>lower<>5 != <>middle<>4)
    [1] <>upper<>6 := <>len<>3 - <>lower<>5 - 1
    [2] <>Global<>ignore7 := @ToString(<>upper<>6)
    [3] <>upperP<>7 := <>Global<>ignore7
    [4] <>Global<>ignore8 := @ToString(<>lower<>5)
    [5] <>lowerP<>8 := <>Global<>ignore8
    [6] <>obj<>15 := @ToObject(<>O<>1) @ #-73
    [7] <>lowerValue<>9 := <>obj<>15[<>lowerP<>8]
    [8] <>obj<>16 := @ToObject(<>O<>1) @ #-74
    [9] <>upperValue<>10 := <>obj<>16[<>upperP<>7]
    [10] <>lowerExists<>11 := <>lowerP<>8 in <>O<>1
    [11] <>upperExists<>12 := <>upperP<>7 in <>O<>1

  Block[3] -> [26], ExitExc
    [0] assert(<>lower<>5 == <>middle<>4)

  Block[4] -> [7], [6], ExitExc
    [0] assert(<>lowerExists<>11)

  Block[5] -> [9], ExitExc
    [0] assert(! <>lowerExists<>11)

  Block[6] -> [24], ExitExc
    [0] assert(<>upperExists<>12)
    [1] <>obj<>17 := @ToObject(<>O<>1) @ #-75
    [2] <>obj<>17[<>lowerP<>8] := <>upperValue<>10
    [3] <>obj<>18 := @ToObject(<>O<>1) @ #-76
    [4] <>obj<>18[<>upperP<>7] := <>lowerValue<>9

  Block[7] -> [8], ExitExc
    [0] assert(! <>upperExists<>12)

  Block[8] -> [9]

  Block[9] -> [11], [10]

  Block[10] -> [13], [12], ExitExc
    [0] assert(! <>lowerExists<>11)

  Block[11] -> [15], ExitExc
    [0] assert(! ! <>lowerExists<>11)

  Block[12] -> [23], ExitExc
    [0] assert(<>upperExists<>12)
    [1] <>obj<>19 := @ToObject(<>O<>1) @ #-77
    [2] <>obj<>19[<>lowerP<>8] := <>upperValue<>10
    [3] <>obj<>20 := @ToObject(<>O<>1) @ #-78
    [4] <>Global<>ignore16 := delete(<>obj<>20, <>upperP<>7)

  Block[13] -> [14], ExitExc
    [0] assert(! <>upperExists<>12)

  Block[14] -> [15]

  Block[15] -> [17], [16]

  Block[16] -> [19], [18], ExitExc
    [0] assert(<>lowerExists<>11)

  Block[17] -> [21], ExitExc
    [0] assert(! <>lowerExists<>11)

  Block[18] -> [22], ExitExc
    [0] assert(! <>upperExists<>12)
    [1] <>obj<>21 := @ToObject(<>O<>1) @ #-79
    [2] <>Global<>ignore17 := delete(<>obj<>21, <>lowerP<>8)
    [3] <>obj<>22 := @ToObject(<>O<>1) @ #-710
    [4] <>obj<>22[<>upperP<>7] := <>lowerValue<>9

  Block[19] -> [20], ExitExc
    [0] assert(! ! <>upperExists<>12)

  Block[20] -> [21]

  Block[21] -> [22]

  Branch[22] -> [23]

  Branch[23] -> [24]

  Branch[24] -> [25], ExitExc
    [0] <>old<>23 := <>lower<>5
    [1] <>lower<>5 := <>old<>23 + 1

  LCont[25] -> [1]

  LBreak[26] -> Exit, ExitExc
    [0] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-211] push {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-61
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>obj<>8 := @ToObject(<>O<>1) @ #-62
    [3] <>lenVal<>2 := <>obj<>8["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenVal<>2)
    [5] <>n<>3 := <>Global<>ignore3
    [6] <>items<>4 := <>arguments<>7
    [7] <>i<>5 := 0
    [8] <>y<>9 := <>i<>5
    [9] <>obj<>10 := @ToObject(<>items<>4) @ #-63

  LoopHead[1] -> [3], [2]

  Block[2] -> [4], ExitExc
    [0] assert(<>y<>9 < <>obj<>10["length"])
    [1] <>obj<>11 := @ToObject(<>items<>4) @ #-64
    [2] <>E<>6 := <>obj<>11[<>i<>5]
    [3] <>obj<>12 := @ToObject(<>O<>1) @ #-65
    [4] <>field1<>13 := @ToString(<>n<>3)
    [5] <>obj<>12[<>field1<>13] := <>E<>6
    [6] <>old<>14 := <>n<>3
    [7] <>new<>15 := @ToNumber(<>old<>14)
    [8] <>n<>3 := <>new<>15 + 1
    [9] <>Global<>ignore11 := <>new<>15

  Block[3] -> [5], ExitExc
    [0] assert(! <>y<>9 < <>obj<>10["length"])

  LCont[4] -> [1], ExitExc
    [0] <>old<>16 := <>i<>5
    [1] <>new<>17 := @ToNumber(<>old<>16)
    [2] <>i<>5 := <>new<>17 + 1
    [3] <>Global<>ignore7 := <>new<>17
    [4] <>y<>9 := <>i<>5
    [5] <>obj<>10 := @ToObject(<>items<>4) @ #-66

  LBreak[5] -> Exit, ExitExc
    [0] <>obj<>18 := @ToObject(<>O<>1) @ #-67
    [1] <>obj<>18["length"] := <>n<>3
    [2] return(<>n<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-210] pop {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-51
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>obj<>7 := @ToObject(<>O<>1) @ #-52
    [3] <>lenVal<>2 := <>obj<>7["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenVal<>2)
    [5] <>len<>3 := <>Global<>ignore3
    [6] <>new<>8 := @SameValue(<>len<>3, 0)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>8)
    [1] <>obj<>9 := @ToObject(<>O<>1) @ #-53
    [2] <>obj<>9["length"] := 0
    [3] return(undefined)

  Block[2] -> Exit, ExitExc
    [0] assert(! <>new<>8)
    [1] <>indx<>4 := <>len<>3 - 1
    [2] <>obj<>10 := @ToObject(<>O<>1) @ #-54
    [3] <>element<>5 := <>obj<>10[<>indx<>4]
    [4] <>obj<>11 := @ToObject(<>O<>1) @ #-55
    [5] <>Global<>ignore7 := delete(<>obj<>11, <>indx<>4)
    [6] <>obj<>12 := @ToObject(<>O<>1) @ #-56
    [7] <>obj<>12["length"] := <>indx<>4
    [8] return(<>element<>5)

  Block[3] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-209] join {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-41
    [1] <>O<>2 := <>Global<>ignore1
    [2] <>obj<>13 := @ToObject(<>O<>2) @ #-42
    [3] <>lenVal<>3 := <>obj<>13["length"]
    [4] <>Global<>ignore3 := @ToUint32(<>lenVal<>3)
    [5] <>len<>4 := <>Global<>ignore3

  Block[1] -> [3], ExitExc
    [0] assert(<>separator<>1 === undefined)
    [1] <>separator<>1 := ","

  Block[2] -> [3], ExitExc
    [0] assert(<>separator<>1 !== undefined)

  Block[3] -> [5], [4], ExitExc
    [0] <>Global<>ignore5 := @ToString(<>separator<>1)
    [1] <>sep<>5 := <>Global<>ignore5

  Block[4] -> Exit, ExitExc
    [0] assert(<>len<>4 === 0)
    [1] return("")

  Block[5] -> [6], ExitExc
    [0] assert(<>len<>4 !== 0)

  Block[6] -> [8], [7], ExitExc
    [0] <>obj<>14 := @ToObject(<>O<>2) @ #-43
    [1] <>element0<>6 := <>obj<>14[0]
    [2] <>new1<>15 := @SameValue(<>element0<>6, undefined)

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>15)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>15)

  Block[9] -> [11], [10]
    [0] <>new2<>16 := @SameValue(<>element0<>6, null)

  Block[10] -> [13], ExitExc
    [0] assert(<>new2<>16)

  Block[11] -> [12], ExitExc
    [0] assert(! <>new2<>16)

  Block[12] -> [14], ExitExc
    [0] <>Global<>ignore7 := @ToString(<>element0<>6)
    [1] <>R<>7 := <>Global<>ignore7

  Branch[13] -> [14], ExitExc
    [0] <>R<>7 := ""

  Branch[14] -> [15], ExitExc
    [0] <>k<>8 := 1

  LoopHead[15] -> [17], [16]

  Block[16] -> [19], [18], ExitExc
    [0] assert(<>k<>8 < <>len<>4)
    [1] <>S<>9 := <>R<>7 + <>sep<>5
    [2] <>obj<>17 := @ToObject(<>O<>2) @ #-44
    [3] <>field1<>18 := @ToString(<>k<>8)
    [4] <>element<>10 := <>obj<>17[<>field1<>18]
    [5] <>new1<>19 := @SameValue(<>element<>10, undefined)

  Block[17] -> [27], ExitExc
    [0] assert(! <>k<>8 < <>len<>4)

  Block[18] -> [24], ExitExc
    [0] assert(<>new1<>19)

  Block[19] -> [20], ExitExc
    [0] assert(! <>new1<>19)

  Block[20] -> [22], [21]
    [0] <>new2<>20 := @SameValue(<>element<>10, null)

  Block[21] -> [24], ExitExc
    [0] assert(<>new2<>20)

  Block[22] -> [23], ExitExc
    [0] assert(! <>new2<>20)

  Block[23] -> [25], ExitExc
    [0] <>Global<>ignore12 := @ToString(<>element<>10)
    [1] <>next<>11 := <>Global<>ignore12

  Branch[24] -> [25], ExitExc
    [0] <>next<>11 := ""

  Branch[25] -> [26], ExitExc
    [0] <>R<>7 := <>S<>9 + <>next<>11
    [1] <>old<>21 := <>k<>8
    [2] <>k<>8 := <>old<>21 + 1

  LCont[26] -> [15]

  LBreak[27] -> Exit, ExitExc
    [0] return(<>R<>7)

  Exit[-2]

  ExitExc[-3]

}

function[-208] concat {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-31
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>fun<>13 := @ToObject(Array) @ #-32
    [3] <>arguments<>14 := allocArg(0) @ #-33
    [4] <>proto<>15 := <>fun<>13["prototype"]
    [5] <>obj<>16 := alloc(<>proto<>15) @ #-34

  Call[1] -> ExitExc
    [0] construct(<>fun<>13, <>obj<>16, <>arguments<>14) @ #-35

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>18 := @isObject(<>newObj<>17)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>18)
    [1] <>Global<>ignore2 := <>newObj<>17

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>18)
    [1] <>Global<>ignore2 := <>obj<>16

  Block[7] -> [9], [8], ExitExc
    [0] <>A<>2 := <>Global<>ignore2
    [1] <>n<>3 := 0
    [2] <>E<>4 := <>O<>1

  Block[8] -> [11], [10], ExitExc
    [0] assert(typeof <>E<>4 === "object")

  Block[9] -> [18], [17], ExitExc
    [0] assert(typeof <>E<>4 !== "object")

  Block[10] -> [12], ExitExc
    [0] assert(<>E<>4 !== null)
    [1] <>y<>19 := @Class(<>E<>4)
    [2] <>new<>20 := <>y<>19 === "Array"

  Block[11] -> [14], [13], ExitExc
    [0] assert(<>E<>4 === null)

  Block[12] -> [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof <>E<>4 !== null == "boolean")
    [1] <>new<>20 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof <>E<>4 !== null != "boolean")
    [1] <>new<>20 := <>E<>4 !== null

  Block[15] -> [12]

  Block[16] -> [21], [20]

  Block[17] -> [19], ExitExc
    [0] assert(typeof typeof <>E<>4 === "object" == "boolean")
    [1] <>new<>20 := false

  Block[18] -> [19], ExitExc
    [0] assert(typeof typeof <>E<>4 === "object" != "boolean")
    [1] <>new<>20 := typeof <>E<>4 === "object"

  Block[19] -> [16]

  Block[20] -> [22], ExitExc
    [0] assert(<>new<>20)
    [1] <>k<>5 := 0
    [2] <>obj<>21 := @ToObject(<>E<>4) @ #-36
    [3] <>len<>6 := <>obj<>21["length"]

  Block[21] -> [31], ExitExc
    [0] assert(! <>new<>20)
    [1] <>obj<>27 := @ToObject(Object) @ #-39
    [2] <>temp<>28 := <>A<>2
    [3] <>temp<>29 := @ToString(<>n<>3)
    [4] <>temp<>30 := alloc() @ #-310
    [5] <>temp<>30["value"] := <>E<>4
    [6] <>temp<>30["writable"] := true
    [7] <>temp<>30["enumerable"] := true
    [8] <>temp<>30["configurable"] := true
    [9] <>arguments<>31 := allocArg(3) @ #-311
    [10] <>arguments<>31["0"] := <>temp<>28
    [11] <>arguments<>31["1"] := <>temp<>29
    [12] <>arguments<>31["2"] := <>temp<>30
    [13] <>fun<>32 := @ToObject(<>obj<>27["defineProperty"]) @ #-312
    [14] <>this<> := enterCode(<>obj<>27)

  LoopHead[22] -> [24], [23]

  Block[23] -> [26], [25], ExitExc
    [0] assert(<>k<>5 < <>len<>6)
    [1] <>Global<>ignore7 := @ToString(<>k<>5)
    [2] <>P<>7 := <>Global<>ignore7
    [3] <>exists<>8 := <>P<>7 in <>E<>4

  Block[24] -> [29], ExitExc
    [0] assert(! <>k<>5 < <>len<>6)

  Block[25] -> [27], ExitExc
    [0] assert(<>exists<>8)
    [1] <>obj<>22 := @ToObject(<>E<>4) @ #-37
    [2] <>subElement<>9 := <>obj<>22[<>P<>7]
    [3] <>new1<>23 := @ToString(<>n<>3)
    [4] <>new2<>24 := alloc() @ #-38
    [5] <>new2<>24["value"] := <>subElement<>9
    [6] <>new2<>24["writable"] := true
    [7] <>new2<>24["enumerable"] := true
    [8] <>new2<>24["configurable"] := true
    [9] <>Global<>ignore10 := @DefineOwnProperty(<>A<>2, <>new1<>23, <>new2<>24)

  Block[26] -> [27], ExitExc
    [0] assert(! <>exists<>8)

  Block[27] -> [28], ExitExc
    [0] <>old<>25 := <>n<>3
    [1] <>n<>3 := <>old<>25 + 1
    [2] <>old<>26 := <>k<>5
    [3] <>k<>5 := <>old<>26 + 1

  LCont[28] -> [22]

  LBreak[29] -> [30]

  Block[30] -> [35], ExitExc
    [0] <>items<>10 := <>arguments<>12
    [1] <>i<>11 := 0
    [2] <>y<>34 := <>i<>11
    [3] <>obj<>35 := @ToObject(<>items<>10) @ #-314

  Call[31] -> ExitExc
    [0] call(<>fun<>32, <>this<>, <>arguments<>31) @ #-313

  AfterCall[32] -> [34]

  AfterCatch[33] -> ExitExc

  Block[34] -> [30], ExitExc
    [0] <>old<>33 := <>n<>3
    [1] <>n<>3 := <>old<>33 + 1

  LoopHead[35] -> [37], [36]

  Block[36] -> [39], [38], ExitExc
    [0] assert(<>y<>34 < <>obj<>35["length"])
    [1] <>obj<>36 := @ToObject(<>items<>10) @ #-315
    [2] <>E<>4 := <>obj<>36[<>i<>11]

  Block[37] -> [66], ExitExc
    [0] assert(! <>y<>34 < <>obj<>35["length"])

  Block[38] -> [41], [40], ExitExc
    [0] assert(typeof <>E<>4 === "object")

  Block[39] -> [48], [47], ExitExc
    [0] assert(typeof <>E<>4 !== "object")

  Block[40] -> [42], ExitExc
    [0] assert(<>E<>4 !== null)
    [1] <>y<>37 := @Class(<>E<>4)
    [2] <>new<>38 := <>y<>37 === "Array"

  Block[41] -> [44], [43], ExitExc
    [0] assert(<>E<>4 === null)

  Block[42] -> [46]

  Block[43] -> [45], ExitExc
    [0] assert(typeof <>E<>4 !== null == "boolean")
    [1] <>new<>38 := false

  Block[44] -> [45], ExitExc
    [0] assert(typeof <>E<>4 !== null != "boolean")
    [1] <>new<>38 := <>E<>4 !== null

  Block[45] -> [42]

  Block[46] -> [51], [50]

  Block[47] -> [49], ExitExc
    [0] assert(typeof typeof <>E<>4 === "object" == "boolean")
    [1] <>new<>38 := false

  Block[48] -> [49], ExitExc
    [0] assert(typeof typeof <>E<>4 === "object" != "boolean")
    [1] <>new<>38 := typeof <>E<>4 === "object"

  Block[49] -> [46]

  Block[50] -> [52], ExitExc
    [0] assert(<>new<>38)
    [1] <>k<>5 := 0
    [2] <>obj<>39 := @ToObject(<>E<>4) @ #-316
    [3] <>len<>6 := <>obj<>39["length"]

  Block[51] -> [61], ExitExc
    [0] assert(! <>new<>38)
    [1] <>obj<>45 := @ToObject(Object) @ #-319
    [2] <>temp<>46 := <>A<>2
    [3] <>temp<>47 := @ToString(<>n<>3)
    [4] <>temp<>48 := alloc() @ #-320
    [5] <>temp<>48["value"] := <>E<>4
    [6] <>temp<>48["writable"] := true
    [7] <>temp<>48["enumerable"] := true
    [8] <>temp<>48["configurable"] := true
    [9] <>arguments<>49 := allocArg(3) @ #-321
    [10] <>arguments<>49["0"] := <>temp<>46
    [11] <>arguments<>49["1"] := <>temp<>47
    [12] <>arguments<>49["2"] := <>temp<>48
    [13] <>fun<>50 := @ToObject(<>obj<>45["defineProperty"]) @ #-322
    [14] <>this<> := enterCode(<>obj<>45)

  LoopHead[52] -> [54], [53]

  Block[53] -> [56], [55], ExitExc
    [0] assert(<>k<>5 < <>len<>6)
    [1] <>Global<>ignore22 := @ToString(<>k<>5)
    [2] <>P<>7 := <>Global<>ignore22
    [3] <>exists<>8 := <>P<>7 in <>E<>4

  Block[54] -> [59], ExitExc
    [0] assert(! <>k<>5 < <>len<>6)

  Block[55] -> [57], ExitExc
    [0] assert(<>exists<>8)
    [1] <>obj<>40 := @ToObject(<>E<>4) @ #-317
    [2] <>subElement<>9 := <>obj<>40[<>P<>7]
    [3] <>new1<>41 := @ToString(<>n<>3)
    [4] <>new2<>42 := alloc() @ #-318
    [5] <>new2<>42["value"] := <>subElement<>9
    [6] <>new2<>42["writable"] := true
    [7] <>new2<>42["enumerable"] := true
    [8] <>new2<>42["configurable"] := true
    [9] <>Global<>ignore25 := @DefineOwnProperty(<>A<>2, <>new1<>41, <>new2<>42)

  Block[56] -> [57], ExitExc
    [0] assert(! <>exists<>8)

  Block[57] -> [58], ExitExc
    [0] <>old<>43 := <>n<>3
    [1] <>n<>3 := <>old<>43 + 1
    [2] <>old<>44 := <>k<>5
    [3] <>k<>5 := <>old<>44 + 1

  LCont[58] -> [52]

  LBreak[59] -> [60]

  Block[60] -> [65]

  Call[61] -> ExitExc
    [0] call(<>fun<>50, <>this<>, <>arguments<>49) @ #-323

  AfterCall[62] -> [64]

  AfterCatch[63] -> ExitExc

  Block[64] -> [60], ExitExc
    [0] <>old<>51 := <>n<>3
    [1] <>n<>3 := <>old<>51 + 1

  LCont[65] -> [35], ExitExc
    [0] <>old<>52 := <>i<>11
    [1] <>new<>53 := @ToNumber(<>old<>52)
    [2] <>i<>11 := <>new<>53 + 1
    [3] <>Global<>ignore18 := <>new<>53
    [4] <>y<>34 := <>i<>11
    [5] <>obj<>35 := @ToObject(<>items<>10) @ #-324

  LBreak[66] -> Exit, ExitExc
    [0] <>obj<>54 := @ToObject(<>A<>2) @ #-325
    [1] <>obj<>54["length"] := <>n<>3
    [2] return(<>A<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-207] toLocaleString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-21
    [1] <>array<>1 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(<>array<>1) @ #-22
    [3] <>func<>2 := <>obj<>4["join"]
    [4] <>y<>5 := @IsCallable(<>func<>2)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(Object) @ #-23
    [2] <>obj<>7 := @ToObject(<>obj<>6["prototype"]) @ #-24
    [3] <>func<>2 := <>obj<>7["toString"]

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> [4], ExitExc
    [0] <>new2<>8 := allocArray(0) @ #-25

  Call[4] -> ExitExc
    [0] call(<>func<>2, <>array<>1, <>new2<>8) @ #-26

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> Exit, ExitExc
    [0] return(<>new1<>9)

  Exit[-2]

  ExitExc[-3]

}

function[-206] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-11
    [1] <>array<>1 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(<>array<>1) @ #-12
    [3] <>func<>2 := <>obj<>4["join"]
    [4] <>y<>5 := @IsCallable(<>func<>2)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(Object) @ #-13
    [2] <>obj<>7 := @ToObject(<>obj<>6["prototype"]) @ #-14
    [3] <>func<>2 := <>obj<>7["toString"]

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> [4], ExitExc
    [0] <>new2<>8 := allocArray(0) @ #-15

  Call[4] -> ExitExc
    [0] call(<>func<>2, <>array<>1, <>new2<>8) @ #-16

  AfterCall[5] -> [7]

  AfterCatch[6] -> ExitExc

  Block[7] -> Exit, ExitExc
    [0] return(<>new1<>9)

  Exit[-2]

  ExitExc[-3]

}

function[-205] substr {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj1<>12 := @getLoc("ToString")
    [1] <>obj<>13 := @ToObject(<>obj1<>12) @ #-241
    [2] <>temp<>14 := this
    [3] <>arguments<>15 := allocArg(1) @ #-242
    [4] <>arguments<>15["0"] := <>temp<>14
    [5] <>this<> := enterCode(<>Global<>global)

  Call[1] -> ExitExc
    [0] call(<>obj<>13, <>this<>, <>arguments<>15) @ #-243

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5], ExitExc
    [0] <>result1<>3 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @ToInteger(<>start<>1)
    [2] <>result2<>4 := <>Global<>ignore2
    [3] <>new<>16 := @SameValue(<>length<>2, undefined)

  Block[5] -> [7], ExitExc
    [0] assert(<>new<>16)
    [1] <>result3<>5 := Infinity

  Block[6] -> [7], ExitExc
    [0] assert(! <>new<>16)
    [1] <>Global<>ignore4 := @ToInteger(<>length<>2)
    [2] <>result3<>5 := <>Global<>ignore4

  Block[7] -> [9], [8], ExitExc
    [0] <>obj<>17 := @ToObject(<>result1<>3) @ #-244
    [1] <>result4<>6 := <>obj<>17["length"]

  Block[8] -> [10], ExitExc
    [0] assert(<>result2<>4 >= 0)
    [1] <>result5<>7 := <>result2<>4

  Block[9] -> [11], ExitExc
    [0] assert(! <>result2<>4 >= 0)
    [1] <>obj<>18 := @ToObject(Math) @ #-245
    [2] <>temp<>19 := <>result4<>6 + <>result2<>4
    [3] <>temp<>20 := 0
    [4] <>arguments<>21 := allocArg(2) @ #-246
    [5] <>arguments<>21["0"] := <>temp<>19
    [6] <>arguments<>21["1"] := <>temp<>20
    [7] <>fun<>22 := @ToObject(<>obj<>18["max"]) @ #-247
    [8] <>this<> := enterCode(<>obj<>18)

  Block[10] -> [15], ExitExc
    [0] <>obj<>23 := @ToObject(Math) @ #-249
    [1] <>obj<>24 := @ToObject(Math) @ #-2410
    [2] <>temp<>25 := <>result3<>5
    [3] <>temp<>26 := 0
    [4] <>arguments<>27 := allocArg(2) @ #-2411
    [5] <>arguments<>27["0"] := <>temp<>25
    [6] <>arguments<>27["1"] := <>temp<>26
    [7] <>fun<>28 := @ToObject(<>obj<>24["max"]) @ #-2412
    [8] <>this<> := enterCode(<>obj<>24)

  Call[11] -> ExitExc
    [0] call(<>fun<>22, <>this<>, <>arguments<>21) @ #-248

  AfterCall[12] -> [14]

  AfterCatch[13] -> ExitExc

  Block[14] -> [10], ExitExc
    [0] <>result5<>7 := <>Global<>ignore7

  Call[15] -> ExitExc
    [0] call(<>fun<>28, <>this<>, <>arguments<>27) @ #-2413

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> [19], ExitExc
    [0] <>temp<>30 := <>result4<>6 - <>result5<>7
    [1] <>arguments<>31 := allocArg(2) @ #-2414
    [2] <>arguments<>31["0"] := <>temp<>29
    [3] <>arguments<>31["1"] := <>temp<>30
    [4] <>fun<>32 := @ToObject(<>obj<>23["min"]) @ #-2415
    [5] <>this<> := enterCode(<>obj<>23)

  Call[19] -> ExitExc
    [0] call(<>fun<>32, <>this<>, <>arguments<>31) @ #-2416

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23], ExitExc
    [0] <>result6<>8 := <>Global<>ignore8

  Block[23] -> Exit, ExitExc
    [0] assert(<>result6<>8 <= 0)
    [1] return("")

  Block[24] -> [26], ExitExc
    [0] assert(! <>result6<>8 <= 0)
    [1] <>Str<>9 := ""
    [2] <>i<>10 := <>result5<>7

  Block[25] -> Exit

  LoopHead[26] -> [28], [27]

  Block[27] -> [29], ExitExc
    [0] assert(<>i<>10 < <>result6<>8)
    [1] <>y<>33 := <>Str<>9
    [2] <>obj<>34 := @ToObject(<>result1<>3) @ #-2417
    [3] <>Str<>9 := <>y<>33 + <>obj<>34[<>i<>10]

  Block[28] -> [30], ExitExc
    [0] assert(! <>i<>10 < <>result6<>8)

  LCont[29] -> [26], ExitExc
    [0] <>old<>35 := <>i<>10
    [1] <>new<>36 := @ToNumber(<>old<>35)
    [2] <>i<>10 := <>new<>36 + 1
    [3] <>Global<>ignore12 := <>new<>36

  LBreak[30] -> Exit, ExitExc
    [0] return(<>Str<>9)

  Exit[-2]

  ExitExc[-3]

}

function[-204] fromCharCode {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-203] String {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>3 := @ToObject(<>arguments<>2) @ #-221

  Block[1] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] === 0)
    [1] <>new1<>4 := @StrObj("") @ #-222
    [2] return(<>new1<>4)

  Block[2] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] !== 0)
    [1] <>new1<>5 := @StrObj(<>value<>1) @ #-223
    [2] return(<>new1<>5)

  Block[3] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-202] String {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>3 := @ToObject(<>arguments<>2) @ #-211

  Block[1] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] === 0)
    [1] return("")

  Block[2] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] !== 0)
    [1] <>new1<>4 := @ToString(<>value<>1)
    [2] return(<>new1<>4)

  Block[3] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-201] trim {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>3 := @SameValue(undefined, this)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>3)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>3)

  Block[3] -> [5], [4]
    [0] <>new2<>4 := @SameValue(null, this)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>4)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>4)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>5 := @ToObject(TypeError) @ #-201
    [1] <>arguments<>6 := allocArg(0) @ #-202
    [2] <>proto<>7 := <>fun<>5["prototype"]
    [3] <>obj<>8 := alloc(<>proto<>7) @ #-203

  Call[8] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-204

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[14] -> ExitExc
    [0] throw(<>new1<>11)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>12 := @getLoc("ToString")
    [1] <>obj<>13 := @ToObject(<>obj1<>12) @ #-205
    [2] <>temp<>14 := this
    [3] <>arguments<>15 := allocArg(1) @ #-206
    [4] <>arguments<>15["0"] := <>temp<>14
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>13, <>this<>, <>arguments<>15) @ #-207

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>S<>1 := <>Global<>ignore1
    [1] <>new1<>16 := @trim(<>S<>1)
    [2] return(<>new1<>16)

  Exit[-2]

  ExitExc[-3]

}

function[-200] toLocaleUpperCase {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>3 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>3)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>3)

  Block[3] -> [5], [4]
    [0] <>new2<>4 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>4)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>4)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>5 := @ToObject(TypeError) @ #-191
    [1] <>arguments<>6 := allocArg(0) @ #-192
    [2] <>proto<>7 := <>fun<>5["prototype"]
    [3] <>obj<>8 := alloc(<>proto<>7) @ #-193

  Call[8] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-194

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[14] -> ExitExc
    [0] throw(<>new1<>11)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>12 := @getLoc("ToString")
    [1] <>obj<>13 := @ToObject(<>obj1<>12) @ #-195
    [2] <>temp<>14 := this
    [3] <>arguments<>15 := allocArg(1) @ #-196
    [4] <>arguments<>15["0"] := <>temp<>14
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>13, <>this<>, <>arguments<>15) @ #-197

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>S<>1 := <>Global<>ignore1
    [1] <>new1<>16 := @toUpperCase(<>S<>1)
    [2] return(<>new1<>16)

  Exit[-2]

  ExitExc[-3]

}

function[-199] toUpperCase {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>3 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>3)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>3)

  Block[3] -> [5], [4]
    [0] <>new2<>4 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>4)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>4)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>5 := @ToObject(TypeError) @ #-181
    [1] <>arguments<>6 := allocArg(0) @ #-182
    [2] <>proto<>7 := <>fun<>5["prototype"]
    [3] <>obj<>8 := alloc(<>proto<>7) @ #-183

  Call[8] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-184

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[14] -> ExitExc
    [0] throw(<>new1<>11)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>12 := @getLoc("ToString")
    [1] <>obj<>13 := @ToObject(<>obj1<>12) @ #-185
    [2] <>temp<>14 := this
    [3] <>arguments<>15 := allocArg(1) @ #-186
    [4] <>arguments<>15["0"] := <>temp<>14
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>13, <>this<>, <>arguments<>15) @ #-187

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>S<>1 := <>Global<>ignore1
    [1] <>new1<>16 := @toUpperCase(<>S<>1)
    [2] return(<>new1<>16)

  Exit[-2]

  ExitExc[-3]

}

function[-198] toLocaleLowerCase {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>3 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>3)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>3)

  Block[3] -> [5], [4]
    [0] <>new2<>4 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>4)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>4)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>5 := @ToObject(TypeError) @ #-171
    [1] <>arguments<>6 := allocArg(0) @ #-172
    [2] <>proto<>7 := <>fun<>5["prototype"]
    [3] <>obj<>8 := alloc(<>proto<>7) @ #-173

  Call[8] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-174

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[14] -> ExitExc
    [0] throw(<>new1<>11)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>12 := @getLoc("ToString")
    [1] <>obj<>13 := @ToObject(<>obj1<>12) @ #-175
    [2] <>temp<>14 := this
    [3] <>arguments<>15 := allocArg(1) @ #-176
    [4] <>arguments<>15["0"] := <>temp<>14
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>13, <>this<>, <>arguments<>15) @ #-177

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>S<>1 := <>Global<>ignore1
    [1] <>new1<>16 := @toLowerCase(<>S<>1)
    [2] return(<>new1<>16)

  Exit[-2]

  ExitExc[-3]

}

function[-197] toLowerCase {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>3 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>3)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>3)

  Block[3] -> [5], [4]
    [0] <>new2<>4 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>4)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>4)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>5 := @ToObject(TypeError) @ #-161
    [1] <>arguments<>6 := allocArg(0) @ #-162
    [2] <>proto<>7 := <>fun<>5["prototype"]
    [3] <>obj<>8 := alloc(<>proto<>7) @ #-163

  Call[8] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-164

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[14] -> ExitExc
    [0] throw(<>new1<>11)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>12 := @getLoc("ToString")
    [1] <>obj<>13 := @ToObject(<>obj1<>12) @ #-165
    [2] <>temp<>14 := this
    [3] <>arguments<>15 := allocArg(1) @ #-166
    [4] <>arguments<>15["0"] := <>temp<>14
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>13, <>this<>, <>arguments<>15) @ #-167

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>S<>1 := <>Global<>ignore1
    [1] <>new1<>16 := @toLowerCase(<>S<>1)
    [2] return(<>new1<>16)

  Exit[-2]

  ExitExc[-3]

}

function[-196] substring {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>12 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>12)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>12)

  Block[3] -> [5], [4]
    [0] <>new2<>13 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>13)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>13)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>14 := @ToObject(TypeError) @ #-151
    [1] <>arguments<>15 := allocArg(0) @ #-152
    [2] <>proto<>16 := <>fun<>14["prototype"]
    [3] <>obj<>17 := alloc(<>proto<>16) @ #-153

  Call[8] -> ExitExc
    [0] construct(<>fun<>14, <>obj<>17, <>arguments<>15) @ #-154

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>19 := @isObject(<>newObj<>18)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>19)
    [1] <>new1<>20 := <>newObj<>18

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>19)
    [1] <>new1<>20 := <>obj<>17

  Block[14] -> ExitExc
    [0] throw(<>new1<>20)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>21 := @getLoc("ToString")
    [1] <>obj<>22 := @ToObject(<>obj1<>21) @ #-155
    [2] <>temp<>23 := this
    [3] <>arguments<>24 := allocArg(1) @ #-156
    [4] <>arguments<>24["0"] := <>temp<>23
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>22, <>this<>, <>arguments<>24) @ #-157

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [21], [20], ExitExc
    [0] <>S<>3 := <>Global<>ignore1
    [1] <>obj<>25 := @ToObject(<>S<>3) @ #-158
    [2] <>len<>4 := <>obj<>25["length"]
    [3] <>Global<>ignore3 := @ToInteger(<>start<>1)
    [4] <>intStart<>5 := <>Global<>ignore3
    [5] <>new<>26 := @SameValue(<>end<>2, undefined)

  Block[20] -> [22], ExitExc
    [0] assert(<>new<>26)
    [1] <>intEnd<>6 := <>len<>4

  Block[21] -> [22], ExitExc
    [0] assert(! <>new<>26)
    [1] <>Global<>ignore5 := @ToInteger(<>end<>2)
    [2] <>intEnd<>6 := <>Global<>ignore5

  Block[22] -> [23], ExitExc
    [0] <>obj<>27 := @ToObject(Math) @ #-159
    [1] <>obj<>28 := @ToObject(Math) @ #-1510
    [2] <>temp<>29 := <>intStart<>5
    [3] <>temp<>30 := 0
    [4] <>arguments<>31 := allocArg(2) @ #-1511
    [5] <>arguments<>31["0"] := <>temp<>29
    [6] <>arguments<>31["1"] := <>temp<>30
    [7] <>fun<>32 := @ToObject(<>obj<>28["max"]) @ #-1512
    [8] <>this<> := enterCode(<>obj<>28)

  Call[23] -> ExitExc
    [0] call(<>fun<>32, <>this<>, <>arguments<>31) @ #-1513

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [27], ExitExc
    [0] <>temp<>34 := <>len<>4
    [1] <>arguments<>35 := allocArg(2) @ #-1514
    [2] <>arguments<>35["0"] := <>temp<>33
    [3] <>arguments<>35["1"] := <>temp<>34
    [4] <>fun<>36 := @ToObject(<>obj<>27["min"]) @ #-1515
    [5] <>this<> := enterCode(<>obj<>27)

  Call[27] -> ExitExc
    [0] call(<>fun<>36, <>this<>, <>arguments<>35) @ #-1516

  AfterCall[28] -> [30]

  AfterCatch[29] -> ExitExc

  Block[30] -> [31], ExitExc
    [0] <>finalStart<>7 := <>Global<>ignore6
    [1] <>obj<>37 := @ToObject(Math) @ #-1517
    [2] <>obj<>38 := @ToObject(Math) @ #-1518
    [3] <>temp<>39 := <>intEnd<>6
    [4] <>temp<>40 := 0
    [5] <>arguments<>41 := allocArg(2) @ #-1519
    [6] <>arguments<>41["0"] := <>temp<>39
    [7] <>arguments<>41["1"] := <>temp<>40
    [8] <>fun<>42 := @ToObject(<>obj<>38["max"]) @ #-1520
    [9] <>this<> := enterCode(<>obj<>38)

  Call[31] -> ExitExc
    [0] call(<>fun<>42, <>this<>, <>arguments<>41) @ #-1521

  AfterCall[32] -> [34]

  AfterCatch[33] -> ExitExc

  Block[34] -> [35], ExitExc
    [0] <>temp<>44 := <>len<>4
    [1] <>arguments<>45 := allocArg(2) @ #-1522
    [2] <>arguments<>45["0"] := <>temp<>43
    [3] <>arguments<>45["1"] := <>temp<>44
    [4] <>fun<>46 := @ToObject(<>obj<>37["min"]) @ #-1523
    [5] <>this<> := enterCode(<>obj<>37)

  Call[35] -> ExitExc
    [0] call(<>fun<>46, <>this<>, <>arguments<>45) @ #-1524

  AfterCall[36] -> [38]

  AfterCatch[37] -> ExitExc

  Block[38] -> [39], ExitExc
    [0] <>finalEnd<>8 := <>Global<>ignore7
    [1] <>obj<>47 := @ToObject(Math) @ #-1525
    [2] <>temp<>48 := <>finalStart<>7
    [3] <>temp<>49 := <>finalEnd<>8
    [4] <>arguments<>50 := allocArg(2) @ #-1526
    [5] <>arguments<>50["0"] := <>temp<>48
    [6] <>arguments<>50["1"] := <>temp<>49
    [7] <>fun<>51 := @ToObject(<>obj<>47["min"]) @ #-1527
    [8] <>this<> := enterCode(<>obj<>47)

  Call[39] -> ExitExc
    [0] call(<>fun<>51, <>this<>, <>arguments<>50) @ #-1528

  AfterCall[40] -> [42]

  AfterCatch[41] -> ExitExc

  Block[42] -> [43], ExitExc
    [0] <>from<>9 := <>Global<>ignore8
    [1] <>obj<>52 := @ToObject(Math) @ #-1529
    [2] <>temp<>53 := <>finalStart<>7
    [3] <>temp<>54 := <>finalEnd<>8
    [4] <>arguments<>55 := allocArg(2) @ #-1530
    [5] <>arguments<>55["0"] := <>temp<>53
    [6] <>arguments<>55["1"] := <>temp<>54
    [7] <>fun<>56 := @ToObject(<>obj<>52["max"]) @ #-1531
    [8] <>this<> := enterCode(<>obj<>52)

  Call[43] -> ExitExc
    [0] call(<>fun<>56, <>this<>, <>arguments<>55) @ #-1532

  AfterCall[44] -> [46]

  AfterCatch[45] -> ExitExc

  Block[46] -> Exit, ExitExc
    [0] <>to<>10 := <>Global<>ignore9
    [1] <>new1<>57 := @substring(<>S<>3, <>from<>9, <>to<>10)
    [2] return(<>new1<>57)

  Exit[-2]

  ExitExc[-3]

}

function[-195] split {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj1<>7 := @getLoc("ToString")
    [1] <>obj<>8 := @ToObject(<>obj1<>7) @ #-141
    [2] <>temp<>9 := this
    [3] <>arguments<>10 := allocArg(1) @ #-142
    [4] <>arguments<>10["0"] := <>temp<>9
    [5] <>this<> := enterCode(<>Global<>global)

  Call[1] -> ExitExc
    [0] call(<>obj<>8, <>this<>, <>arguments<>10) @ #-143

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] <>str<>3 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @ToString(<>separator<>1)
    [2] <>sep<>4 := <>Global<>ignore2
    [3] <>Global<>ignore3 := @ToUint32(<>limit<>2)
    [4] <>lim<>5 := <>Global<>ignore3
    [5] <>new1<>11 := @split(<>str<>3, <>sep<>4, <>lim<>5) @ #-144
    [6] return(<>new1<>11)

  Exit[-2]

  ExitExc[-3]

}

function[-194] slice {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>13 := @SameValue(undefined, this)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>13)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>13)

  Block[3] -> [5], [4]
    [0] <>new2<>14 := @SameValue(null, this)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>14)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>14)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>15 := @ToObject(TypeError) @ #-131
    [1] <>arguments<>16 := allocArg(0) @ #-132
    [2] <>proto<>17 := <>fun<>15["prototype"]
    [3] <>obj<>18 := alloc(<>proto<>17) @ #-133

  Call[8] -> ExitExc
    [0] construct(<>fun<>15, <>obj<>18, <>arguments<>16) @ #-134

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>20 := @isObject(<>newObj<>19)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>20)
    [1] <>new1<>21 := <>newObj<>19

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>20)
    [1] <>new1<>21 := <>obj<>18

  Block[14] -> ExitExc
    [0] throw(<>new1<>21)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>22 := @getLoc("ToString")
    [1] <>obj<>23 := @ToObject(<>obj1<>22) @ #-135
    [2] <>temp<>24 := this
    [3] <>arguments<>25 := allocArg(1) @ #-136
    [4] <>arguments<>25["0"] := <>temp<>24
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>23, <>this<>, <>arguments<>25) @ #-137

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [21], [20], ExitExc
    [0] <>S<>3 := <>Global<>ignore1
    [1] <>obj<>26 := @ToObject(<>S<>3) @ #-138
    [2] <>len<>4 := <>obj<>26["length"]
    [3] <>Global<>ignore3 := @ToInteger(<>start<>1)
    [4] <>intStart<>5 := <>Global<>ignore3
    [5] <>new<>27 := @SameValue(<>end<>2, undefined)

  Block[20] -> [22], ExitExc
    [0] assert(<>new<>27)
    [1] <>intEnd<>6 := <>len<>4

  Block[21] -> [22], ExitExc
    [0] assert(! <>new<>27)
    [1] <>Global<>ignore5 := @ToInteger(<>end<>2)
    [2] <>intEnd<>6 := <>Global<>ignore5

  Block[22] -> [24], [23]

  Block[23] -> [25], ExitExc
    [0] assert(<>intStart<>5 < 0)
    [1] <>Global<>ignore6 := @max2(<>len<>4 + <>intStart<>5, 0)
    [2] <>from<>7 := <>Global<>ignore6

  Block[24] -> [25], ExitExc
    [0] assert(! <>intStart<>5 < 0)
    [1] <>Global<>ignore7 := @min2(<>intStart<>5, <>len<>4)
    [2] <>from<>7 := <>Global<>ignore7

  Block[25] -> [27], [26]

  Block[26] -> [28], ExitExc
    [0] assert(<>intEnd<>6 < 0)
    [1] <>Global<>ignore8 := @max2(<>len<>4 + <>intEnd<>6, 0)
    [2] <>to<>8 := <>Global<>ignore8

  Block[27] -> [28], ExitExc
    [0] assert(! <>intEnd<>6 < 0)
    [1] <>Global<>ignore9 := @min2(<>intEnd<>6, <>len<>4)
    [2] <>to<>8 := <>Global<>ignore9

  Block[28] -> [29], ExitExc
    [0] <>Global<>ignore10 := @max2(<>to<>8 - <>from<>7, 0)
    [1] <>span<>9 := <>Global<>ignore10
    [2] <>Str<>10 := ""
    [3] <>i<>11 := 0

  LoopHead[29] -> [31], [30]

  Block[30] -> [32], ExitExc
    [0] assert(<>i<>11 < <>span<>9)
    [1] <>y<>28 := <>Str<>10
    [2] <>obj<>29 := @ToObject(<>S<>3) @ #-139
    [3] <>Str<>10 := <>y<>28 + <>obj<>29[<>from<>7 + <>i<>11]

  Block[31] -> [33], ExitExc
    [0] assert(! <>i<>11 < <>span<>9)

  LCont[32] -> [29], ExitExc
    [0] <>old<>30 := <>i<>11
    [1] <>new<>31 := @ToNumber(<>old<>30)
    [2] <>i<>11 := <>new<>31 + 1
    [3] <>Global<>ignore14 := <>new<>31

  LBreak[33] -> Exit, ExitExc
    [0] return(<>Str<>10)

  Exit[-2]

  ExitExc[-3]

}

function[-193] search {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("String.prototype.search")

  Exit[-2]

  ExitExc[-3]

}

function[-192] replace {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("String.prototype.replace")

  Exit[-2]

  ExitExc[-3]

}

function[-191] match {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("String.prototype.match")

  Exit[-2]

  ExitExc[-3]

}

function[-190] localeCompare {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-189] lastIndexOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>10 := @SameValue(undefined, this)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>10)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>10)

  Block[3] -> [5], [4]
    [0] <>new2<>11 := @SameValue(null, this)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>11)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>11)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>12 := @ToObject(TypeError) @ #-81
    [1] <>arguments<>13 := allocArg(0) @ #-82
    [2] <>proto<>14 := <>fun<>12["prototype"]
    [3] <>obj<>15 := alloc(<>proto<>14) @ #-83

  Call[8] -> ExitExc
    [0] construct(<>fun<>12, <>obj<>15, <>arguments<>13) @ #-84

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>17 := @isObject(<>newObj<>16)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>17)
    [1] <>new1<>18 := <>newObj<>16

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>17)
    [1] <>new1<>18 := <>obj<>15

  Block[14] -> ExitExc
    [0] throw(<>new1<>18)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>19 := @getLoc("ToString")
    [1] <>obj<>20 := @ToObject(<>obj1<>19) @ #-85
    [2] <>temp<>21 := this
    [3] <>arguments<>22 := allocArg(1) @ #-86
    [4] <>arguments<>22["0"] := <>temp<>21
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>20, <>this<>, <>arguments<>22) @ #-87

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [21], [20], ExitExc
    [0] <>S<>3 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @ToString(<>searchString<>1)
    [2] <>searchStr<>4 := <>Global<>ignore2
    [3] <>Global<>ignore3 := @ToNumber(<>position<>2)
    [4] <>numPos<>5 := <>Global<>ignore3
    [5] <>new<>23 := @SameValue(NaN, <>numPos<>5)

  Block[20] -> [22], ExitExc
    [0] assert(<>new<>23)
    [1] <>pos<>6 := Infinity

  Block[21] -> [22], ExitExc
    [0] assert(! <>new<>23)
    [1] <>Global<>ignore5 := @ToInteger(<>numPos<>5)
    [2] <>pos<>6 := <>Global<>ignore5

  Block[22] -> [23], ExitExc
    [0] <>obj<>24 := @ToObject(<>S<>3) @ #-88
    [1] <>len<>7 := <>obj<>24["length"]
    [2] <>obj<>25 := @ToObject(Math) @ #-89
    [3] <>obj<>26 := @ToObject(Math) @ #-810
    [4] <>temp<>27 := <>pos<>6
    [5] <>temp<>28 := 0
    [6] <>arguments<>29 := allocArg(2) @ #-811
    [7] <>arguments<>29["0"] := <>temp<>27
    [8] <>arguments<>29["1"] := <>temp<>28
    [9] <>fun<>30 := @ToObject(<>obj<>26["max"]) @ #-812
    [10] <>this<> := enterCode(<>obj<>26)

  Call[23] -> ExitExc
    [0] call(<>fun<>30, <>this<>, <>arguments<>29) @ #-813

  AfterCall[24] -> [26]

  AfterCatch[25] -> ExitExc

  Block[26] -> [27], ExitExc
    [0] <>temp<>32 := <>len<>7
    [1] <>arguments<>33 := allocArg(2) @ #-814
    [2] <>arguments<>33["0"] := <>temp<>31
    [3] <>arguments<>33["1"] := <>temp<>32
    [4] <>fun<>34 := @ToObject(<>obj<>25["min"]) @ #-815
    [5] <>this<> := enterCode(<>obj<>25)

  Call[27] -> ExitExc
    [0] call(<>fun<>34, <>this<>, <>arguments<>33) @ #-816

  AfterCall[28] -> [30]

  AfterCatch[29] -> ExitExc

  Block[30] -> Exit, ExitExc
    [0] <>start<>8 := <>Global<>ignore7
    [1] <>new1<>35 := @lastIndexOf(<>S<>3, <>searchStr<>4, <>start<>8)
    [2] return(<>new1<>35)

  Exit[-2]

  ExitExc[-3]

}

function[-188] indexOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>7 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>7)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>7)

  Block[3] -> [5], [4]
    [0] <>new2<>8 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>8)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>8)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>9 := @ToObject(TypeError) @ #-71
    [1] <>arguments<>10 := allocArg(0) @ #-72
    [2] <>proto<>11 := <>fun<>9["prototype"]
    [3] <>obj<>12 := alloc(<>proto<>11) @ #-73

  Call[8] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-74

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[14] -> ExitExc
    [0] throw(<>new1<>15)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>16 := @getLoc("ToString")
    [1] <>obj<>17 := @ToObject(<>obj1<>16) @ #-75
    [2] <>temp<>18 := this
    [3] <>arguments<>19 := allocArg(1) @ #-76
    [4] <>arguments<>19["0"] := <>temp<>18
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>17, <>this<>, <>arguments<>19) @ #-77

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] <>S<>3 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @ToString(<>searchString<>1)
    [2] <>searchStr<>4 := <>Global<>ignore2
    [3] <>Global<>ignore3 := @ToInteger(<>position<>2)
    [4] <>pos<>5 := <>Global<>ignore3
    [5] <>new1<>20 := @indexOf(<>S<>3, <>searchStr<>4, <>pos<>5)
    [6] return(<>new1<>20)

  Exit[-2]

  ExitExc[-3]

}

function[-187] concat {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>7 := @SameValue(this, undefined)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>7)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>7)

  Block[3] -> [5], [4]
    [0] <>new2<>8 := @SameValue(this, null)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>8)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>8)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>9 := @ToObject(TypeError) @ #-61
    [1] <>arguments<>10 := allocArg(0) @ #-62
    [2] <>proto<>11 := <>fun<>9["prototype"]
    [3] <>obj<>12 := alloc(<>proto<>11) @ #-63

  Call[8] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-64

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[14] -> ExitExc
    [0] throw(<>new1<>15)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>16 := @getLoc("ToString")
    [1] <>obj<>17 := @ToObject(<>obj1<>16) @ #-65
    [2] <>temp<>18 := this
    [3] <>arguments<>19 := allocArg(1) @ #-66
    [4] <>arguments<>19["0"] := <>temp<>18
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>17, <>this<>, <>arguments<>19) @ #-67

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [20], ExitExc
    [0] <>S<>1 := <>Global<>ignore1
    [1] <>args<>2 := <>arguments<>6
    [2] <>R<>3 := <>S<>1
    [3] <>i<>4 := 0
    [4] <>y<>20 := <>i<>4
    [5] <>obj<>21 := @ToObject(<>args<>2) @ #-68

  LoopHead[20] -> [22], [21]

  Block[21] -> [23], ExitExc
    [0] assert(<>y<>20 < <>obj<>21["length"])
    [1] <>obj<>22 := @ToObject(<>args<>2) @ #-69
    [2] <>next<>5 := <>obj<>22[<>i<>4]
    [3] <>y<>23 := <>R<>3
    [4] <>z<>24 := @ToString(<>next<>5)
    [5] <>R<>3 := <>y<>23 + <>z<>24

  Block[22] -> [24], ExitExc
    [0] assert(! <>y<>20 < <>obj<>21["length"])

  LCont[23] -> [20], ExitExc
    [0] <>old<>25 := <>i<>4
    [1] <>new<>26 := @ToNumber(<>old<>25)
    [2] <>i<>4 := <>new<>26 + 1
    [3] <>Global<>ignore6 := <>new<>26
    [4] <>y<>20 := <>i<>4
    [5] <>obj<>21 := @ToObject(<>args<>2) @ #-610

  LBreak[24] -> Exit, ExitExc
    [0] return(<>R<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-186] charCodeAt {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>6 := @SameValue(undefined, this)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>6)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>6)

  Block[3] -> [5], [4]
    [0] <>new2<>7 := @SameValue(null, this)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>7)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>7)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>8 := @ToObject(TypeError) @ #-51
    [1] <>arguments<>9 := allocArg(0) @ #-52
    [2] <>proto<>10 := <>fun<>8["prototype"]
    [3] <>obj<>11 := alloc(<>proto<>10) @ #-53

  Call[8] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>11, <>arguments<>9) @ #-54

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>13 := @isObject(<>newObj<>12)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>13)
    [1] <>new1<>14 := <>newObj<>12

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>13)
    [1] <>new1<>14 := <>obj<>11

  Block[14] -> ExitExc
    [0] throw(<>new1<>14)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>15 := @getLoc("ToString")
    [1] <>obj<>16 := @ToObject(<>obj1<>15) @ #-55
    [2] <>temp<>17 := this
    [3] <>arguments<>18 := allocArg(1) @ #-56
    [4] <>arguments<>18["0"] := <>temp<>17
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>16, <>this<>, <>arguments<>18) @ #-57

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [21], [20], ExitExc
    [0] <>S<>2 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @ToInteger(<>pos<>1)
    [2] <>position<>3 := <>Global<>ignore2
    [3] <>obj<>19 := @ToObject(<>S<>2) @ #-58
    [4] <>size<>4 := <>obj<>19["length"]

  Block[20] -> [26], ExitExc
    [0] assert(<>position<>3 < 0)

  Block[21] -> [22], ExitExc
    [0] assert(! <>position<>3 < 0)

  Block[22] -> [24], [23]

  Block[23] -> [26], ExitExc
    [0] assert(<>position<>3 >= <>size<>4)

  Block[24] -> [25], ExitExc
    [0] assert(! <>position<>3 >= <>size<>4)

  Block[25] -> [27]

  Branch[26] -> Exit, ExitExc
    [0] return(NaN)

  Branch[27] -> Exit, ExitExc
    [0] <>obj<>20 := @ToObject(<>S<>2) @ #-59
    [1] <>new1<>21 := @CharCode(<>obj<>20[<>position<>3])
    [2] return(<>new1<>21)

  Exit[-2]

  ExitExc[-3]

}

function[-185] charAt {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new1<>6 := @SameValue(undefined, this)

  Block[1] -> [7], ExitExc
    [0] assert(<>new1<>6)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new1<>6)

  Block[3] -> [5], [4]
    [0] <>new2<>7 := @SameValue(null, this)

  Block[4] -> [7], ExitExc
    [0] assert(<>new2<>7)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new2<>7)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>8 := @ToObject(TypeError) @ #-41
    [1] <>arguments<>9 := allocArg(0) @ #-42
    [2] <>proto<>10 := <>fun<>8["prototype"]
    [3] <>obj<>11 := alloc(<>proto<>10) @ #-43

  Call[8] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>11, <>arguments<>9) @ #-44

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>13 := @isObject(<>newObj<>12)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>13)
    [1] <>new1<>14 := <>newObj<>12

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>13)
    [1] <>new1<>14 := <>obj<>11

  Block[14] -> ExitExc
    [0] throw(<>new1<>14)

  Branch[15] -> [16], ExitExc
    [0] <>obj1<>15 := @getLoc("ToString")
    [1] <>obj<>16 := @ToObject(<>obj1<>15) @ #-45
    [2] <>temp<>17 := this
    [3] <>arguments<>18 := allocArg(1) @ #-46
    [4] <>arguments<>18["0"] := <>temp<>17
    [5] <>this<> := enterCode(<>Global<>global)

  Call[16] -> ExitExc
    [0] call(<>obj<>16, <>this<>, <>arguments<>18) @ #-47

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> [21], [20], ExitExc
    [0] <>S<>2 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @ToInteger(<>pos<>1)
    [2] <>position<>3 := <>Global<>ignore2
    [3] <>obj<>19 := @ToObject(<>S<>2) @ #-48
    [4] <>size<>4 := <>obj<>19["length"]

  Block[20] -> [26], ExitExc
    [0] assert(<>position<>3 < 0)

  Block[21] -> [22], ExitExc
    [0] assert(! <>position<>3 < 0)

  Block[22] -> [24], [23]

  Block[23] -> [26], ExitExc
    [0] assert(<>position<>3 >= <>size<>4)

  Block[24] -> [25], ExitExc
    [0] assert(! <>position<>3 >= <>size<>4)

  Block[25] -> [27]

  Branch[26] -> Exit, ExitExc
    [0] return("")

  Branch[27] -> Exit, ExitExc
    [0] <>obj<>20 := @ToObject(<>S<>2) @ #-49
    [1] return(<>obj<>20[<>position<>3])

  Exit[-2]

  ExitExc[-3]

}

function[-184] valueOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(typeof this === "string")
    [1] return(this)

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof this !== "string")

  Block[3] -> Exit

  Block[4] -> [7], [6], ExitExc
    [0] assert(typeof this === "object")

  Block[5] -> [14], [13], ExitExc
    [0] assert(typeof this !== "object")

  Block[6] -> [8], ExitExc
    [0] assert(this !== null)
    [1] <>y<>2 := @Class(this)
    [2] <>new<>3 := <>y<>2 === "String"

  Block[7] -> [10], [9], ExitExc
    [0] assert(this === null)

  Block[8] -> [12]

  Block[9] -> [11], ExitExc
    [0] assert(typeof this !== null == "boolean")
    [1] <>new<>3 := false

  Block[10] -> [11], ExitExc
    [0] assert(typeof this !== null != "boolean")
    [1] <>new<>3 := this !== null

  Block[11] -> [8]

  Block[12] -> [17], [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof typeof this === "object" == "boolean")
    [1] <>new<>3 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof typeof this === "object" != "boolean")
    [1] <>new<>3 := typeof this === "object"

  Block[15] -> [12]

  Block[16] -> Exit, ExitExc
    [0] assert(<>new<>3)
    [1] <>new1<>4 := @PrimitiveValue(this)
    [2] return(<>new1<>4)

  Block[17] -> [19], ExitExc
    [0] assert(! <>new<>3)
    [1] <>fun<>5 := @ToObject(TypeError) @ #-31
    [2] <>arguments<>6 := allocArg(0) @ #-32
    [3] <>proto<>7 := <>fun<>5["prototype"]
    [4] <>obj<>8 := alloc(<>proto<>7) @ #-33

  Block[18] -> [3]

  Call[19] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-34

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[25] -> ExitExc
    [0] throw(<>new1<>11)

  Exit[-2]

  ExitExc[-3]

}

function[-183] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(typeof this === "string")
    [1] return(this)

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof this !== "string")

  Block[3] -> Exit

  Block[4] -> [7], [6], ExitExc
    [0] assert(typeof this === "object")

  Block[5] -> [14], [13], ExitExc
    [0] assert(typeof this !== "object")

  Block[6] -> [8], ExitExc
    [0] assert(this !== null)
    [1] <>y<>2 := @Class(this)
    [2] <>new<>3 := <>y<>2 === "String"

  Block[7] -> [10], [9], ExitExc
    [0] assert(this === null)

  Block[8] -> [12]

  Block[9] -> [11], ExitExc
    [0] assert(typeof this !== null == "boolean")
    [1] <>new<>3 := false

  Block[10] -> [11], ExitExc
    [0] assert(typeof this !== null != "boolean")
    [1] <>new<>3 := this !== null

  Block[11] -> [8]

  Block[12] -> [17], [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof typeof this === "object" == "boolean")
    [1] <>new<>3 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof typeof this === "object" != "boolean")
    [1] <>new<>3 := typeof this === "object"

  Block[15] -> [12]

  Block[16] -> Exit, ExitExc
    [0] assert(<>new<>3)
    [1] <>new1<>4 := @PrimitiveValue(this)
    [2] return(<>new1<>4)

  Block[17] -> [19], ExitExc
    [0] assert(! <>new<>3)
    [1] <>fun<>5 := @ToObject(TypeError) @ #-21
    [2] <>arguments<>6 := allocArg(0) @ #-22
    [3] <>proto<>7 := <>fun<>5["prototype"]
    [4] <>obj<>8 := alloc(<>proto<>7) @ #-23

  Block[18] -> [3]

  Call[19] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-24

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[25] -> ExitExc
    [0] throw(<>new1<>11)

  Exit[-2]

  ExitExc[-3]

}

function[-182] <>funexpr@1:1-2:4<> {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-181] error {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @Print("console.error: " + <>msg<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-180] HTMLIFrameElement {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLIFrameElement")

  Exit[-2]

  ExitExc[-3]

}

function[-179] HTMLBodyElement {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLBodyElement")

  Exit[-2]

  ExitExc[-3]

}

function[-178] NamedNodeMap {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("NamedNodeMap")

  Exit[-2]

  ExitExc[-3]

}

function[-177] HTMLDivElement {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLDivElement")

  Exit[-2]

  ExitExc[-3]

}

function[-176] requestAnimationFrame {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("requestAnimationFrame")

  Exit[-2]

  ExitExc[-3]

}

function[-175] createEvent {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("createEvent")

  Exit[-2]

  ExitExc[-3]

}

function[-174] clearTimeout {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("clearTimeout")

  Exit[-2]

  ExitExc[-3]

}

function[-173] setAttribute {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>obj<>4 := @ToObject(this) @ #-311
    [1] <>obj<>5 := @ToObject(<>obj<>4["attributes"]) @ #-312
    [2] <>obj<>5[<>prop<>1] := <>value<>2

  Exit[-2]

  ExitExc[-3]

}

function[-172] XMLHttpRequest {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("XMLHttpRequest")

  Exit[-2]

  ExitExc[-3]

}

function[-171] appendChild {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>3 := @ToObject(this) @ #-291
    [1] <>obj<>4 := @ToObject(<>obj<>3["childNodes"]) @ #-292
    [2] <>temp<>5 := <>elem<>1
    [3] <>arguments<>6 := allocArg(1) @ #-293
    [4] <>arguments<>6["0"] := <>temp<>5
    [5] <>fun<>7 := @ToObject(<>obj<>4["push"]) @ #-294
    [6] <>this<> := enterCode(<>obj<>4)

  Call[1] -> ExitExc
    [0] call(<>fun<>7, <>this<>, <>arguments<>6) @ #-295

  AfterCall[2] -> Exit

  AfterCatch[3] -> ExitExc

  Exit[-2]

  ExitExc[-3]

}

function[-170] createComment {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("createComment")

  Exit[-2]

  ExitExc[-3]

}

function[-169] removeChild {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("removeChild")

  Exit[-2]

  ExitExc[-3]

}

function[-168] getElementById {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("getElementById")

  Exit[-2]

  ExitExc[-3]

}

function[-167] getElementsByTagName {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("getElementsByTagName")

  Exit[-2]

  ExitExc[-3]

}

function[-166] getElementById {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("getElementById")

  Exit[-2]

  ExitExc[-3]

}

function[-165] insertBefore {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("insertBefore")

  Exit[-2]

  ExitExc[-3]

}

function[-164] NodeList {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("NodeList")

  Exit[-2]

  ExitExc[-3]

}

function[-163] NodeList {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("NodeList")

  Exit[-2]

  ExitExc[-3]

}

function[-162] HTMLHtmlElement {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLHtmlElement")

  Exit[-2]

  ExitExc[-3]

}

function[-161] getElementsByTagName {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("getElementsByTagName")

  Exit[-2]

  ExitExc[-3]

}

function[-160] HTMLElement {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLElement")

  Exit[-2]

  ExitExc[-3]

}

function[-159] setInterval {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("setInterval")

  Exit[-2]

  ExitExc[-3]

}

function[-158] writeln {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("writeln")

  Exit[-2]

  ExitExc[-3]

}

function[-157] setTimeout {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("setTimeout")

  Exit[-2]

  ExitExc[-3]

}

function[-156] replace {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("replace")

  Exit[-2]

  ExitExc[-3]

}

function[-155] write {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("write")

  Exit[-2]

  ExitExc[-3]

}

function[-154] createElement {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-121
    [1] <>attr<>2 := <>Global<>ignore1
    [2] <>obj<>5 := @ToObject(NamedNodeMap) @ #-122
    [3] <>Global<>ignore2 := @Prototype(<>elem<>3, <>obj<>5["prototype"])
    [4] <>Global<>ignore3 := alloc() @ #-123
    [5] <>elem<>3 := <>Global<>ignore3
    [6] <>obj<>6 := @ToObject(HTMLElement) @ #-124
    [7] <>Global<>ignore4 := @Prototype(<>elem<>3, <>obj<>6["prototype"])
    [8] <>obj<>7 := @ToObject(<>elem<>3) @ #-125
    [9] <>obj<>7["attributes"] := <>attr<>2
    [10] <>obj<>8 := @ToObject(<>elem<>3) @ #-126
    [11] <>obj<>8["ownerDocument"] := document
    [12] <>obj<>9 := @ToObject(<>elem<>3) @ #-127
    [13] <>Global<>ignore7 := allocArray(0) @ #-128
    [14] <>obj<>9["childNodes"] := <>Global<>ignore7
    [15] <>obj<>10 := @ToObject(<>elem<>3) @ #-129
    [16] <>obj<>10["nodeType"] := 1

  Block[1] -> Exit, ExitExc
    [0] assert(<>tag<>1 === "div")
    [1] <>obj<>11 := @ToObject(<>elem<>3) @ #-1210
    [2] <>obj<>11["tagName"] := "DIV"
    [3] return(<>elem<>3)

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>tag<>1 !== "div")

  Block[3] -> Exit, ExitExc
    [0] return(<>elem<>3)

  Block[4] -> Exit, ExitExc
    [0] assert(<>tag<>1 === "button")
    [1] <>obj<>12 := @ToObject(<>elem<>3) @ #-1211
    [2] <>obj<>12["tagName"] := "BUTTON"
    [3] return(<>elem<>3)

  Block[5] -> [8], [7], ExitExc
    [0] assert(<>tag<>1 !== "button")

  Block[6] -> [3]

  Block[7] -> Exit, ExitExc
    [0] assert(<>tag<>1 === "li")
    [1] <>obj<>13 := @ToObject(<>elem<>3) @ #-1212
    [2] <>obj<>13["tagName"] := "LI"
    [3] return(<>elem<>3)

  Block[8] -> [11], [10], ExitExc
    [0] assert(<>tag<>1 !== "li")

  Block[9] -> [6]

  Block[10] -> Exit, ExitExc
    [0] assert(<>tag<>1 === "ol")
    [1] <>obj<>14 := @ToObject(<>elem<>3) @ #-1213
    [2] <>obj<>14["tagName"] := "OL"
    [3] return(<>elem<>3)

  Block[11] -> [12], ExitExc
    [0] assert(<>tag<>1 !== "ol")
    [1] <>Global<>ignore13 := @NotYetImplemented("createElement: tag = " + <>tag<>1)

  Block[12] -> [9]

  Exit[-2]

  ExitExc[-3]

}

function[-153] Document {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Document")

  Exit[-2]

  ExitExc[-3]

}

function[-152] Document {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Document")

  Exit[-2]

  ExitExc[-3]

}

function[-151] HTMLDocument {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLDocument")

  Exit[-2]

  ExitExc[-3]

}

function[-150] HTMLDocument {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("HTMLDocument")

  Exit[-2]

  ExitExc[-3]

}

function[-149] addEventListener {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-71
    [1] <>evt<>3 := <>Global<>ignore1
    [2] <>obj<>5 := @ToObject(<>evt<>3) @ #-72
    [3] <>obj<>5["type"] := <>type<>1
    [4] <>obj<>6 := @ToObject(<>evt<>3) @ #-73
    [5] <>obj<>6["func"] := <>func<>2
    [6] <>obj<>7 := @ToObject(<>evt<>3) @ #-74
    [7] <>obj<>7["elem"] := this
    [8] <>Global<>ignore5 := @addEventFunc(<>evt<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-148] EventTarget {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("EventTarget")

  Exit[-2]

  ExitExc[-3]

}

function[-147] EventTarget {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("EventTarget")

  Exit[-2]

  ExitExc[-3]

}

function[-146] Node {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Node")

  Exit[-2]

  ExitExc[-3]

}

function[-145] Node {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Node")

  Exit[-2]

  ExitExc[-3]

}

function[-144] Element {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Element")

  Exit[-2]

  ExitExc[-3]

}

function[-143] Element {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Element")

  Exit[-2]

  ExitExc[-3]

}

function[-142] ToNumber {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj1<>3 := @getLoc("ToPrimitive")
    [1] <>obj<>4 := @ToObject(<>obj1<>3) @ #-1421
    [2] <>temp<>5 := <>v<>1
    [3] <>temp<>6 := "number"
    [4] <>arguments<>7 := allocArg(2) @ #-1422
    [5] <>arguments<>7["0"] := <>temp<>5
    [6] <>arguments<>7["1"] := <>temp<>6
    [7] <>this<> := enterCode(<>Global<>global)

  Call[1] -> ExitExc
    [0] call(<>obj<>4, <>this<>, <>arguments<>7) @ #-1423

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] <>new1<>9 := @ToNumber(<>new0<>8)
    [1] return(<>new1<>9)

  Exit[-2]

  ExitExc[-3]

}

function[-141] ToString {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj1<>3 := @getLoc("ToPrimitive")
    [1] <>obj<>4 := @ToObject(<>obj1<>3) @ #-1411
    [2] <>temp<>5 := <>v<>1
    [3] <>temp<>6 := "String"
    [4] <>arguments<>7 := allocArg(2) @ #-1412
    [5] <>arguments<>7["0"] := <>temp<>5
    [6] <>arguments<>7["1"] := <>temp<>6
    [7] <>this<> := enterCode(<>Global<>global)

  Call[1] -> ExitExc
    [0] call(<>obj<>4, <>this<>, <>arguments<>7) @ #-1413

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> Exit, ExitExc
    [0] <>new1<>9 := @ToString(<>new0<>8)
    [1] return(<>new1<>9)

  Exit[-2]

  ExitExc[-3]

}

function[-140] ToPrimitive {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>new<>4 := @isObject(<>v<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>new<>4)
    [1] <>obj1<>5 := @getLoc("DefaultValue")
    [2] <>obj<>6 := @ToObject(<>obj1<>5) @ #-1401
    [3] <>temp<>7 := <>v<>1
    [4] <>temp<>8 := <>hint<>2
    [5] <>arguments<>9 := allocArg(2) @ #-1402
    [6] <>arguments<>9["0"] := <>temp<>7
    [7] <>arguments<>9["1"] := <>temp<>8
    [8] <>this<> := enterCode(<>Global<>global)

  Block[2] -> Exit, ExitExc
    [0] assert(! <>new<>4)
    [1] return(<>v<>1)

  Call[3] -> ExitExc
    [0] call(<>obj<>6, <>this<>, <>arguments<>9) @ #-1403

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> Exit, ExitExc
    [0] return(<>new1<>10)

  Block[7] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-139] DefaultValue {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [4], [3], ExitExc
    [0] assert(<>hint<>2 === "String")
    [1] <>obj<>5 := @ToObject(<>v<>1) @ #-1391
    [2] <>new<>6 := @IsCallable(<>obj<>5["toString"])

  Block[2] -> [23], ExitExc
    [0] assert(<>hint<>2 !== "String")

  Block[3] -> [5], ExitExc
    [0] assert(<>new<>6)
    [1] <>obj<>7 := @ToObject(<>v<>1) @ #-1392
    [2] <>new2<>8 := allocArray(0) @ #-1393

  Block[4] -> [12], ExitExc
    [0] assert(! <>new<>6)

  Call[5] -> ExitExc
    [0] call(<>obj<>7["toString"], <>v<>1, <>new2<>8) @ #-1394

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [10], [9], ExitExc
    [0] <>result<>3 := <>Global<>ignore1
    [1] <>y<>9 := @isObject(<>result<>3)

  Block[9] -> Exit, ExitExc
    [0] assert(! <>y<>9)
    [1] return(<>result<>3)

  Block[10] -> [11], ExitExc
    [0] assert(! ! <>y<>9)

  Block[11] -> [12]

  Block[12] -> [14], [13], ExitExc
    [0] <>obj<>10 := @ToObject(<>v<>1) @ #-1395
    [1] <>new<>11 := @IsCallable(<>obj<>10["valueOf"])

  Block[13] -> [15], ExitExc
    [0] assert(<>new<>11)
    [1] <>obj<>12 := @ToObject(<>v<>1) @ #-1396
    [2] <>new2<>13 := allocArray(0) @ #-1397

  Block[14] -> [22], ExitExc
    [0] assert(! <>new<>11)

  Call[15] -> ExitExc
    [0] call(<>obj<>12["valueOf"], <>v<>1, <>new2<>13) @ #-1398

  AfterCall[16] -> [18]

  AfterCatch[17] -> ExitExc

  Block[18] -> [20], [19], ExitExc
    [0] <>result<>3 := <>Global<>ignore2
    [1] <>y<>14 := @isObject(<>result<>3)

  Block[19] -> Exit, ExitExc
    [0] assert(! <>y<>14)
    [1] return(<>result<>3)

  Block[20] -> [21], ExitExc
    [0] assert(! ! <>y<>14)

  Block[21] -> [22]

  Block[22] -> [23]

  Block[23] -> [25], [24]

  Block[24] -> [27], [26], ExitExc
    [0] assert(<>hint<>2 === "Number")
    [1] <>obj<>15 := @ToObject(<>v<>1) @ #-1399
    [2] <>new<>16 := @IsCallable(<>obj<>15["valueOf"])

  Block[25] -> [46], ExitExc
    [0] assert(<>hint<>2 !== "Number")

  Block[26] -> [28], ExitExc
    [0] assert(<>new<>16)
    [1] <>obj<>17 := @ToObject(<>v<>1) @ #-13910
    [2] <>new2<>18 := allocArray(0) @ #-13911

  Block[27] -> [35], ExitExc
    [0] assert(! <>new<>16)

  Call[28] -> ExitExc
    [0] call(<>obj<>17["valueOf"], <>v<>1, <>new2<>18) @ #-13912

  AfterCall[29] -> [31]

  AfterCatch[30] -> ExitExc

  Block[31] -> [33], [32], ExitExc
    [0] <>result<>3 := <>Global<>ignore3
    [1] <>y<>19 := @isObject(<>result<>3)

  Block[32] -> Exit, ExitExc
    [0] assert(! <>y<>19)
    [1] return(<>result<>3)

  Block[33] -> [34], ExitExc
    [0] assert(! ! <>y<>19)

  Block[34] -> [35]

  Block[35] -> [37], [36], ExitExc
    [0] <>obj<>20 := @ToObject(<>v<>1) @ #-13913
    [1] <>new<>21 := @IsCallable(<>obj<>20["toString"])

  Block[36] -> [38], ExitExc
    [0] assert(<>new<>21)
    [1] <>obj<>22 := @ToObject(<>v<>1) @ #-13914
    [2] <>new2<>23 := allocArray(0) @ #-13915

  Block[37] -> [45], ExitExc
    [0] assert(! <>new<>21)

  Call[38] -> ExitExc
    [0] call(<>obj<>22["toString"], <>v<>1, <>new2<>23) @ #-13916

  AfterCall[39] -> [41]

  AfterCatch[40] -> ExitExc

  Block[41] -> [43], [42], ExitExc
    [0] <>result<>3 := <>Global<>ignore4
    [1] <>y<>24 := @isObject(<>result<>3)

  Block[42] -> Exit, ExitExc
    [0] assert(! <>y<>24)
    [1] return(<>result<>3)

  Block[43] -> [44], ExitExc
    [0] assert(! ! <>y<>24)

  Block[44] -> [45]

  Block[45] -> [46]

  Block[46] -> [47], ExitExc
    [0] <>fun<>25 := @ToObject(TypeError) @ #-13917
    [1] <>arguments<>26 := allocArg(0) @ #-13918
    [2] <>proto<>27 := <>fun<>25["prototype"]
    [3] <>obj<>28 := alloc(<>proto<>27) @ #-13919

  Call[47] -> ExitExc
    [0] construct(<>fun<>25, <>obj<>28, <>arguments<>26) @ #-13920

  AfterCall[48] -> [50]

  AfterCatch[49] -> ExitExc

  Block[50] -> [52], [51]
    [0] <>cond<>30 := @isObject(<>newObj<>29)

  Block[51] -> [53], ExitExc
    [0] assert(<>cond<>30)
    [1] <>new1<>31 := <>newObj<>29

  Block[52] -> [53], ExitExc
    [0] assert(! <>cond<>30)
    [1] <>new1<>31 := <>obj<>28

  Block[53] -> ExitExc
    [0] throw(<>new1<>31)

  Exit[-2]

  ExitExc[-3]

}

function[-138] bindConstruct {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>7 := @ToObject(<>arguments<>6) @ #-1381
    [1] <>Global<>ignore1 := @TargetFunction(<>obj<>7["callee"])
    [2] <>target<>1 := <>Global<>ignore1
    [3] <>y<>8 := @HasConstruct(<>target<>1)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>8 === false)
    [1] <>fun<>9 := @ToObject(TypeError) @ #-1382
    [2] <>arguments<>10 := allocArg(0) @ #-1383
    [3] <>proto<>11 := <>fun<>9["prototype"]
    [4] <>obj<>12 := alloc(<>proto<>11) @ #-1384

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>8 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-1385

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[9] -> ExitExc
    [0] throw(<>new1<>15)

  Block[10] -> [11], ExitExc
    [0] <>obj<>16 := @ToObject(<>arguments<>6) @ #-1386
    [1] <>Global<>ignore2 := @BoundArgs(<>obj<>16["callee"])
    [2] <>boundArgs<>2 := <>Global<>ignore2
    [3] <>Global<>ignore3 := allocArray(0) @ #-1387
    [4] <>args<>3 := <>Global<>ignore3
    [5] <>i<>4 := 0
    [6] <>y<>17 := <>i<>4
    [7] <>obj<>18 := @ToObject(<>boundArgs<>2) @ #-1388

  LoopHead[11] -> [13], [12]

  Block[12] -> [14], ExitExc
    [0] assert(<>y<>17 < <>obj<>18["length"])
    [1] <>obj<>19 := @ToObject(<>args<>3) @ #-1389
    [2] <>obj<>20 := @ToObject(<>boundArgs<>2) @ #-13810
    [3] <>obj<>19[<>i<>4] := <>obj<>20[<>i<>4]

  Block[13] -> [15], ExitExc
    [0] assert(! <>y<>17 < <>obj<>18["length"])

  LCont[14] -> [11], ExitExc
    [0] <>old<>21 := <>i<>4
    [1] <>new<>22 := @ToNumber(<>old<>21)
    [2] <>i<>4 := <>new<>22 + 1
    [3] <>Global<>ignore6 := <>new<>22
    [4] <>y<>17 := <>i<>4
    [5] <>obj<>18 := @ToObject(<>boundArgs<>2) @ #-13811

  LBreak[15] -> [16], ExitExc
    [0] <>j<>5 := 0
    [1] <>y<>23 := <>j<>5
    [2] <>obj<>24 := @ToObject(<>arguments<>6) @ #-13812

  LoopHead[16] -> [18], [17]

  Block[17] -> [19], ExitExc
    [0] assert(<>y<>23 < <>obj<>24["length"])
    [1] <>obj<>25 := @ToObject(<>args<>3) @ #-13813
    [2] <>obj<>26 := @ToObject(<>arguments<>6) @ #-13814
    [3] <>obj<>25[<>j<>5 + <>i<>4] := <>obj<>26[<>j<>5]

  Block[18] -> [20], ExitExc
    [0] assert(! <>y<>23 < <>obj<>24["length"])

  LCont[19] -> [16], ExitExc
    [0] <>old<>27 := <>j<>5
    [1] <>new<>28 := @ToNumber(<>old<>27)
    [2] <>j<>5 := <>new<>28 + 1
    [3] <>Global<>ignore10 := <>new<>28
    [4] <>y<>23 := <>j<>5
    [5] <>obj<>24 := @ToObject(<>arguments<>6) @ #-13815

  LBreak[20] -> [21], ExitExc

  Call[21] -> ExitExc
    [0] construct(<>target<>1, this, <>args<>3) @ #-13816

  AfterCall[22] -> [24]

  AfterCatch[23] -> ExitExc

  Block[24] -> Exit, ExitExc
    [0] return(<>new1<>29)

  Exit[-2]

  ExitExc[-3]

}

function[-137] bindCall {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>8 := @ToObject(<>arguments<>7) @ #-1371
    [1] <>Global<>ignore1 := @BoundArgs(<>obj<>8["callee"])
    [2] <>boundArgs<>1 := <>Global<>ignore1
    [3] <>obj<>9 := @ToObject(<>arguments<>7) @ #-1372
    [4] <>Global<>ignore2 := @BoundThis(<>obj<>9["callee"])
    [5] <>boundThis<>2 := <>Global<>ignore2
    [6] <>obj<>10 := @ToObject(<>arguments<>7) @ #-1373
    [7] <>Global<>ignore3 := @TargetFunction(<>obj<>10["callee"])
    [8] <>target<>3 := <>Global<>ignore3
    [9] <>Global<>ignore4 := allocArray(0) @ #-1374
    [10] <>args<>4 := <>Global<>ignore4
    [11] <>i<>5 := 0
    [12] <>y<>11 := <>i<>5
    [13] <>obj<>12 := @ToObject(<>boundArgs<>1) @ #-1375

  LoopHead[1] -> [3], [2]

  Block[2] -> [4], ExitExc
    [0] assert(<>y<>11 < <>obj<>12["length"])
    [1] <>obj<>13 := @ToObject(<>args<>4) @ #-1376
    [2] <>obj<>14 := @ToObject(<>boundArgs<>1) @ #-1377
    [3] <>obj<>13[<>i<>5] := <>obj<>14[<>i<>5]

  Block[3] -> [5], ExitExc
    [0] assert(! <>y<>11 < <>obj<>12["length"])

  LCont[4] -> [1], ExitExc
    [0] <>old<>15 := <>i<>5
    [1] <>new<>16 := @ToNumber(<>old<>15)
    [2] <>i<>5 := <>new<>16 + 1
    [3] <>Global<>ignore7 := <>new<>16
    [4] <>y<>11 := <>i<>5
    [5] <>obj<>12 := @ToObject(<>boundArgs<>1) @ #-1378

  LBreak[5] -> [6], ExitExc
    [0] <>j<>6 := 0
    [1] <>y<>17 := <>j<>6
    [2] <>obj<>18 := @ToObject(<>arguments<>7) @ #-1379

  LoopHead[6] -> [8], [7]

  Block[7] -> [9], ExitExc
    [0] assert(<>y<>17 < <>obj<>18["length"])
    [1] <>obj<>19 := @ToObject(<>args<>4) @ #-13710
    [2] <>obj<>20 := @ToObject(<>arguments<>7) @ #-13711
    [3] <>obj<>19[<>j<>6 + <>i<>5] := <>obj<>20[<>j<>6]

  Block[8] -> [10], ExitExc
    [0] assert(! <>y<>17 < <>obj<>18["length"])

  LCont[9] -> [6], ExitExc
    [0] <>old<>21 := <>j<>6
    [1] <>new<>22 := @ToNumber(<>old<>21)
    [2] <>j<>6 := <>new<>22 + 1
    [3] <>Global<>ignore11 := <>new<>22
    [4] <>y<>17 := <>j<>6
    [5] <>obj<>18 := @ToObject(<>arguments<>7) @ #-13712

  LBreak[10] -> [11], ExitExc

  Call[11] -> ExitExc
    [0] call(<>target<>3, <>boundThis<>2, <>args<>4) @ #-13713

  AfterCall[12] -> [14]

  AfterCatch[13] -> ExitExc

  Block[14] -> Exit, ExitExc
    [0] return(<>new1<>23)

  Exit[-2]

  ExitExc[-3]

}

function[-136] stringify {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("JSON.stringify")

  Exit[-2]

  ExitExc[-3]

}

function[-135] parse {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("JSON.parse")

  Exit[-2]

  ExitExc[-3]

}

function[-134] tan {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @tan(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-133] sqrt {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @sqrt(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-132] sin {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @sin(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-131] round {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @round(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-130] random {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-129] pow {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>4 := @pow(<>x<>1, <>y<>2)
    [1] return(<>new1<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-128] min {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>6 := @ToObject(<>arguments<>5) @ #-1281
    [1] <>n<>2 := <>obj<>6["length"]
    [2] <>v<>3 := Infinity
    [3] <>i<>1 := 0
    [4] <>Global<>ignore4 := 0

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>i<>1 < <>n<>2)
    [1] <>obj<>7 := @ToObject(<>arguments<>5) @ #-1282
    [2] <>Global<>ignore7 := @ToNumber(<>obj<>7[<>i<>1])
    [3] <>cur<>4 := <>Global<>ignore7
    [4] <>new<>8 := @SameValue(<>cur<>4, NaN)

  Block[3] -> [18], ExitExc
    [0] assert(! <>i<>1 < <>n<>2)

  Block[4] -> Exit, ExitExc
    [0] assert(<>new<>8)
    [1] return(NaN)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new<>8)

  Block[6] -> [8], [7]

  Block[7] -> [9], ExitExc
    [0] assert(<>v<>3 > <>cur<>4)
    [1] <>v<>3 := <>cur<>4

  Block[8] -> [9], ExitExc
    [0] assert(! <>v<>3 > <>cur<>4)

  Block[9] -> [11], [10]
    [0] <>new0<>9 := @SameValue(<>v<>3, + 0)

  Block[10] -> [13], [12], ExitExc
    [0] assert(<>new0<>9)
    [1] <>new1<>10 := @SameValue(<>cur<>4, - 0)

  Block[11] -> [15], ExitExc
    [0] assert(! <>new0<>9)

  Block[12] -> [16], ExitExc
    [0] assert(<>new1<>10)
    [1] <>v<>3 := - 0

  Block[13] -> [14], ExitExc
    [0] assert(! <>new1<>10)

  Block[14] -> [15]

  Block[15] -> [16]

  Branch[16] -> [17]

  LCont[17] -> [1], ExitExc
    [0] <>old<>11 := <>i<>1
    [1] <>new<>12 := @ToNumber(<>old<>11)
    [2] <>i<>1 := <>new<>12 + 1
    [3] <>Global<>ignore6 := <>new<>12

  LBreak[18] -> Exit, ExitExc
    [0] return(<>v<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-127] max {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>obj<>6 := @ToObject(<>arguments<>5) @ #-1271
    [1] <>n<>2 := <>obj<>6["length"]
    [2] <>v<>3 := - Infinity
    [3] <>i<>1 := 0
    [4] <>Global<>ignore4 := 0

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>i<>1 < <>n<>2)
    [1] <>obj<>7 := @ToObject(<>arguments<>5) @ #-1272
    [2] <>Global<>ignore7 := @ToNumber(<>obj<>7[<>i<>1])
    [3] <>cur<>4 := <>Global<>ignore7
    [4] <>new<>8 := @SameValue(<>cur<>4, NaN)

  Block[3] -> [18], ExitExc
    [0] assert(! <>i<>1 < <>n<>2)

  Block[4] -> Exit, ExitExc
    [0] assert(<>new<>8)
    [1] return(NaN)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new<>8)

  Block[6] -> [8], [7]

  Block[7] -> [9], ExitExc
    [0] assert(<>v<>3 < <>cur<>4)
    [1] <>v<>3 := <>cur<>4

  Block[8] -> [9], ExitExc
    [0] assert(! <>v<>3 < <>cur<>4)

  Block[9] -> [11], [10]
    [0] <>new0<>9 := @SameValue(<>v<>3, - 0)

  Block[10] -> [13], [12], ExitExc
    [0] assert(<>new0<>9)
    [1] <>new1<>10 := @SameValue(<>cur<>4, + 0)

  Block[11] -> [15], ExitExc
    [0] assert(! <>new0<>9)

  Block[12] -> [16], ExitExc
    [0] assert(<>new1<>10)
    [1] <>v<>3 := + 0

  Block[13] -> [14], ExitExc
    [0] assert(! <>new1<>10)

  Block[14] -> [15]

  Block[15] -> [16]

  Branch[16] -> [17]

  LCont[17] -> [1], ExitExc
    [0] <>old<>11 := <>i<>1
    [1] <>new<>12 := @ToNumber(<>old<>11)
    [2] <>i<>1 := <>new<>12 + 1
    [3] <>Global<>ignore6 := <>new<>12

  LBreak[18] -> Exit, ExitExc
    [0] return(<>v<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-126] log {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @log(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-125] floor {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @floor(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-124] exp {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @exp(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-123] cos {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @cos(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-122] ceil {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @ceil(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-121] atan2 {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>4 := @atan2(<>x<>1, <>y<>2)
    [1] return(<>new1<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-120] atan {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @atan(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-119] asin {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @asin(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-118] acos {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @acos(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-117] abs {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @abs(<>x<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-116] URIError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1161
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(URIError) @ #-1162
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1163
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-115] URIError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1151
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(URIError) @ #-1152
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1153
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-114] TypeError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1141
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(TypeError) @ #-1142
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1143
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-113] TypeError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1131
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(TypeError) @ #-1132
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1133
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-112] SyntaxError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1121
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(SyntaxError) @ #-1122
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1123
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-111] SyntaxError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1111
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(SyntaxError) @ #-1112
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1113
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-110] ReferenceError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1101
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(ReferenceError) @ #-1102
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1103
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-109] ReferenceError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1091
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(ReferenceError) @ #-1092
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1093
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-108] RangeError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1081
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(RangeError) @ #-1082
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1083
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-107] RangeError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1071
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(RangeError) @ #-1072
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1073
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-106] EvalError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1061
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(EvalError) @ #-1062
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1063
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-105] EvalError {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1051
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(EvalError) @ #-1052
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1053
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-104] Error {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1041
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(Error) @ #-1042
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1043
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-103] Error {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1031
    [1] <>obj<>2 := <>Global<>ignore1
    [2] <>obj<>4 := @ToObject(Error) @ #-1032
    [3] <>Global<>ignore2 := @Prototype(<>obj<>2, <>obj<>4["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>2, "Error")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>2, true)
    [6] <>y<>5 := @SameValue(<>message<>1, undefined)

  Block[1] -> [3], ExitExc
    [0] assert(! <>y<>5)
    [1] <>obj<>6 := @ToObject(<>obj<>2) @ #-1033
    [2] <>Global<>ignore5 := @ToString(<>message<>1)
    [3] <>obj<>6["message"] := <>Global<>ignore5

  Block[2] -> [3], ExitExc
    [0] assert(! ! <>y<>5)

  Block[3] -> Exit, ExitExc
    [0] return(<>obj<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-102] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>O<>1 := this

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>5 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>5 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>5 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>5)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>5)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>6 := @ToObject(TypeError) @ #-1021
    [1] <>arguments<>7 := allocArg(0) @ #-1022
    [2] <>proto<>8 := <>fun<>6["prototype"]
    [3] <>obj<>9 := alloc(<>proto<>8) @ #-1023

  Call[14] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-1024

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[20] -> ExitExc
    [0] throw(<>new1<>12)

  Branch[21] -> [23], [22], ExitExc
    [0] <>obj<>13 := @ToObject(<>O<>1) @ #-1025
    [1] <>name<>2 := <>obj<>13["name"]
    [2] <>new<>14 := @SameValue(<>name<>2, undefined)

  Block[22] -> [24], ExitExc
    [0] assert(<>new<>14)
    [1] <>name<>2 := "Error"

  Block[23] -> [24], ExitExc
    [0] assert(! <>new<>14)
    [1] <>Global<>ignore4 := @ToString(<>name<>2)
    [2] <>name<>2 := <>Global<>ignore4

  Block[24] -> [26], [25], ExitExc
    [0] <>obj<>15 := @ToObject(<>O<>1) @ #-1026
    [1] <>msg<>3 := <>obj<>15["message"]
    [2] <>new<>16 := @SameValue(<>msg<>3, undefined)

  Block[25] -> [27], ExitExc
    [0] assert(<>new<>16)
    [1] <>msg<>3 := ""

  Block[26] -> [27], ExitExc
    [0] assert(! <>new<>16)
    [1] <>Global<>ignore7 := @ToString(<>msg<>3)
    [2] <>msg<>3 := <>Global<>ignore7

  Block[27] -> [29], [28]
    [0] <>new<>17 := @SameValue(<>name<>2, "")

  Block[28] -> Exit, ExitExc
    [0] assert(<>new<>17)
    [1] return(<>msg<>3)

  Block[29] -> [30], ExitExc
    [0] assert(! <>new<>17)

  Block[30] -> [32], [31]
    [0] <>new<>18 := @SameValue(<>msg<>3, "")

  Block[31] -> Exit, ExitExc
    [0] assert(<>new<>18)
    [1] return(<>name<>2)

  Block[32] -> [33], ExitExc
    [0] assert(! <>new<>18)

  Block[33] -> Exit, ExitExc
    [0] return(<>name<>2 + ": " + <>msg<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-101] RegExp {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-1011
    [1] <>obj<>3 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @Class(<>obj<>3, "RegExp")
    [3] <>obj<>6 := @ToObject(RegExp) @ #-1012
    [4] <>Global<>ignore3 := @Prototype(<>obj<>3, <>obj<>6["prototype"])
    [5] <>Global<>ignore4 := alloc() @ #-1013
    [6] <>Global<>ignore4["value"] := <>@BoolTop<>
    [7] <>Global<>ignore4["writable"] := false
    [8] <>Global<>ignore4["enumerable"] := false
    [9] <>Global<>ignore4["configurable"] := false
    [10] <>desc<>4 := <>Global<>ignore4
    [11] <>obj<>7 := @ToObject(<>desc<>4) @ #-1014
    [12] <>obj<>7["value"] := <>@BoolTop<>
    [13] <>Global<>ignore6 := @DefineOwnProperty(<>obj<>3, "global", <>desc<>4)
    [14] <>Global<>ignore7 := @DefineOwnProperty(<>obj<>3, "ignoreCase", <>desc<>4)
    [15] <>Global<>ignore8 := @DefineOwnProperty(<>obj<>3, "multiline", <>desc<>4)
    [16] <>obj<>8 := @ToObject(<>desc<>4) @ #-1015
    [17] <>obj<>8["value"] := <>@NumTop<>
    [18] <>Global<>ignore10 := @DefineOwnProperty(<>obj<>3, "lastIndex", <>desc<>4)
    [19] <>obj<>9 := @ToObject(<>desc<>4) @ #-1016
    [20] <>obj<>9["value"] := <>source<>1
    [21] <>Global<>ignore12 := @DefineOwnProperty(<>obj<>3, "source", <>desc<>4)

  Block[1] -> [3], ExitExc
    [0] assert(<>flags<>2 === undefined)
    [1] <>flags<>2 := ""

  Block[2] -> [3], ExitExc
    [0] assert(<>flags<>2 !== undefined)

  Block[3] -> Exit, ExitExc
    [0] <>obj<>10 := @ToObject(<>desc<>4) @ #-1017
    [1] <>obj<>10["value"] := <>flags<>2
    [2] <>Global<>ignore15 := @DefineOwnProperty(<>obj<>3, "flags", <>desc<>4)
    [3] return(<>obj<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-100] RegExp {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>fun<>2 := @ToObject(RegExp) @ #-1001
    [1] <>arguments<>3 := allocArg(0) @ #-1002
    [2] <>proto<>4 := <>fun<>2["prototype"]
    [3] <>obj<>5 := alloc(<>proto<>4) @ #-1003

  Call[1] -> ExitExc
    [0] construct(<>fun<>2, <>obj<>5, <>arguments<>3) @ #-1004

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>7 := @isObject(<>newObj<>6)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>7)
    [1] <>new1<>8 := <>newObj<>6

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>7)
    [1] <>new1<>8 := <>obj<>5

  Block[7] -> Exit, ExitExc
    [0] return(<>new1<>8)

  Exit[-2]

  ExitExc[-3]

}

function[-99] toString {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-98] test {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @regexTest(this, <>str<>1)
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-97] exec {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("RegExp.prototype.exec")

  Exit[-2]

  ExitExc[-3]

}

function[-96] now {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-95] UTC {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-94] parse {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-93] Date {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := alloc() @ #-931
    [1] <>obj<>1 := <>Global<>ignore1
    [2] <>obj<>3 := @ToObject(Date) @ #-932
    [3] <>Global<>ignore2 := @Prototype(<>obj<>1, <>obj<>3["prototype"])
    [4] <>Global<>ignore3 := @Class(<>obj<>1, "Date")
    [5] <>Global<>ignore4 := @Extensible(<>obj<>1, true)
    [6] <>Global<>ignore5 := @PrimitiveValue(<>obj<>1, <>@NumTop<>)
    [7] return(<>obj<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-92] Date {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>fun<>9 := @ToObject(Date) @ #-921
    [1] <>arguments<>10 := allocArg(0) @ #-922
    [2] <>proto<>11 := <>fun<>9["prototype"]
    [3] <>obj<>12 := alloc(<>proto<>11) @ #-923

  Call[1] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-924

  AfterCall[2] -> [4]

  AfterCatch[3] -> ExitExc

  Block[4] -> [6], [5]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[5] -> [7], ExitExc
    [0] assert(<>cond<>14)
    [1] <>obj1<>15 := <>newObj<>13

  Block[6] -> [7], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>obj1<>15 := <>obj<>12

  Block[7] -> [8], ExitExc
    [0] <>obj<>16 := @ToObject(<>obj1<>15) @ #-925
    [1] <>arguments<>17 := allocArg(0) @ #-926
    [2] <>fun<>18 := @ToObject(<>obj<>16["toString"]) @ #-927
    [3] <>this<> := enterCode(<>obj<>16)

  Call[8] -> ExitExc
    [0] call(<>fun<>18, <>this<>, <>arguments<>17) @ #-928

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> Exit, ExitExc
    [0] return(<>new1<>19)

  Exit[-2]

  ExitExc[-3]

}

function[-91] toJSON {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Date.prototype.toJSON")

  Exit[-2]

  ExitExc[-3]

}

function[-90] toISOString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(! this instanceof Date)
    [1] <>fun<>3 := @ToObject(TypeError) @ #-901
    [2] <>arguments<>4 := allocArg(0) @ #-902
    [3] <>proto<>5 := <>fun<>3["prototype"]
    [4] <>obj<>6 := alloc(<>proto<>5) @ #-903

  Block[2] -> [10], ExitExc
    [0] assert(! ! this instanceof Date)

  Call[3] -> ExitExc
    [0] construct(<>fun<>3, <>obj<>6, <>arguments<>4) @ #-904

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>8 := @isObject(<>newObj<>7)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>8)
    [1] <>new1<>9 := <>newObj<>7

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>8)
    [1] <>new1<>9 := <>obj<>6

  Block[9] -> ExitExc
    [0] throw(<>new1<>9)

  Block[10] -> [12], [11], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>y<>10 := @SameValue(<>t<>1, Infinity)

  Block[11] -> [13], ExitExc
    [0] assert(<>y<>10)
    [1] <>new1<>11 := <>y<>10

  Block[12] -> [13], ExitExc
    [0] assert(! <>y<>10)
    [1] <>z<>12 := @SameValue(<>t<>1, - Infinity)
    [2] <>new1<>11 := <>z<>12

  Block[13] -> [15], [14]

  Block[14] -> [20], ExitExc
    [0] assert(<>new1<>11)

  Block[15] -> [16], ExitExc
    [0] assert(! <>new1<>11)

  Block[16] -> [18], [17]
    [0] <>new2<>13 := @SameValue(<>t<>1, NaN)

  Block[17] -> [20], ExitExc
    [0] assert(<>new2<>13)

  Block[18] -> [19], ExitExc
    [0] assert(! <>new2<>13)

  Block[19] -> [28]

  Branch[20] -> [21], ExitExc
    [0] <>fun<>14 := @ToObject(RangeError) @ #-905
    [1] <>arguments<>15 := allocArg(0) @ #-906
    [2] <>proto<>16 := <>fun<>14["prototype"]
    [3] <>obj<>17 := alloc(<>proto<>16) @ #-907

  Call[21] -> ExitExc
    [0] construct(<>fun<>14, <>obj<>17, <>arguments<>15) @ #-908

  AfterCall[22] -> [24]

  AfterCatch[23] -> ExitExc

  Block[24] -> [26], [25]
    [0] <>cond<>19 := @isObject(<>newObj<>18)

  Block[25] -> [27], ExitExc
    [0] assert(<>cond<>19)
    [1] <>new1<>20 := <>newObj<>18

  Block[26] -> [27], ExitExc
    [0] assert(! <>cond<>19)
    [1] <>new1<>20 := <>obj<>17

  Block[27] -> ExitExc
    [0] throw(<>new1<>20)

  Branch[28] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-89] toUTCString {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-88] setUTCFullYear {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-87] setFullYear {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-86] setUTCMonth {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-85] setMonth {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-84] setUTCDate {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-83] setDate {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-82] setUTCHours {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-81] setHours {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-80] setUTCMinutes {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-79] setMinutes {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-78] setUTCSeconds {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-77] setSeconds {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-76] setUTCMilliseconds {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-75] setMilliseconds {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this, <>@NumTop<>)
    [1] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-74] setTime {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToNumber(<>time<>1)
    [1] <>time<>1 := <>Global<>ignore1

  Block[1] -> [3], ExitExc
    [0] assert(<>time<>1 === Infinity)
    [1] <>return_val<>2 := NaN

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>time<>1 !== Infinity)
    [1] <>y<>5 := @abs(<>time<>1)

  Block[3] -> Exit, ExitExc
    [0] <>v<>3 := <>return_val<>2
    [1] <>Global<>ignore6 := @PrimitiveValue(this, <>v<>3)
    [2] return(<>v<>3)

  Block[4] -> [6], ExitExc
    [0] assert(<>y<>5 > 8.64e+15)
    [1] <>return_val<>2 := NaN

  Block[5] -> [6], ExitExc
    [0] assert(! <>y<>5 > 8.64e+15)
    [1] <>Global<>ignore4 := @ToInteger(<>time<>1)
    [2] <>return_val<>2 := <>Global<>ignore4

  Block[6] -> [3]

  Exit[-2]

  ExitExc[-3]

}

function[-73] getTimezoneOffset {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-72] getUTCMilliseconds {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>5 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>5)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>5)

  Block[3] -> Exit, ExitExc
    [0] <>msPerSecond<>2 := 1000
    [1] <>msFromTime_t<>3 := <>t<>1 % <>msPerSecond<>2
    [2] return(<>msFromTime_t<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-71] getMilliseconds {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-70] getUTCSeconds {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>6 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>6)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>6)

  Block[3] -> Exit, ExitExc
    [0] <>SecondsPerMinute<>2 := 60
    [1] <>msPerSecond<>3 := 1000
    [2] <>y<>7 := @floor(<>t<>1 / <>msPerSecond<>3)
    [3] <>SecFromTime_t<>4 := <>y<>7 % <>SecondsPerMinute<>2
    [4] return(<>SecFromTime_t<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-69] getSeconds {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-68] getUTCMinutes {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>6 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>6)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>6)

  Block[3] -> Exit, ExitExc
    [0] <>MinutesPerHour<>2 := 60
    [1] <>msPerMinute<>3 := 60000
    [2] <>y<>7 := @floor(<>t<>1 / <>msPerMinute<>3)
    [3] <>MinFromTime_t<>4 := <>y<>7 % <>MinutesPerHour<>2
    [4] return(<>MinFromTime_t<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-67] getMinutes {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-66] getUTCHours {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>6 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>6)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>6)

  Block[3] -> Exit, ExitExc
    [0] <>HoursPerDay<>2 := 24
    [1] <>msPerHour<>3 := 3600000
    [2] <>y<>7 := @floor(<>t<>1 / <>msPerHour<>3)
    [3] <>HourFromTime_t<>4 := <>y<>7 % <>HoursPerDay<>2
    [4] return(<>HourFromTime_t<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-65] getHours {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-64] getUTCDay {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>6 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>6)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>6)

  Block[3] -> Exit, ExitExc
    [0] <>msPerDay<>2 := 86400000
    [1] <>Global<>ignore3 := @floor(<>t<>1 / <>msPerDay<>2)
    [2] <>Day_t<>3 := <>Global<>ignore3
    [3] <>WeekDay_t<>4 := <>Day_t<>3 + 4 % 7
    [4] return(<>WeekDay_t<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-63] getDay {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-62] getUTCDate {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>14 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>14)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>14)

  Block[3] -> [4], ExitExc
    [0] <>msPerDay<>2 := 86400000
    [1] <>Global<>ignore3 := @floor(<>t<>1 / <>msPerDay<>2)
    [2] <>Day_t<>3 := <>Global<>ignore3
    [3] <>y<>4 := 0
    [4] <>y<>15 := 365 * <>y<>4 - 1970
    [5] <>z<>16 := @floor(<>y<>4 - 1969 / 4)
    [6] <>y<>17 := <>y<>15 + <>z<>16
    [7] <>z<>18 := @floor(<>y<>4 - 1901 / 100)
    [8] <>y<>19 := <>y<>17 - <>z<>18
    [9] <>z<>20 := @floor(<>y<>4 - 1601 / 400)
    [10] <>DayFromYear_y<>5 := <>y<>19 + <>z<>20
    [11] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  LoopHead[4] -> [6], [5]

  Block[5] -> [7], ExitExc
    [0] assert(<>TimeFromYear_y<>6 <= <>t<>1)
    [1] <>old<>21 := <>y<>4
    [2] <>y<>4 := <>old<>21 + 1
    [3] <>y<>22 := 365 * <>y<>4 - 1970
    [4] <>z<>23 := @floor(<>y<>4 - 1969 / 4)
    [5] <>y<>24 := <>y<>22 + <>z<>23
    [6] <>z<>25 := @floor(<>y<>4 - 1901 / 100)
    [7] <>y<>26 := <>y<>24 - <>z<>25
    [8] <>z<>27 := @floor(<>y<>4 - 1601 / 400)
    [9] <>DayFromYear_y<>5 := <>y<>26 + <>z<>27
    [10] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  Block[6] -> [8], ExitExc
    [0] assert(! <>TimeFromYear_y<>6 <= <>t<>1)

  LCont[7] -> [4]

  LBreak[8] -> [9], ExitExc
    [0] <>old<>28 := <>y<>4
    [1] <>y<>4 := <>old<>28 - 1
    [2] <>YearFromTime_t<>7 := <>y<>4
    [3] <>y<>4 := <>YearFromTime_t<>7
    [4] <>y<>29 := 365 * <>y<>4 - 1970
    [5] <>z<>30 := @floor(<>y<>4 - 1969 / 4)
    [6] <>y<>31 := <>y<>29 + <>z<>30
    [7] <>z<>32 := @floor(<>y<>4 - 1901 / 100)
    [8] <>y<>33 := <>y<>31 - <>z<>32
    [9] <>z<>34 := @floor(<>y<>4 - 1601 / 400)
    [10] <>DayFromYear_y<>5 := <>y<>33 + <>z<>34
    [11] <>DayWithinYear_t<>8 := <>Day_t<>3 - <>DayFromYear_y<>5
    [12] <>y<>4 := 0
    [13] <>y<>35 := 365 * <>y<>4 - 1970
    [14] <>z<>36 := @floor(<>y<>4 - 1969 / 4)
    [15] <>y<>37 := <>y<>35 + <>z<>36
    [16] <>z<>38 := @floor(<>y<>4 - 1901 / 100)
    [17] <>y<>39 := <>y<>37 - <>z<>38
    [18] <>z<>40 := @floor(<>y<>4 - 1601 / 400)
    [19] <>DayFromYear_y<>5 := <>y<>39 + <>z<>40
    [20] <>msPerDay<>2 := 86400000
    [21] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  LoopHead[9] -> [11], [10]

  Block[10] -> [12], ExitExc
    [0] assert(<>TimeFromYear_y<>6 <= <>t<>1)
    [1] <>old<>41 := <>y<>4
    [2] <>y<>4 := <>old<>41 + 1
    [3] <>y<>42 := 365 * <>y<>4 - 1970
    [4] <>z<>43 := @floor(<>y<>4 - 1969 / 4)
    [5] <>y<>44 := <>y<>42 + <>z<>43
    [6] <>z<>45 := @floor(<>y<>4 - 1901 / 100)
    [7] <>y<>46 := <>y<>44 - <>z<>45
    [8] <>z<>47 := @floor(<>y<>4 - 1601 / 400)
    [9] <>DayFromYear_y<>5 := <>y<>46 + <>z<>47
    [10] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  Block[11] -> [13], ExitExc
    [0] assert(! <>TimeFromYear_y<>6 <= <>t<>1)

  LCont[12] -> [9]

  LBreak[13] -> [15], [14], ExitExc
    [0] <>old<>48 := <>y<>4
    [1] <>y<>4 := <>old<>48 - 1
    [2] <>YearFromTime_t<>7 := <>y<>4
    [3] <>y<>4 := <>YearFromTime_t<>7

  Block[14] -> [16], ExitExc
    [0] assert(<>y<>4 % 4 !== 0)
    [1] <>DaysInYear_y<>9 := 365

  Block[15] -> [18], [17], ExitExc
    [0] assert(<>y<>4 % 4 === 0)

  Block[16] -> [39], [38]

  Block[17] -> [19], ExitExc
    [0] assert(<>y<>4 % 4 === 0)
    [1] <>new<>49 := <>y<>4 % 100 !== 0

  Block[18] -> [21], [20], ExitExc
    [0] assert(<>y<>4 % 4 !== 0)

  Block[19] -> [24], [23]

  Block[20] -> [22], ExitExc
    [0] assert(typeof <>y<>4 % 4 === 0 == "boolean")
    [1] <>new<>49 := false

  Block[21] -> [22], ExitExc
    [0] assert(typeof <>y<>4 % 4 === 0 != "boolean")
    [1] <>new<>49 := <>y<>4 % 4 === 0

  Block[22] -> [19]

  Block[23] -> [25], ExitExc
    [0] assert(<>new<>49)
    [1] <>DaysInYear_y<>9 := 366

  Block[24] -> [27], [26], ExitExc
    [0] assert(! <>new<>49)

  Block[25] -> [16]

  Block[26] -> [28], ExitExc
    [0] assert(<>y<>4 % 100 === 0)
    [1] <>new<>50 := <>y<>4 % 400 !== 0

  Block[27] -> [30], [29], ExitExc
    [0] assert(<>y<>4 % 100 !== 0)

  Block[28] -> [33], [32]

  Block[29] -> [31], ExitExc
    [0] assert(typeof <>y<>4 % 100 === 0 == "boolean")
    [1] <>new<>50 := false

  Block[30] -> [31], ExitExc
    [0] assert(typeof <>y<>4 % 100 === 0 != "boolean")
    [1] <>new<>50 := <>y<>4 % 100 === 0

  Block[31] -> [28]

  Block[32] -> [34], ExitExc
    [0] assert(<>new<>50)
    [1] <>DaysInYear_y<>9 := 365

  Block[33] -> [36], [35], ExitExc
    [0] assert(! <>new<>50)

  Block[34] -> [25]

  Block[35] -> [37], ExitExc
    [0] assert(<>y<>4 % 400 === 0)
    [1] <>DaysInYear_y<>9 := 366

  Block[36] -> [37], ExitExc
    [0] assert(<>y<>4 % 400 !== 0)

  Block[37] -> [34]

  Block[38] -> [40], ExitExc
    [0] assert(<>DaysInYear_y<>9 === 365)
    [1] <>InLeapYear_t<>10 := 0

  Block[39] -> [40], ExitExc
    [0] assert(<>DaysInYear_y<>9 !== 365)
    [1] <>InLeapYear_t<>10 := 1

  Block[40] -> [42], [41]

  Block[41] -> [43], ExitExc
    [0] assert(0 <= <>DayWithinYear_t<>8 < 31)
    [1] <>MonthFromTime_t<>11 := 0

  Block[42] -> [45], [44], ExitExc
    [0] assert(! 0 <= <>DayWithinYear_t<>8 < 31)

  Block[43] -> [78], [77]

  Block[44] -> [46], ExitExc
    [0] assert(31 <= <>DayWithinYear_t<>8 < 59 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 1

  Block[45] -> [48], [47], ExitExc
    [0] assert(! 31 <= <>DayWithinYear_t<>8 < 59 + <>InLeapYear_t<>10)

  Block[46] -> [43]

  Block[47] -> [49], ExitExc
    [0] assert(59 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 90 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 2

  Block[48] -> [51], [50], ExitExc
    [0] assert(! 59 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 90 + <>InLeapYear_t<>10)

  Block[49] -> [46]

  Block[50] -> [52], ExitExc
    [0] assert(90 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 120 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 3

  Block[51] -> [54], [53], ExitExc
    [0] assert(! 90 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 120 + <>InLeapYear_t<>10)

  Block[52] -> [49]

  Block[53] -> [55], ExitExc
    [0] assert(120 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 151 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 4

  Block[54] -> [57], [56], ExitExc
    [0] assert(! 120 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 151 + <>InLeapYear_t<>10)

  Block[55] -> [52]

  Block[56] -> [58], ExitExc
    [0] assert(151 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 181 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 5

  Block[57] -> [60], [59], ExitExc
    [0] assert(! 151 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 181 + <>InLeapYear_t<>10)

  Block[58] -> [55]

  Block[59] -> [61], ExitExc
    [0] assert(181 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 212 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 6

  Block[60] -> [63], [62], ExitExc
    [0] assert(! 181 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 212 + <>InLeapYear_t<>10)

  Block[61] -> [58]

  Block[62] -> [64], ExitExc
    [0] assert(212 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 243 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 7

  Block[63] -> [66], [65], ExitExc
    [0] assert(! 212 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 243 + <>InLeapYear_t<>10)

  Block[64] -> [61]

  Block[65] -> [67], ExitExc
    [0] assert(243 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 273 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 8

  Block[66] -> [69], [68], ExitExc
    [0] assert(! 243 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 273 + <>InLeapYear_t<>10)

  Block[67] -> [64]

  Block[68] -> [70], ExitExc
    [0] assert(273 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 304 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 9

  Block[69] -> [72], [71], ExitExc
    [0] assert(! 273 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 304 + <>InLeapYear_t<>10)

  Block[70] -> [67]

  Block[71] -> [73], ExitExc
    [0] assert(304 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 334 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 10

  Block[72] -> [75], [74], ExitExc
    [0] assert(! 304 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 334 + <>InLeapYear_t<>10)

  Block[73] -> [70]

  Block[74] -> [76], ExitExc
    [0] assert(334 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 365 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 11

  Block[75] -> [76], ExitExc
    [0] assert(! 334 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 365 + <>InLeapYear_t<>10)

  Block[76] -> [73]

  Block[77] -> [79], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 0)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 + 1

  Block[78] -> [81], [80], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 0)

  Block[79] -> Exit, ExitExc
    [0] return(<>DateFromTime<>12)

  Block[80] -> [82], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 1)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 30

  Block[81] -> [84], [83], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 1)

  Block[82] -> [79]

  Block[83] -> [85], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 2)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 58 - <>InLeapYear_t<>10

  Block[84] -> [87], [86], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 2)

  Block[85] -> [82]

  Block[86] -> [88], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 3)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 89 - <>InLeapYear_t<>10

  Block[87] -> [90], [89], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 3)

  Block[88] -> [85]

  Block[89] -> [91], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 4)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 119 - <>InLeapYear_t<>10

  Block[90] -> [93], [92], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 4)

  Block[91] -> [88]

  Block[92] -> [94], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 5)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 150 - <>InLeapYear_t<>10

  Block[93] -> [96], [95], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 5)

  Block[94] -> [91]

  Block[95] -> [97], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 6)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 180 - <>InLeapYear_t<>10

  Block[96] -> [99], [98], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 6)

  Block[97] -> [94]

  Block[98] -> [100], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 7)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 211 - <>InLeapYear_t<>10

  Block[99] -> [102], [101], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 7)

  Block[100] -> [97]

  Block[101] -> [103], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 8)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 242 - <>InLeapYear_t<>10

  Block[102] -> [105], [104], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 8)

  Block[103] -> [100]

  Block[104] -> [106], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 9)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 272 - <>InLeapYear_t<>10

  Block[105] -> [108], [107], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 9)

  Block[106] -> [103]

  Block[107] -> [109], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 10)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 303 - <>InLeapYear_t<>10

  Block[108] -> [111], [110], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 10)

  Block[109] -> [106]

  Block[110] -> [112], ExitExc
    [0] assert(<>MonthFromTime_t<>11 === 11)
    [1] <>DateFromTime<>12 := <>DayWithinYear_t<>8 - 333 - <>InLeapYear_t<>10

  Block[111] -> [112], ExitExc
    [0] assert(<>MonthFromTime_t<>11 !== 11)

  Block[112] -> [109]

  Exit[-2]

  ExitExc[-3]

}

function[-61] getDate {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-60] getUTCMonth {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>13 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>13)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>13)

  Block[3] -> [4], ExitExc
    [0] <>msPerDay<>2 := 86400000
    [1] <>Global<>ignore3 := @floor(<>t<>1 / <>msPerDay<>2)
    [2] <>Day_t<>3 := <>Global<>ignore3
    [3] <>y<>4 := 0
    [4] <>y<>14 := 365 * <>y<>4 - 1970
    [5] <>z<>15 := @floor(<>y<>4 - 1969 / 4)
    [6] <>y<>16 := <>y<>14 + <>z<>15
    [7] <>z<>17 := @floor(<>y<>4 - 1901 / 100)
    [8] <>y<>18 := <>y<>16 - <>z<>17
    [9] <>z<>19 := @floor(<>y<>4 - 1601 / 400)
    [10] <>DayFromYear_y<>5 := <>y<>18 + <>z<>19
    [11] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  LoopHead[4] -> [6], [5]

  Block[5] -> [7], ExitExc
    [0] assert(<>TimeFromYear_y<>6 <= <>t<>1)
    [1] <>old<>20 := <>y<>4
    [2] <>y<>4 := <>old<>20 + 1
    [3] <>y<>21 := 365 * <>y<>4 - 1970
    [4] <>z<>22 := @floor(<>y<>4 - 1969 / 4)
    [5] <>y<>23 := <>y<>21 + <>z<>22
    [6] <>z<>24 := @floor(<>y<>4 - 1901 / 100)
    [7] <>y<>25 := <>y<>23 - <>z<>24
    [8] <>z<>26 := @floor(<>y<>4 - 1601 / 400)
    [9] <>DayFromYear_y<>5 := <>y<>25 + <>z<>26
    [10] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  Block[6] -> [8], ExitExc
    [0] assert(! <>TimeFromYear_y<>6 <= <>t<>1)

  LCont[7] -> [4]

  LBreak[8] -> [9], ExitExc
    [0] <>old<>27 := <>y<>4
    [1] <>y<>4 := <>old<>27 - 1
    [2] <>YearFromTime_t<>7 := <>y<>4
    [3] <>y<>4 := <>YearFromTime_t<>7
    [4] <>y<>28 := 365 * <>y<>4 - 1970
    [5] <>z<>29 := @floor(<>y<>4 - 1969 / 4)
    [6] <>y<>30 := <>y<>28 + <>z<>29
    [7] <>z<>31 := @floor(<>y<>4 - 1901 / 100)
    [8] <>y<>32 := <>y<>30 - <>z<>31
    [9] <>z<>33 := @floor(<>y<>4 - 1601 / 400)
    [10] <>DayFromYear_y<>5 := <>y<>32 + <>z<>33
    [11] <>DayWithinYear_t<>8 := <>Day_t<>3 - <>DayFromYear_y<>5
    [12] <>y<>4 := 0
    [13] <>y<>34 := 365 * <>y<>4 - 1970
    [14] <>z<>35 := @floor(<>y<>4 - 1969 / 4)
    [15] <>y<>36 := <>y<>34 + <>z<>35
    [16] <>z<>37 := @floor(<>y<>4 - 1901 / 100)
    [17] <>y<>38 := <>y<>36 - <>z<>37
    [18] <>z<>39 := @floor(<>y<>4 - 1601 / 400)
    [19] <>DayFromYear_y<>5 := <>y<>38 + <>z<>39
    [20] <>msPerDay<>2 := 86400000
    [21] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  LoopHead[9] -> [11], [10]

  Block[10] -> [12], ExitExc
    [0] assert(<>TimeFromYear_y<>6 <= <>t<>1)
    [1] <>old<>40 := <>y<>4
    [2] <>y<>4 := <>old<>40 + 1
    [3] <>y<>41 := 365 * <>y<>4 - 1970
    [4] <>z<>42 := @floor(<>y<>4 - 1969 / 4)
    [5] <>y<>43 := <>y<>41 + <>z<>42
    [6] <>z<>44 := @floor(<>y<>4 - 1901 / 100)
    [7] <>y<>45 := <>y<>43 - <>z<>44
    [8] <>z<>46 := @floor(<>y<>4 - 1601 / 400)
    [9] <>DayFromYear_y<>5 := <>y<>45 + <>z<>46
    [10] <>TimeFromYear_y<>6 := <>msPerDay<>2 * <>DayFromYear_y<>5

  Block[11] -> [13], ExitExc
    [0] assert(! <>TimeFromYear_y<>6 <= <>t<>1)

  LCont[12] -> [9]

  LBreak[13] -> [15], [14], ExitExc
    [0] <>old<>47 := <>y<>4
    [1] <>y<>4 := <>old<>47 - 1
    [2] <>YearFromTime_t<>7 := <>y<>4
    [3] <>y<>4 := <>YearFromTime_t<>7

  Block[14] -> [16], ExitExc
    [0] assert(<>y<>4 % 4 !== 0)
    [1] <>DaysInYear_y<>9 := 365

  Block[15] -> [18], [17], ExitExc
    [0] assert(<>y<>4 % 4 === 0)

  Block[16] -> [39], [38]

  Block[17] -> [19], ExitExc
    [0] assert(<>y<>4 % 4 === 0)
    [1] <>new<>48 := <>y<>4 % 100 !== 0

  Block[18] -> [21], [20], ExitExc
    [0] assert(<>y<>4 % 4 !== 0)

  Block[19] -> [24], [23]

  Block[20] -> [22], ExitExc
    [0] assert(typeof <>y<>4 % 4 === 0 == "boolean")
    [1] <>new<>48 := false

  Block[21] -> [22], ExitExc
    [0] assert(typeof <>y<>4 % 4 === 0 != "boolean")
    [1] <>new<>48 := <>y<>4 % 4 === 0

  Block[22] -> [19]

  Block[23] -> [25], ExitExc
    [0] assert(<>new<>48)
    [1] <>DaysInYear_y<>9 := 366

  Block[24] -> [27], [26], ExitExc
    [0] assert(! <>new<>48)

  Block[25] -> [16]

  Block[26] -> [28], ExitExc
    [0] assert(<>y<>4 % 100 === 0)
    [1] <>new<>49 := <>y<>4 % 400 !== 0

  Block[27] -> [30], [29], ExitExc
    [0] assert(<>y<>4 % 100 !== 0)

  Block[28] -> [33], [32]

  Block[29] -> [31], ExitExc
    [0] assert(typeof <>y<>4 % 100 === 0 == "boolean")
    [1] <>new<>49 := false

  Block[30] -> [31], ExitExc
    [0] assert(typeof <>y<>4 % 100 === 0 != "boolean")
    [1] <>new<>49 := <>y<>4 % 100 === 0

  Block[31] -> [28]

  Block[32] -> [34], ExitExc
    [0] assert(<>new<>49)
    [1] <>DaysInYear_y<>9 := 365

  Block[33] -> [36], [35], ExitExc
    [0] assert(! <>new<>49)

  Block[34] -> [25]

  Block[35] -> [37], ExitExc
    [0] assert(<>y<>4 % 400 === 0)
    [1] <>DaysInYear_y<>9 := 366

  Block[36] -> [37], ExitExc
    [0] assert(<>y<>4 % 400 !== 0)

  Block[37] -> [34]

  Block[38] -> [40], ExitExc
    [0] assert(<>DaysInYear_y<>9 === 365)
    [1] <>InLeapYear_t<>10 := 0

  Block[39] -> [40], ExitExc
    [0] assert(<>DaysInYear_y<>9 !== 365)
    [1] <>InLeapYear_t<>10 := 1

  Block[40] -> [42], [41]

  Block[41] -> [43], ExitExc
    [0] assert(0 <= <>DayWithinYear_t<>8 < 31)
    [1] <>MonthFromTime_t<>11 := 0

  Block[42] -> [45], [44], ExitExc
    [0] assert(! 0 <= <>DayWithinYear_t<>8 < 31)

  Block[43] -> Exit, ExitExc
    [0] return(<>MonthFromTime_t<>11)

  Block[44] -> [46], ExitExc
    [0] assert(31 <= <>DayWithinYear_t<>8 < 59 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 1

  Block[45] -> [48], [47], ExitExc
    [0] assert(! 31 <= <>DayWithinYear_t<>8 < 59 + <>InLeapYear_t<>10)

  Block[46] -> [43]

  Block[47] -> [49], ExitExc
    [0] assert(59 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 90 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 2

  Block[48] -> [51], [50], ExitExc
    [0] assert(! 59 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 90 + <>InLeapYear_t<>10)

  Block[49] -> [46]

  Block[50] -> [52], ExitExc
    [0] assert(90 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 120 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 3

  Block[51] -> [54], [53], ExitExc
    [0] assert(! 90 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 120 + <>InLeapYear_t<>10)

  Block[52] -> [49]

  Block[53] -> [55], ExitExc
    [0] assert(120 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 151 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 4

  Block[54] -> [57], [56], ExitExc
    [0] assert(! 120 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 151 + <>InLeapYear_t<>10)

  Block[55] -> [52]

  Block[56] -> [58], ExitExc
    [0] assert(151 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 181 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 5

  Block[57] -> [60], [59], ExitExc
    [0] assert(! 151 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 181 + <>InLeapYear_t<>10)

  Block[58] -> [55]

  Block[59] -> [61], ExitExc
    [0] assert(181 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 212 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 6

  Block[60] -> [63], [62], ExitExc
    [0] assert(! 181 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 212 + <>InLeapYear_t<>10)

  Block[61] -> [58]

  Block[62] -> [64], ExitExc
    [0] assert(212 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 243 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 7

  Block[63] -> [66], [65], ExitExc
    [0] assert(! 212 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 243 + <>InLeapYear_t<>10)

  Block[64] -> [61]

  Block[65] -> [67], ExitExc
    [0] assert(243 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 273 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 8

  Block[66] -> [69], [68], ExitExc
    [0] assert(! 243 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 273 + <>InLeapYear_t<>10)

  Block[67] -> [64]

  Block[68] -> [70], ExitExc
    [0] assert(273 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 304 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 9

  Block[69] -> [72], [71], ExitExc
    [0] assert(! 273 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 304 + <>InLeapYear_t<>10)

  Block[70] -> [67]

  Block[71] -> [73], ExitExc
    [0] assert(304 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 334 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 10

  Block[72] -> [75], [74], ExitExc
    [0] assert(! 304 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 334 + <>InLeapYear_t<>10)

  Block[73] -> [70]

  Block[74] -> [76], ExitExc
    [0] assert(334 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 365 + <>InLeapYear_t<>10)
    [1] <>MonthFromTime_t<>11 := 11

  Block[75] -> [76], ExitExc
    [0] assert(! 334 + <>InLeapYear_t<>10 <= <>DayWithinYear_t<>8 < 365 + <>InLeapYear_t<>10)

  Block[76] -> [73]

  Exit[-2]

  ExitExc[-3]

}

function[-59] getMonth {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-58] getUTCFullYear {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @PrimitiveValue(this)
    [1] <>t<>1 := <>Global<>ignore1
    [2] <>new<>8 := @SameValue(<>t<>1, NaN)

  Block[1] -> Exit, ExitExc
    [0] assert(<>new<>8)
    [1] return(NaN)

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>8)

  Block[3] -> [4], ExitExc
    [0] <>y<>2 := 0
    [1] <>y<>9 := 365 * <>y<>2 - 1970
    [2] <>z<>10 := @floor(<>y<>2 - 1969 / 4)
    [3] <>y<>11 := <>y<>9 + <>z<>10
    [4] <>z<>12 := @floor(<>y<>2 - 1901 / 100)
    [5] <>y<>13 := <>y<>11 - <>z<>12
    [6] <>z<>14 := @floor(<>y<>2 - 1601 / 400)
    [7] <>DayFromYear_y<>3 := <>y<>13 + <>z<>14
    [8] <>msPerDay<>4 := 86400000
    [9] <>TimeFromYear_y<>5 := <>msPerDay<>4 * <>DayFromYear_y<>3

  LoopHead[4] -> [6], [5]

  Block[5] -> [7], ExitExc
    [0] assert(<>TimeFromYear_y<>5 <= <>t<>1)
    [1] <>old<>15 := <>y<>2
    [2] <>y<>2 := <>old<>15 + 1
    [3] <>y<>16 := 365 * <>y<>2 - 1970
    [4] <>z<>17 := @floor(<>y<>2 - 1969 / 4)
    [5] <>y<>18 := <>y<>16 + <>z<>17
    [6] <>z<>19 := @floor(<>y<>2 - 1901 / 100)
    [7] <>y<>20 := <>y<>18 - <>z<>19
    [8] <>z<>21 := @floor(<>y<>2 - 1601 / 400)
    [9] <>DayFromYear_y<>3 := <>y<>20 + <>z<>21
    [10] <>TimeFromYear_y<>5 := <>msPerDay<>4 * <>DayFromYear_y<>3

  Block[6] -> [8], ExitExc
    [0] assert(! <>TimeFromYear_y<>5 <= <>t<>1)

  LCont[7] -> [4]

  LBreak[8] -> Exit, ExitExc
    [0] <>old<>22 := <>y<>2
    [1] <>y<>2 := <>old<>22 - 1
    [2] <>YearFromTime_t<>6 := <>y<>2
    [3] return(<>YearFromTime_t<>6)

  Exit[-2]

  ExitExc[-3]

}

function[-57] getFullYear {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] return(<>@NumTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-56] getTime {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>2 := @PrimitiveValue(this)
    [1] return(<>new1<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-55] valueOf {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>2 := @PrimitiveValue(this)
    [1] return(<>new1<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-54] toLocaleTimeString {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToString(this)
    [1] <>S<>1 := <>Global<>ignore1
    [2] b := 0
    [3] <>i<>2 := 0
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-541

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>y<>4 < <>obj<>5["length"])
    [1] <>obj<>6 := @ToObject(<>S<>1) @ #-542

  Block[3] -> [11], ExitExc
    [0] assert(! <>y<>4 < <>obj<>5["length"])

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] === " ")
    [1] <>old<>7 := b
    [2] b := <>old<>7 + 1

  Block[5] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] !== " ")

  Block[6] -> [8], [7]

  Block[7] -> [11], ExitExc
    [0] assert(b === 3)

  Block[8] -> [9], ExitExc
    [0] assert(b !== 3)

  Block[9] -> [10]

  LCont[10] -> [1], ExitExc
    [0] <>old<>8 := <>i<>2
    [1] <>new<>9 := @ToNumber(<>old<>8)
    [2] <>i<>2 := <>new<>9 + 1
    [3] <>Global<>ignore5 := <>new<>9
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-543

  LBreak[11] -> [12], ExitExc
    [0] <>obj<>10 := @ToObject(<>S<>1) @ #-544
    [1] <>temp<>11 := <>i<>2
    [2] <>arguments<>12 := allocArg(1) @ #-545
    [3] <>arguments<>12["0"] := <>temp<>11
    [4] <>fun<>13 := @ToObject(<>obj<>10["slice"]) @ #-546
    [5] <>this<> := enterCode(<>obj<>10)

  Call[12] -> ExitExc
    [0] call(<>fun<>13, <>this<>, <>arguments<>12) @ #-547

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> Exit, ExitExc
    [0] return(<>new1<>14)

  Exit[-2]

  ExitExc[-3]

}

function[-53] toLocaleDateString {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToString(this)
    [1] <>S<>1 := <>Global<>ignore1
    [2] b := 0
    [3] <>i<>2 := 0
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-531

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>y<>4 < <>obj<>5["length"])
    [1] <>obj<>6 := @ToObject(<>S<>1) @ #-532

  Block[3] -> [11], ExitExc
    [0] assert(! <>y<>4 < <>obj<>5["length"])

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] === " ")
    [1] <>old<>7 := b
    [2] b := <>old<>7 + 1

  Block[5] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] !== " ")

  Block[6] -> [8], [7]

  Block[7] -> [11], ExitExc
    [0] assert(b === 3)

  Block[8] -> [9], ExitExc
    [0] assert(b !== 3)

  Block[9] -> [10]

  LCont[10] -> [1], ExitExc
    [0] <>old<>8 := <>i<>2
    [1] <>new<>9 := @ToNumber(<>old<>8)
    [2] <>i<>2 := <>new<>9 + 1
    [3] <>Global<>ignore5 := <>new<>9
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-533

  LBreak[11] -> [12], ExitExc
    [0] <>obj<>10 := @ToObject(<>S<>1) @ #-534
    [1] <>temp<>11 := 0
    [2] <>temp<>12 := <>i<>2
    [3] <>arguments<>13 := allocArg(2) @ #-535
    [4] <>arguments<>13["0"] := <>temp<>11
    [5] <>arguments<>13["1"] := <>temp<>12
    [6] <>fun<>14 := @ToObject(<>obj<>10["slice"]) @ #-536
    [7] <>this<> := enterCode(<>obj<>10)

  Call[12] -> ExitExc
    [0] call(<>fun<>14, <>this<>, <>arguments<>13) @ #-537

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> Exit, ExitExc
    [0] return(<>new1<>15)

  Exit[-2]

  ExitExc[-3]

}

function[-52] toLocaleString {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>2 := @ToString(this)
    [1] return(<>new1<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-51] toTimeString {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToString(this)
    [1] <>S<>1 := <>Global<>ignore1
    [2] b := 0
    [3] <>i<>2 := 0
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-511

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>y<>4 < <>obj<>5["length"])
    [1] <>obj<>6 := @ToObject(<>S<>1) @ #-512

  Block[3] -> [11], ExitExc
    [0] assert(! <>y<>4 < <>obj<>5["length"])

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] === " ")
    [1] <>old<>7 := b
    [2] b := <>old<>7 + 1

  Block[5] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] !== " ")

  Block[6] -> [8], [7]

  Block[7] -> [11], ExitExc
    [0] assert(b === 3)

  Block[8] -> [9], ExitExc
    [0] assert(b !== 3)

  Block[9] -> [10]

  LCont[10] -> [1], ExitExc
    [0] <>old<>8 := <>i<>2
    [1] <>new<>9 := @ToNumber(<>old<>8)
    [2] <>i<>2 := <>new<>9 + 1
    [3] <>Global<>ignore5 := <>new<>9
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-513

  LBreak[11] -> [12], ExitExc
    [0] <>obj<>10 := @ToObject(<>S<>1) @ #-514
    [1] <>temp<>11 := <>i<>2
    [2] <>arguments<>12 := allocArg(1) @ #-515
    [3] <>arguments<>12["0"] := <>temp<>11
    [4] <>fun<>13 := @ToObject(<>obj<>10["slice"]) @ #-516
    [5] <>this<> := enterCode(<>obj<>10)

  Call[12] -> ExitExc
    [0] call(<>fun<>13, <>this<>, <>arguments<>12) @ #-517

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> Exit, ExitExc
    [0] return(<>new1<>14)

  Exit[-2]

  ExitExc[-3]

}

function[-50] toDateString {
  Entry[-1] -> [0]

  Block[0] -> [1], ExitExc
    [0] <>Global<>ignore1 := @ToString(this)
    [1] <>S<>1 := <>Global<>ignore1
    [2] b := 0
    [3] <>i<>2 := 0
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-501

  LoopHead[1] -> [3], [2]

  Block[2] -> [5], [4], ExitExc
    [0] assert(<>y<>4 < <>obj<>5["length"])
    [1] <>obj<>6 := @ToObject(<>S<>1) @ #-502

  Block[3] -> [11], ExitExc
    [0] assert(! <>y<>4 < <>obj<>5["length"])

  Block[4] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] === " ")
    [1] <>old<>7 := b
    [2] b := <>old<>7 + 1

  Block[5] -> [6], ExitExc
    [0] assert(<>obj<>6[<>i<>2] !== " ")

  Block[6] -> [8], [7]

  Block[7] -> [11], ExitExc
    [0] assert(b === 3)

  Block[8] -> [9], ExitExc
    [0] assert(b !== 3)

  Block[9] -> [10]

  LCont[10] -> [1], ExitExc
    [0] <>old<>8 := <>i<>2
    [1] <>new<>9 := @ToNumber(<>old<>8)
    [2] <>i<>2 := <>new<>9 + 1
    [3] <>Global<>ignore5 := <>new<>9
    [4] <>y<>4 := <>i<>2
    [5] <>obj<>5 := @ToObject(<>S<>1) @ #-503

  LBreak[11] -> [12], ExitExc
    [0] <>obj<>10 := @ToObject(<>S<>1) @ #-504
    [1] <>temp<>11 := 0
    [2] <>temp<>12 := <>i<>2
    [3] <>arguments<>13 := allocArg(2) @ #-505
    [4] <>arguments<>13["0"] := <>temp<>11
    [5] <>arguments<>13["1"] := <>temp<>12
    [6] <>fun<>14 := @ToObject(<>obj<>10["slice"]) @ #-506
    [7] <>this<> := enterCode(<>obj<>10)

  Call[12] -> ExitExc
    [0] call(<>fun<>14, <>this<>, <>arguments<>13) @ #-507

  AfterCall[13] -> [15]

  AfterCatch[14] -> ExitExc

  Block[15] -> Exit, ExitExc
    [0] return(<>new1<>15)

  Exit[-2]

  ExitExc[-3]

}

function[-49] toString {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>2 := @ToString(this)
    [1] return(<>new1<>2)

  Exit[-2]

  ExitExc[-3]

}

function[-48] <>funexpr@1:1-2:4<> {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-47] Number {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>3 := @ToObject(<>arguments<>2) @ #-471

  Block[1] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] === 0)
    [1] <>new1<>4 := @NumObj(+ 0) @ #-472
    [2] return(<>new1<>4)

  Block[2] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] !== 0)
    [1] <>new1<>5 := @NumObj(<>value<>1) @ #-473
    [2] return(<>new1<>5)

  Block[3] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-46] Number {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>obj<>3 := @ToObject(<>arguments<>2) @ #-461

  Block[1] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] === 0)
    [1] return(+ 0)

  Block[2] -> Exit, ExitExc
    [0] assert(<>obj<>3["length"] !== 0)
    [1] <>new1<>4 := @ToNumber(<>value<>1)
    [2] return(<>new1<>4)

  Block[3] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-45] toPrecision {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>thisNumberValue<>2 := this
    [1] <>new<>6 := @isObject(this)

  Block[1] -> [3], ExitExc
    [0] assert(<>new<>6)
    [1] <>Global<>ignore2 := @PrimitiveValue(this)
    [2] <>thisNumberValue<>2 := <>Global<>ignore2

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>6)

  Block[3] -> [5], [4], ExitExc
    [0] <>x<>3 := <>thisNumberValue<>2
    [1] <>new<>7 := @SameValue(<>precision<>1, undefined)

  Block[4] -> Exit, ExitExc
    [0] assert(<>new<>7)
    [1] <>new1<>8 := @ToString(<>x<>3)
    [2] return(<>new1<>8)

  Block[5] -> [6], ExitExc
    [0] assert(! <>new<>7)

  Block[6] -> [8], [7], ExitExc
    [0] <>Global<>ignore4 := @ToInteger(<>precision<>1)
    [1] <>p<>4 := <>Global<>ignore4
    [2] <>new<>9 := @SameValue(NaN, <>x<>3)

  Block[7] -> Exit, ExitExc
    [0] assert(<>new<>9)
    [1] return("NaN")

  Block[8] -> [9], ExitExc
    [0] assert(! <>new<>9)

  Block[9] -> [11], [10]

  Block[10] -> [16], ExitExc
    [0] assert(<>p<>4 < 1)

  Block[11] -> [12], ExitExc
    [0] assert(! <>p<>4 < 1)

  Block[12] -> [14], [13]

  Block[13] -> [16], ExitExc
    [0] assert(<>p<>4 > 21)

  Block[14] -> [15], ExitExc
    [0] assert(! <>p<>4 > 21)

  Block[15] -> [24]

  Branch[16] -> [17], ExitExc
    [0] <>fun<>10 := @ToObject(RangeError) @ #-451
    [1] <>arguments<>11 := allocArg(0) @ #-452
    [2] <>proto<>12 := <>fun<>10["prototype"]
    [3] <>obj<>13 := alloc(<>proto<>12) @ #-453

  Call[17] -> ExitExc
    [0] construct(<>fun<>10, <>obj<>13, <>arguments<>11) @ #-454

  AfterCall[18] -> [20]

  AfterCatch[19] -> ExitExc

  Block[20] -> [22], [21]
    [0] <>cond<>15 := @isObject(<>newObj<>14)

  Block[21] -> [23], ExitExc
    [0] assert(<>cond<>15)
    [1] <>new1<>16 := <>newObj<>14

  Block[22] -> [23], ExitExc
    [0] assert(! <>cond<>15)
    [1] <>new1<>16 := <>obj<>13

  Block[23] -> ExitExc
    [0] throw(<>new1<>16)

  Branch[24] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-44] toExponential {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>thisNumberValue<>2 := this
    [1] <>new<>6 := @isObject(this)

  Block[1] -> [3], ExitExc
    [0] assert(<>new<>6)
    [1] <>Global<>ignore2 := @PrimitiveValue(this)
    [2] <>thisNumberValue<>2 := <>Global<>ignore2

  Block[2] -> [3], ExitExc
    [0] assert(! <>new<>6)

  Block[3] -> [5], [4], ExitExc
    [0] <>x<>3 := <>thisNumberValue<>2
    [1] <>Global<>ignore4 := @ToInteger(<>fractionDigits<>1)
    [2] <>f<>4 := <>Global<>ignore4
    [3] <>new<>7 := @SameValue(<>x<>3, NaN)

  Block[4] -> Exit, ExitExc
    [0] assert(<>new<>7)
    [1] return("NaN")

  Block[5] -> [6], ExitExc
    [0] assert(! <>new<>7)

  Block[6] -> [8], [7]
    [0] <>y<>8 := @SameValue(<>fractionDigits<>1, undefined)

  Block[7] -> [10], [9], ExitExc
    [0] assert(! <>y<>8)

  Block[8] -> [22], ExitExc
    [0] assert(! ! <>y<>8)

  Block[9] -> [11], ExitExc
    [0] assert(<>f<>4 < 0)
    [1] <>new1<>9 := <>f<>4 < 0

  Block[10] -> [11], ExitExc
    [0] assert(! <>f<>4 < 0)
    [1] <>new1<>9 := <>f<>4 > 20

  Block[11] -> [13], [12]

  Block[12] -> [14], ExitExc
    [0] assert(<>new1<>9)
    [1] <>fun<>10 := @ToObject(RangeError) @ #-441
    [2] <>arguments<>11 := allocArg(0) @ #-442
    [3] <>proto<>12 := <>fun<>10["prototype"]
    [4] <>obj<>13 := alloc(<>proto<>12) @ #-443

  Block[13] -> [21], ExitExc
    [0] assert(! <>new1<>9)

  Call[14] -> ExitExc
    [0] construct(<>fun<>10, <>obj<>13, <>arguments<>11) @ #-444

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>15 := @isObject(<>newObj<>14)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>15)
    [1] <>new1<>16 := <>newObj<>14

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>15)
    [1] <>new1<>16 := <>obj<>13

  Block[20] -> ExitExc
    [0] throw(<>new1<>16)

  Block[21] -> [22]

  Block[22] -> [23]

  Branch[23] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-43] toFixed {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToInteger(<>fractionDigits<>1)
    [1] <>f<>2 := <>Global<>ignore1

  Block[1] -> [7], ExitExc
    [0] assert(<>f<>2 < 0)

  Block[2] -> [3], ExitExc
    [0] assert(! <>f<>2 < 0)

  Block[3] -> [5], [4]

  Block[4] -> [7], ExitExc
    [0] assert(<>f<>2 > 20)

  Block[5] -> [6], ExitExc
    [0] assert(! <>f<>2 > 20)

  Block[6] -> [15]

  Branch[7] -> [8], ExitExc
    [0] <>fun<>6 := @ToObject(RangeError) @ #-431
    [1] <>arguments<>7 := allocArg(0) @ #-432
    [2] <>proto<>8 := <>fun<>6["prototype"]
    [3] <>obj<>9 := alloc(<>proto<>8) @ #-433

  Call[8] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-434

  AfterCall[9] -> [11]

  AfterCatch[10] -> ExitExc

  Block[11] -> [13], [12]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[12] -> [14], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[13] -> [14], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[14] -> ExitExc
    [0] throw(<>new1<>12)

  Branch[15] -> [17], [16], ExitExc
    [0] <>thisNumberValue<>3 := this
    [1] <>new<>13 := @isObject(this)

  Block[16] -> [18], ExitExc
    [0] assert(<>new<>13)
    [1] <>Global<>ignore3 := @PrimitiveValue(this)
    [2] <>thisNumberValue<>3 := <>Global<>ignore3

  Block[17] -> [18], ExitExc
    [0] assert(! <>new<>13)

  Block[18] -> [20], [19], ExitExc
    [0] <>x<>4 := <>thisNumberValue<>3
    [1] <>new<>14 := @SameValue(<>x<>4, NaN)

  Block[19] -> Exit, ExitExc
    [0] assert(<>new<>14)
    [1] return("NaN")

  Block[20] -> [21], ExitExc
    [0] assert(! <>new<>14)

  Block[21] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-42] valueOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(typeof this === "number")
    [1] return(this)

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof this !== "number")

  Block[3] -> Exit

  Block[4] -> [7], [6], ExitExc
    [0] assert(typeof this === "object")

  Block[5] -> [14], [13], ExitExc
    [0] assert(typeof this !== "object")

  Block[6] -> [8], ExitExc
    [0] assert(this !== null)
    [1] <>y<>2 := @Class(this)
    [2] <>new<>3 := <>y<>2 === "Number"

  Block[7] -> [10], [9], ExitExc
    [0] assert(this === null)

  Block[8] -> [12]

  Block[9] -> [11], ExitExc
    [0] assert(typeof this !== null == "boolean")
    [1] <>new<>3 := false

  Block[10] -> [11], ExitExc
    [0] assert(typeof this !== null != "boolean")
    [1] <>new<>3 := this !== null

  Block[11] -> [8]

  Block[12] -> [17], [16]

  Block[13] -> [15], ExitExc
    [0] assert(typeof typeof this === "object" == "boolean")
    [1] <>new<>3 := false

  Block[14] -> [15], ExitExc
    [0] assert(typeof typeof this === "object" != "boolean")
    [1] <>new<>3 := typeof this === "object"

  Block[15] -> [12]

  Block[16] -> Exit, ExitExc
    [0] assert(<>new<>3)
    [1] <>new1<>4 := @PrimitiveValue(this)
    [2] return(<>new1<>4)

  Block[17] -> [19], ExitExc
    [0] assert(! <>new<>3)
    [1] <>fun<>5 := @ToObject(TypeError) @ #-421
    [2] <>arguments<>6 := allocArg(0) @ #-422
    [3] <>proto<>7 := <>fun<>5["prototype"]
    [4] <>obj<>8 := alloc(<>proto<>7) @ #-423

  Block[18] -> [3]

  Call[19] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-424

  AfterCall[20] -> [22]

  AfterCatch[21] -> ExitExc

  Block[22] -> [24], [23]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[23] -> [25], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[24] -> [25], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[25] -> ExitExc
    [0] throw(<>new1<>11)

  Exit[-2]

  ExitExc[-3]

}

function[-41] toLocaleString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>y<>2 := @SameValue(typeof this, "number")

  Block[1] -> [4], [3], ExitExc
    [0] assert(! <>y<>2)
    [1] <>new0<>3 := @Class(this)
    [2] <>y<>4 := @SameValue(<>new0<>3, "Number")

  Block[2] -> [13], ExitExc
    [0] assert(! ! <>y<>2)

  Block[3] -> [5], ExitExc
    [0] assert(! <>y<>4)
    [1] <>fun<>5 := @ToObject(TypeError) @ #-411
    [2] <>arguments<>6 := allocArg(0) @ #-412
    [3] <>proto<>7 := <>fun<>5["prototype"]
    [4] <>obj<>8 := alloc(<>proto<>7) @ #-413

  Block[4] -> [12], ExitExc
    [0] assert(! ! <>y<>4)

  Call[5] -> ExitExc
    [0] construct(<>fun<>5, <>obj<>8, <>arguments<>6) @ #-414

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [10], [9]
    [0] <>cond<>10 := @isObject(<>newObj<>9)

  Block[9] -> [11], ExitExc
    [0] assert(<>cond<>10)
    [1] <>new1<>11 := <>newObj<>9

  Block[10] -> [11], ExitExc
    [0] assert(! <>cond<>10)
    [1] <>new1<>11 := <>obj<>8

  Block[11] -> ExitExc
    [0] throw(<>new1<>11)

  Block[12] -> [13]

  Block[13] -> [14]

  Branch[14] -> Exit, ExitExc
    [0] <>new1<>12 := @ToString(this)
    [1] return(<>new1<>12)

  Exit[-2]

  ExitExc[-3]

}

function[-40] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>y<>4 := @SameValue(typeof this, "number")

  Block[1] -> [4], [3], ExitExc
    [0] assert(! <>y<>4)
    [1] <>new0<>5 := @Class(this)
    [2] <>y<>6 := @SameValue(<>new0<>5, "Number")

  Block[2] -> [13], ExitExc
    [0] assert(! ! <>y<>4)

  Block[3] -> [5], ExitExc
    [0] assert(! <>y<>6)
    [1] <>fun<>7 := @ToObject(TypeError) @ #-401
    [2] <>arguments<>8 := allocArg(0) @ #-402
    [3] <>proto<>9 := <>fun<>7["prototype"]
    [4] <>obj<>10 := alloc(<>proto<>9) @ #-403

  Block[4] -> [12], ExitExc
    [0] assert(! ! <>y<>6)

  Call[5] -> ExitExc
    [0] construct(<>fun<>7, <>obj<>10, <>arguments<>8) @ #-404

  AfterCall[6] -> [8]

  AfterCatch[7] -> ExitExc

  Block[8] -> [10], [9]
    [0] <>cond<>12 := @isObject(<>newObj<>11)

  Block[9] -> [11], ExitExc
    [0] assert(<>cond<>12)
    [1] <>new1<>13 := <>newObj<>11

  Block[10] -> [11], ExitExc
    [0] assert(! <>cond<>12)
    [1] <>new1<>13 := <>obj<>10

  Block[11] -> ExitExc
    [0] throw(<>new1<>13)

  Block[12] -> [13]

  Block[13] -> [14]

  Branch[14] -> [16], [15], ExitExc
    [0] <>obj<>14 := @ToObject(<>arguments<>3) @ #-405

  Block[15] -> [21], ExitExc
    [0] assert(<>obj<>14["length"] === 0)

  Block[16] -> [17], ExitExc
    [0] assert(<>obj<>14["length"] !== 0)

  Block[17] -> [19], [18]
    [0] <>new2<>15 := @SameValue(<>radix<>1, undefined)

  Block[18] -> [21], ExitExc
    [0] assert(<>new2<>15)

  Block[19] -> [20], ExitExc
    [0] assert(! <>new2<>15)

  Block[20] -> [22], ExitExc
    [0] <>Global<>ignore1 := @ToInteger(<>radix<>1)
    [1] <>radix<>1 := <>Global<>ignore1

  Branch[21] -> [22], ExitExc
    [0] <>radix<>1 := 10

  Branch[22] -> [24], [23], ExitExc
    [0] <>thisNumberValue<>2 := this
    [1] <>new<>16 := @isObject(this)

  Block[23] -> [25], ExitExc
    [0] assert(<>new<>16)
    [1] <>Global<>ignore4 := @PrimitiveValue(this)
    [2] <>thisNumberValue<>2 := <>Global<>ignore4

  Block[24] -> [25], ExitExc
    [0] assert(! <>new<>16)

  Block[25] -> [27], [26]

  Block[26] -> Exit, ExitExc
    [0] assert(<>radix<>1 === 10)
    [1] <>new1<>17 := @ToString(<>thisNumberValue<>2)
    [2] return(<>new1<>17)

  Block[27] -> [30], [29], ExitExc
    [0] assert(<>radix<>1 !== 10)

  Block[28] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Block[29] -> [35], ExitExc
    [0] assert(<>radix<>1 < 2)

  Block[30] -> [31], ExitExc
    [0] assert(! <>radix<>1 < 2)

  Block[31] -> [33], [32]

  Block[32] -> [35], ExitExc
    [0] assert(<>radix<>1 > 36)

  Block[33] -> [34], ExitExc
    [0] assert(! <>radix<>1 > 36)

  Block[34] -> [43]

  Branch[35] -> [36], ExitExc
    [0] <>fun<>18 := @ToObject(RangeError) @ #-406
    [1] <>arguments<>19 := allocArg(0) @ #-407
    [2] <>proto<>20 := <>fun<>18["prototype"]
    [3] <>obj<>21 := alloc(<>proto<>20) @ #-408

  Call[36] -> ExitExc
    [0] construct(<>fun<>18, <>obj<>21, <>arguments<>19) @ #-409

  AfterCall[37] -> [39]

  AfterCatch[38] -> ExitExc

  Block[39] -> [41], [40]
    [0] <>cond<>23 := @isObject(<>newObj<>22)

  Block[40] -> [42], ExitExc
    [0] assert(<>cond<>23)
    [1] <>new1<>24 := <>newObj<>22

  Block[41] -> [42], ExitExc
    [0] assert(! <>cond<>23)
    [1] <>new1<>24 := <>obj<>21

  Block[42] -> ExitExc
    [0] throw(<>new1<>24)

  Branch[43] -> [28]

  Exit[-2]

  ExitExc[-3]

}

function[-39] unescape {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("unescape")

  Exit[-2]

  ExitExc[-3]

}

function[-38] escape {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("escape")

  Exit[-2]

  ExitExc[-3]

}

function[-37] Function {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Function")

  Exit[-2]

  ExitExc[-3]

}

function[-36] Function {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("Function")

  Exit[-2]

  ExitExc[-3]

}

function[-35] bind {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>y<>8 := @IsCallable(this)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>8 === false)
    [1] <>fun<>9 := @ToObject(TypeError) @ #-351
    [2] <>arguments<>10 := allocArg(0) @ #-352
    [3] <>proto<>11 := <>fun<>9["prototype"]
    [4] <>obj<>12 := alloc(<>proto<>11) @ #-353

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>8 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-354

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[9] -> ExitExc
    [0] throw(<>new1<>15)

  Block[10] -> [11], ExitExc
    [0] <>Global<>ignore1 := allocArray(0) @ #-355
    [1] <>A<>2 := <>Global<>ignore1
    [2] <>i<>3 := 1
    [3] <>y<>16 := <>i<>3
    [4] <>obj<>17 := @ToObject(<>arguments<>7) @ #-356

  LoopHead[11] -> [13], [12]

  Block[12] -> [14], ExitExc
    [0] assert(<>y<>16 < <>obj<>17["length"])
    [1] <>obj<>18 := @ToObject(<>A<>2) @ #-357
    [2] <>obj<>19 := @ToObject(<>arguments<>7) @ #-358
    [3] <>obj<>18[<>i<>3 - 1] := <>obj<>19[<>i<>3]

  Block[13] -> [15], ExitExc
    [0] assert(! <>y<>16 < <>obj<>17["length"])

  LCont[14] -> [11], ExitExc
    [0] <>old<>20 := <>i<>3
    [1] <>new<>21 := @ToNumber(<>old<>20)
    [2] <>i<>3 := <>new<>21 + 1
    [3] <>Global<>ignore4 := <>new<>21
    [4] <>y<>16 := <>i<>3
    [5] <>obj<>17 := @ToObject(<>arguments<>7) @ #-359

  LBreak[15] -> [17], [16], ExitExc
    [0] <>Global<>ignore6 := alloc() @ #-3510
    [1] <>F<>4 := <>Global<>ignore6
    [2] <>Global<>ignore7 := @TargetFunction(<>F<>4, this)
    [3] <>Global<>ignore8 := @BoundThis(<>F<>4, <>thisArg<>1)
    [4] <>Global<>ignore9 := @BoundArgs(<>F<>4, <>A<>2)
    [5] <>Global<>ignore10 := @Class(<>F<>4, "Function")
    [6] <>obj<>22 := @ToObject(Function) @ #-3511
    [7] <>Global<>ignore11 := @Prototype(<>F<>4, <>obj<>22["prototype"])
    [8] <>new1<>23 := @getLoc("BoundFunctionHelper")
    [9] <>Global<>ignore12 := @Call(<>F<>4, <>new1<>23)
    [10] <>new1<>24 := @getLoc("BoundFunctionHelper")
    [11] <>Global<>ignore13 := @Construct(<>F<>4, <>new1<>24)
    [12] <>len<>5 := 0
    [13] <>y<>25 := @Class(this)

  Block[16] -> [19], [18], ExitExc
    [0] assert(<>y<>25 === "Function")
    [1] <>obj<>26 := @ToObject(this) @ #-3512
    [2] <>y<>27 := <>obj<>26["length"]
    [3] <>obj<>28 := @ToObject(<>A<>2) @ #-3513
    [4] <>L<>6 := <>y<>27 - <>obj<>28["length"]

  Block[17] -> [21], ExitExc
    [0] assert(<>y<>25 !== "Function")

  Block[18] -> [20], ExitExc
    [0] assert(<>L<>6 > 0)
    [1] <>len<>5 := <>L<>6

  Block[19] -> [20], ExitExc
    [0] assert(! <>L<>6 > 0)

  Block[20] -> [21]

  Block[21] -> Exit, ExitExc
    [0] <>new2<>29 := alloc() @ #-3514
    [1] <>new2<>29["value"] := <>len<>5
    [2] <>new2<>29["writable"] := false
    [3] <>new2<>29["enumerable"] := false
    [4] <>new2<>29["configurable"] := false
    [5] <>Global<>ignore17 := @DefineOwnProperty(<>F<>4, "length", <>new2<>29)
    [6] <>Global<>ignore18 := @Extensible(<>F<>4, true)
    [7] return(<>F<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-34] call {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>y<>5 := @IsCallable(this)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>5 === false)
    [1] <>fun<>6 := @ToObject(TypeError) @ #-341
    [2] <>arguments<>7 := allocArg(0) @ #-342
    [3] <>proto<>8 := <>fun<>6["prototype"]
    [4] <>obj<>9 := alloc(<>proto<>8) @ #-343

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>5 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-344

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[9] -> ExitExc
    [0] throw(<>new1<>12)

  Block[10] -> [11], ExitExc
    [0] <>Global<>ignore1 := allocArray(0) @ #-345
    [1] <>argList<>2 := <>Global<>ignore1
    [2] <>i<>3 := 1
    [3] <>y<>13 := <>i<>3
    [4] <>obj<>14 := @ToObject(<>arguments<>4) @ #-346

  LoopHead[11] -> [13], [12]

  Block[12] -> [14], ExitExc
    [0] assert(<>y<>13 < <>obj<>14["length"])
    [1] <>obj<>15 := @ToObject(<>argList<>2) @ #-347
    [2] <>obj<>16 := @ToObject(<>arguments<>4) @ #-348
    [3] <>obj<>15[<>i<>3 - 1] := <>obj<>16[<>i<>3]

  Block[13] -> [15], ExitExc
    [0] assert(! <>y<>13 < <>obj<>14["length"])

  LCont[14] -> [11], ExitExc
    [0] <>old<>17 := <>i<>3
    [1] <>new<>18 := @ToNumber(<>old<>17)
    [2] <>i<>3 := <>new<>18 + 1
    [3] <>Global<>ignore4 := <>new<>18
    [4] <>y<>13 := <>i<>3
    [5] <>obj<>14 := @ToObject(<>arguments<>4) @ #-349

  LBreak[15] -> [16], ExitExc

  Call[16] -> ExitExc
    [0] call(this, <>thisArg<>1, <>argList<>2) @ #-3410

  AfterCall[17] -> [19]

  AfterCatch[18] -> ExitExc

  Block[19] -> Exit, ExitExc
    [0] return(<>new1<>19)

  Exit[-2]

  ExitExc[-3]

}

function[-33] apply {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]
    [0] <>y<>8 := @IsCallable(this)

  Block[1] -> [3], ExitExc
    [0] assert(<>y<>8 === false)
    [1] <>fun<>9 := @ToObject(TypeError) @ #-331
    [2] <>arguments<>10 := allocArg(0) @ #-332
    [3] <>proto<>11 := <>fun<>9["prototype"]
    [4] <>obj<>12 := alloc(<>proto<>11) @ #-333

  Block[2] -> [10], ExitExc
    [0] assert(<>y<>8 !== false)

  Call[3] -> ExitExc
    [0] construct(<>fun<>9, <>obj<>12, <>arguments<>10) @ #-334

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>14 := @isObject(<>newObj<>13)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>14)
    [1] <>new1<>15 := <>newObj<>13

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>14)
    [1] <>new1<>15 := <>obj<>12

  Block[9] -> ExitExc
    [0] throw(<>new1<>15)

  Block[10] -> [12], [11]

  Block[11] -> [17], ExitExc
    [0] assert(<>argArray<>2 === null)

  Block[12] -> [13], ExitExc
    [0] assert(<>argArray<>2 !== null)

  Block[13] -> [15], [14]

  Block[14] -> [17], ExitExc
    [0] assert(<>argArray<>2 === undefined)

  Block[15] -> [16], ExitExc
    [0] assert(<>argArray<>2 !== undefined)

  Block[16] -> [22]

  Branch[17] -> [18], ExitExc
    [0] <>new2<>16 := allocArray(0) @ #-335

  Call[18] -> ExitExc
    [0] call(this, <>thisArg<>1, <>new2<>16) @ #-336

  AfterCall[19] -> [21]

  AfterCatch[20] -> ExitExc

  Block[21] -> Exit, ExitExc
    [0] return(<>new1<>17)

  Branch[22] -> [24], [23]

  Block[23] -> [25], ExitExc
    [0] assert(typeof <>argArray<>2 !== "function")
    [1] <>new1<>18 := typeof <>argArray<>2 !== "object"

  Block[24] -> [27], [26], ExitExc
    [0] assert(typeof <>argArray<>2 === "function")

  Block[25] -> [30], [29]

  Block[26] -> [28], ExitExc
    [0] assert(typeof typeof <>argArray<>2 !== "function" == "boolean")
    [1] <>new1<>18 := false

  Block[27] -> [28], ExitExc
    [0] assert(typeof typeof <>argArray<>2 !== "function" != "boolean")
    [1] <>new1<>18 := typeof <>argArray<>2 !== "function"

  Block[28] -> [25]

  Block[29] -> [35], ExitExc
    [0] assert(<>new1<>18)

  Block[30] -> [31], ExitExc
    [0] assert(! <>new1<>18)

  Block[31] -> [33], [32]

  Block[32] -> [35], ExitExc
    [0] assert(<>argArray<>2 === null)

  Block[33] -> [34], ExitExc
    [0] assert(<>argArray<>2 !== null)

  Block[34] -> [43]

  Branch[35] -> [36], ExitExc
    [0] <>fun<>19 := @ToObject(TypeError) @ #-337
    [1] <>arguments<>20 := allocArg(0) @ #-338
    [2] <>proto<>21 := <>fun<>19["prototype"]
    [3] <>obj<>22 := alloc(<>proto<>21) @ #-339

  Call[36] -> ExitExc
    [0] construct(<>fun<>19, <>obj<>22, <>arguments<>20) @ #-3310

  AfterCall[37] -> [39]

  AfterCatch[38] -> ExitExc

  Block[39] -> [41], [40]
    [0] <>cond<>24 := @isObject(<>newObj<>23)

  Block[40] -> [42], ExitExc
    [0] assert(<>cond<>24)
    [1] <>new1<>25 := <>newObj<>23

  Block[41] -> [42], ExitExc
    [0] assert(! <>cond<>24)
    [1] <>new1<>25 := <>obj<>22

  Block[42] -> ExitExc
    [0] throw(<>new1<>25)

  Branch[43] -> [44], ExitExc
    [0] <>obj<>26 := @ToObject(<>argArray<>2) @ #-3311
    [1] <>len<>3 := <>obj<>26["length"]
    [2] <>Global<>ignore2 := @ToUint32(<>len<>3)
    [3] <>n<>4 := <>Global<>ignore2
    [4] <>Global<>ignore3 := allocArray(0) @ #-3312
    [5] <>argList<>5 := <>Global<>ignore3
    [6] <>index<>6 := 0

  LoopHead[44] -> [46], [45]

  Block[45] -> [47], ExitExc
    [0] assert(<>index<>6 < <>n<>4)
    [1] <>obj<>27 := @ToObject(<>argList<>5) @ #-3313
    [2] <>obj<>28 := @ToObject(<>argArray<>2) @ #-3314
    [3] <>obj<>27[<>index<>6] := <>obj<>28[<>index<>6]

  Block[46] -> [48], ExitExc
    [0] assert(! <>index<>6 < <>n<>4)

  LCont[47] -> [44], ExitExc
    [0] <>old<>29 := <>index<>6
    [1] <>new<>30 := @ToNumber(<>old<>29)
    [2] <>index<>6 := <>new<>30 + 1
    [3] <>Global<>ignore6 := <>new<>30

  LBreak[48] -> [49], ExitExc

  Call[49] -> ExitExc
    [0] call(this, <>thisArg<>1, <>argList<>5) @ #-3315

  AfterCall[50] -> [52]

  AfterCatch[51] -> ExitExc

  Block[52] -> Exit, ExitExc
    [0] return(<>new1<>31)

  Exit[-2]

  ExitExc[-3]

}

function[-32] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof this !== "function")
    [1] <>fun<>2 := @ToObject(TypeError) @ #-321
    [2] <>arguments<>3 := allocArg(0) @ #-322
    [3] <>proto<>4 := <>fun<>2["prototype"]
    [4] <>obj<>5 := alloc(<>proto<>4) @ #-323

  Block[2] -> [10], ExitExc
    [0] assert(typeof this === "function")

  Call[3] -> ExitExc
    [0] construct(<>fun<>2, <>obj<>5, <>arguments<>3) @ #-324

  AfterCall[4] -> [6]

  AfterCatch[5] -> ExitExc

  Block[6] -> [8], [7]
    [0] <>cond<>7 := @isObject(<>newObj<>6)

  Block[7] -> [9], ExitExc
    [0] assert(<>cond<>7)
    [1] <>new1<>8 := <>newObj<>6

  Block[8] -> [9], ExitExc
    [0] assert(! <>cond<>7)
    [1] <>new1<>8 := <>obj<>5

  Block[9] -> ExitExc
    [0] throw(<>new1<>8)

  Block[10] -> Exit, ExitExc
    [0] return(<>@StrTop<>)

  Exit[-2]

  ExitExc[-3]

}

function[-31] <>funexpr@1:1-2:4<> {
  Entry[-1] -> [0]

  Block[0] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-30] keys {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>9 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>9 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>9 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>9)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>9)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>10 := @ToObject(TypeError) @ #-301
    [1] <>arguments<>11 := allocArg(0) @ #-302
    [2] <>proto<>12 := <>fun<>10["prototype"]
    [3] <>obj<>13 := alloc(<>proto<>12) @ #-303

  Call[14] -> ExitExc
    [0] construct(<>fun<>10, <>obj<>13, <>arguments<>11) @ #-304

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>15 := @isObject(<>newObj<>14)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>15)
    [1] <>new1<>16 := <>newObj<>14

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>15)
    [1] <>new1<>16 := <>obj<>13

  Block[20] -> ExitExc
    [0] throw(<>new1<>16)

  Branch[21] -> [22], ExitExc
    [0] <>Global<>ignore1 := @getOwnPropertyNames(<>O<>1) @ #-305
    [1] <>names<>2 := <>Global<>ignore1
    [2] <>Global<>ignore2 := allocArray(0) @ #-306
    [3] <>array<>3 := <>Global<>ignore2
    [4] <>n<>4 := 0
    [5] <>i<>5 := 0
    [6] <>y<>17 := <>i<>5
    [7] <>obj<>18 := @ToObject(<>names<>2) @ #-307

  LoopHead[22] -> [24], [23]

  Block[23] -> [26], [25], ExitExc
    [0] assert(<>y<>17 < <>obj<>18["length"])
    [1] <>obj<>19 := @ToObject(<>names<>2) @ #-308
    [2] <>P<>6 := <>obj<>19[<>i<>5]
    [3] <>Global<>ignore8 := @GetOwnProperty(<>O<>1, <>P<>6) @ #-309
    [4] <>desc<>7 := <>Global<>ignore8
    [5] <>obj<>20 := @ToObject(<>desc<>7) @ #-3010

  Block[24] -> [29], ExitExc
    [0] assert(! <>y<>17 < <>obj<>18["length"])

  Block[25] -> [27], ExitExc
    [0] assert(<>obj<>20["enumerable"])
    [1] <>new1<>21 := @ToString(<>n<>4)
    [2] <>new2<>22 := alloc() @ #-3011
    [3] <>new2<>22["value"] := <>P<>6
    [4] <>new2<>22["writable"] := true
    [5] <>new2<>22["enumerable"] := true
    [6] <>new2<>22["configurable"] := true
    [7] <>Global<>ignore9 := @DefineOwnProperty(<>array<>3, <>new1<>21, <>new2<>22)
    [8] <>old<>23 := <>n<>4
    [9] <>new<>24 := @ToNumber(<>old<>23)
    [10] <>n<>4 := <>new<>24 + 1
    [11] <>Global<>ignore11 := <>new<>24

  Block[26] -> [27], ExitExc
    [0] assert(! <>obj<>20["enumerable"])

  Block[27] -> [28]

  LCont[28] -> [22], ExitExc
    [0] <>old<>25 := <>i<>5
    [1] <>new<>26 := @ToNumber(<>old<>25)
    [2] <>i<>5 := <>new<>26 + 1
    [3] <>Global<>ignore6 := <>new<>26
    [4] <>y<>17 := <>i<>5
    [5] <>obj<>18 := @ToObject(<>names<>2) @ #-3012

  LBreak[29] -> Exit, ExitExc
    [0] <>obj<>27 := @ToObject(<>array<>3) @ #-3013
    [1] <>obj<>27["length"] := <>n<>4
    [2] return(<>array<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-29] isExtensible {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>3 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>3 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>3 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>3)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>3)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>4 := @ToObject(TypeError) @ #-291
    [1] <>arguments<>5 := allocArg(0) @ #-292
    [2] <>proto<>6 := <>fun<>4["prototype"]
    [3] <>obj<>7 := alloc(<>proto<>6) @ #-293

  Call[14] -> ExitExc
    [0] construct(<>fun<>4, <>obj<>7, <>arguments<>5) @ #-294

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>9 := @isObject(<>newObj<>8)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>9)
    [1] <>new1<>10 := <>newObj<>8

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>9)
    [1] <>new1<>10 := <>obj<>7

  Block[20] -> ExitExc
    [0] throw(<>new1<>10)

  Branch[21] -> Exit, ExitExc
    [0] <>new1<>11 := @Extensible(<>O<>1)
    [1] return(<>new1<>11)

  Exit[-2]

  ExitExc[-3]

}

function[-28] isFrozen {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>7 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>7 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>7 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>7)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>7)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>8 := @ToObject(TypeError) @ #-281
    [1] <>arguments<>9 := allocArg(0) @ #-282
    [2] <>proto<>10 := <>fun<>8["prototype"]
    [3] <>obj<>11 := alloc(<>proto<>10) @ #-283

  Call[14] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>11, <>arguments<>9) @ #-284

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>13 := @isObject(<>newObj<>12)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>13)
    [1] <>new1<>14 := <>newObj<>12

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>13)
    [1] <>new1<>14 := <>obj<>11

  Block[20] -> ExitExc
    [0] throw(<>new1<>14)

  Branch[21] -> [22], ExitExc
    [0] <>Global<>ignore1 := @getOwnPropertyNames(<>O<>1) @ #-285
    [1] <>names<>2 := <>Global<>ignore1
    [2] <>i<>3 := 0
    [3] <>y<>15 := <>i<>3
    [4] <>obj<>16 := @ToObject(<>names<>2) @ #-286

  LoopHead[22] -> [24], [23]

  Block[23] -> [26], [25], ExitExc
    [0] assert(<>y<>15 < <>obj<>16["length"])
    [1] <>obj<>17 := @ToObject(<>names<>2) @ #-287
    [2] <>P<>4 := <>obj<>17[<>i<>3]
    [3] <>Global<>ignore6 := @GetOwnProperty(<>O<>1, <>P<>4) @ #-288
    [4] <>desc<>5 := <>Global<>ignore6
    [5] <>obj<>18 := @ToObject(<>desc<>5) @ #-289

  Block[24] -> [34], ExitExc
    [0] assert(! <>y<>15 < <>obj<>16["length"])

  Block[25] -> [31], ExitExc
    [0] assert(<>obj<>18["writable"])

  Block[26] -> [27], ExitExc
    [0] assert(! <>obj<>18["writable"])

  Block[27] -> [29], [28], ExitExc
    [0] <>obj<>19 := @ToObject(<>desc<>5) @ #-2810

  Block[28] -> [31], ExitExc
    [0] assert(<>obj<>19["configurable"])

  Block[29] -> [30], ExitExc
    [0] assert(! <>obj<>19["configurable"])

  Block[30] -> [32]

  Branch[31] -> Exit, ExitExc
    [0] return(false)

  Branch[32] -> [33]

  LCont[33] -> [22], ExitExc
    [0] <>old<>20 := <>i<>3
    [1] <>new<>21 := @ToNumber(<>old<>20)
    [2] <>i<>3 := <>new<>21 + 1
    [3] <>Global<>ignore4 := <>new<>21
    [4] <>y<>15 := <>i<>3
    [5] <>obj<>16 := @ToObject(<>names<>2) @ #-2811

  LBreak[34] -> [36], [35]
    [0] <>y<>22 := @Extensible(<>O<>1)

  Block[35] -> Exit, ExitExc
    [0] assert(<>y<>22 === false)
    [1] return(true)

  Block[36] -> Exit, ExitExc
    [0] assert(<>y<>22 !== false)
    [1] return(false)

  Block[37] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-27] isSealed {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>7 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>7 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>7 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>7)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>7)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>8 := @ToObject(TypeError) @ #-271
    [1] <>arguments<>9 := allocArg(0) @ #-272
    [2] <>proto<>10 := <>fun<>8["prototype"]
    [3] <>obj<>11 := alloc(<>proto<>10) @ #-273

  Call[14] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>11, <>arguments<>9) @ #-274

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>13 := @isObject(<>newObj<>12)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>13)
    [1] <>new1<>14 := <>newObj<>12

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>13)
    [1] <>new1<>14 := <>obj<>11

  Block[20] -> ExitExc
    [0] throw(<>new1<>14)

  Branch[21] -> [22], ExitExc
    [0] <>Global<>ignore1 := @getOwnPropertyNames(<>O<>1) @ #-275
    [1] <>names<>2 := <>Global<>ignore1
    [2] <>i<>3 := 0
    [3] <>y<>15 := <>i<>3
    [4] <>obj<>16 := @ToObject(<>names<>2) @ #-276

  LoopHead[22] -> [24], [23]

  Block[23] -> [26], [25], ExitExc
    [0] assert(<>y<>15 < <>obj<>16["length"])
    [1] <>obj<>17 := @ToObject(<>names<>2) @ #-277
    [2] <>P<>4 := <>obj<>17[<>i<>3]
    [3] <>Global<>ignore6 := @GetOwnProperty(<>O<>1, <>P<>4) @ #-278
    [4] <>desc<>5 := <>Global<>ignore6
    [5] <>obj<>18 := @ToObject(<>desc<>5) @ #-279

  Block[24] -> [29], ExitExc
    [0] assert(! <>y<>15 < <>obj<>16["length"])

  Block[25] -> Exit, ExitExc
    [0] assert(<>obj<>18["configurable"])
    [1] return(false)

  Block[26] -> [27], ExitExc
    [0] assert(! <>obj<>18["configurable"])

  Block[27] -> [28]

  LCont[28] -> [22], ExitExc
    [0] <>old<>19 := <>i<>3
    [1] <>new<>20 := @ToNumber(<>old<>19)
    [2] <>i<>3 := <>new<>20 + 1
    [3] <>Global<>ignore4 := <>new<>20
    [4] <>y<>15 := <>i<>3
    [5] <>obj<>16 := @ToObject(<>names<>2) @ #-2710

  LBreak[29] -> [31], [30]
    [0] <>y<>21 := @Extensible(<>O<>1)

  Block[30] -> Exit, ExitExc
    [0] assert(<>y<>21 === false)
    [1] return(true)

  Block[31] -> Exit, ExitExc
    [0] assert(<>y<>21 !== false)
    [1] return(false)

  Block[32] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-26] preventExtensions {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>3 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>3 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>3 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>3)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>3)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>4 := @ToObject(TypeError) @ #-261
    [1] <>arguments<>5 := allocArg(0) @ #-262
    [2] <>proto<>6 := <>fun<>4["prototype"]
    [3] <>obj<>7 := alloc(<>proto<>6) @ #-263

  Call[14] -> ExitExc
    [0] construct(<>fun<>4, <>obj<>7, <>arguments<>5) @ #-264

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>9 := @isObject(<>newObj<>8)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>9)
    [1] <>new1<>10 := <>newObj<>8

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>9)
    [1] <>new1<>10 := <>obj<>7

  Block[20] -> ExitExc
    [0] throw(<>new1<>10)

  Branch[21] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @Extensible(<>O<>1, false)
    [1] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-25] freeze {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>7 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>7 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>7 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>7)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>7)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>8 := @ToObject(TypeError) @ #-251
    [1] <>arguments<>9 := allocArg(0) @ #-252
    [2] <>proto<>10 := <>fun<>8["prototype"]
    [3] <>obj<>11 := alloc(<>proto<>10) @ #-253

  Call[14] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>11, <>arguments<>9) @ #-254

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>13 := @isObject(<>newObj<>12)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>13)
    [1] <>new1<>14 := <>newObj<>12

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>13)
    [1] <>new1<>14 := <>obj<>11

  Block[20] -> ExitExc
    [0] throw(<>new1<>14)

  Branch[21] -> [22], ExitExc
    [0] <>Global<>ignore1 := @getOwnPropertyNames(<>O<>1) @ #-255
    [1] <>names<>2 := <>Global<>ignore1
    [2] <>i<>3 := 0
    [3] <>y<>15 := <>i<>3
    [4] <>obj<>16 := @ToObject(<>names<>2) @ #-256

  LoopHead[22] -> [24], [23]

  Block[23] -> [25], ExitExc
    [0] assert(<>y<>15 < <>obj<>16["length"])
    [1] <>obj<>17 := @ToObject(<>names<>2) @ #-257
    [2] <>P<>4 := <>obj<>17[<>i<>3]
    [3] <>Global<>ignore6 := @GetOwnProperty(<>O<>1, <>P<>4) @ #-258
    [4] <>desc<>5 := <>Global<>ignore6
    [5] <>obj<>18 := @ToObject(<>desc<>5) @ #-259
    [6] <>obj<>18["writable"] := false
    [7] <>obj<>19 := @ToObject(<>desc<>5) @ #-2510
    [8] <>obj<>19["configurable"] := false
    [9] <>Global<>ignore9 := @DefineOwnProperty(<>O<>1, <>P<>4, <>desc<>5)

  Block[24] -> [26], ExitExc
    [0] assert(! <>y<>15 < <>obj<>16["length"])

  LCont[25] -> [22], ExitExc
    [0] <>old<>20 := <>i<>3
    [1] <>new<>21 := @ToNumber(<>old<>20)
    [2] <>i<>3 := <>new<>21 + 1
    [3] <>Global<>ignore4 := <>new<>21
    [4] <>y<>15 := <>i<>3
    [5] <>obj<>16 := @ToObject(<>names<>2) @ #-2511

  LBreak[26] -> Exit, ExitExc
    [0] <>Global<>ignore10 := @Extensible(<>O<>1, false)
    [1] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-24] seal {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>7 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>7 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>7 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>7)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>7)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>8 := @ToObject(TypeError) @ #-241
    [1] <>arguments<>9 := allocArg(0) @ #-242
    [2] <>proto<>10 := <>fun<>8["prototype"]
    [3] <>obj<>11 := alloc(<>proto<>10) @ #-243

  Call[14] -> ExitExc
    [0] construct(<>fun<>8, <>obj<>11, <>arguments<>9) @ #-244

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>13 := @isObject(<>newObj<>12)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>13)
    [1] <>new1<>14 := <>newObj<>12

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>13)
    [1] <>new1<>14 := <>obj<>11

  Block[20] -> ExitExc
    [0] throw(<>new1<>14)

  Branch[21] -> [22], ExitExc
    [0] <>Global<>ignore1 := @getOwnPropertyNames(<>O<>1) @ #-245
    [1] <>names<>2 := <>Global<>ignore1
    [2] <>i<>3 := 0
    [3] <>y<>15 := <>i<>3
    [4] <>obj<>16 := @ToObject(<>names<>2) @ #-246

  LoopHead[22] -> [24], [23]

  Block[23] -> [26], [25], ExitExc
    [0] assert(<>y<>15 < <>obj<>16["length"])
    [1] <>obj<>17 := @ToObject(<>names<>2) @ #-247
    [2] <>P<>4 := <>obj<>17[<>i<>3]
    [3] <>Global<>ignore6 := @GetOwnProperty(<>O<>1, <>P<>4) @ #-248
    [4] <>desc<>5 := <>Global<>ignore6
    [5] <>obj<>18 := @ToObject(<>desc<>5) @ #-249

  Block[24] -> [29], ExitExc
    [0] assert(! <>y<>15 < <>obj<>16["length"])

  Block[25] -> [27], ExitExc
    [0] assert(<>obj<>18["configurable"])
    [1] <>obj<>19 := @ToObject(<>desc<>5) @ #-2410
    [2] <>obj<>19["configurable"] := false

  Block[26] -> [27], ExitExc
    [0] assert(! <>obj<>18["configurable"])

  Block[27] -> [28]
    [0] <>Global<>ignore8 := @DefineOwnProperty(<>O<>1, <>P<>4, <>desc<>5)

  LCont[28] -> [22], ExitExc
    [0] <>old<>20 := <>i<>3
    [1] <>new<>21 := @ToNumber(<>old<>20)
    [2] <>i<>3 := <>new<>21 + 1
    [3] <>Global<>ignore4 := <>new<>21
    [4] <>y<>15 := <>i<>3
    [5] <>obj<>16 := @ToObject(<>names<>2) @ #-2411

  LBreak[29] -> Exit, ExitExc
    [0] <>Global<>ignore9 := @Extensible(<>O<>1, false)
    [1] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-23] defineProperties {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>10 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>10 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>10 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>10)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>10)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>11 := @ToObject(TypeError) @ #-231
    [1] <>arguments<>12 := allocArg(0) @ #-232
    [2] <>proto<>13 := <>fun<>11["prototype"]
    [3] <>obj<>14 := alloc(<>proto<>13) @ #-233

  Call[14] -> ExitExc
    [0] construct(<>fun<>11, <>obj<>14, <>arguments<>12) @ #-234

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>16 := @isObject(<>newObj<>15)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>16)
    [1] <>new1<>17 := <>newObj<>15

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>16)
    [1] <>new1<>17 := <>obj<>14

  Block[20] -> ExitExc
    [0] throw(<>new1<>17)

  Branch[21] -> [22], ExitExc
    [0] <>Global<>ignore1 := @ToObject(<>Properties<>2) @ #-235
    [1] <>props<>3 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @getOwnPropertyNames(<>props<>3) @ #-236
    [3] <>names<>4 := <>Global<>ignore2
    [4] <>i<>5 := 0
    [5] <>y<>18 := <>i<>5
    [6] <>obj<>19 := @ToObject(<>names<>4) @ #-237

  LoopHead[22] -> [24], [23]

  Block[23] -> [26], [25], ExitExc
    [0] assert(<>y<>18 < <>obj<>19["length"])
    [1] <>obj<>20 := @ToObject(<>names<>4) @ #-238
    [2] <>P<>6 := <>obj<>20[<>i<>5]
    [3] <>Global<>ignore7 := @GetOwnProperty(<>props<>3, <>P<>6) @ #-239
    [4] <>p_desc<>7 := <>Global<>ignore7
    [5] <>obj<>21 := @ToObject(<>p_desc<>7) @ #-2310

  Block[24] -> [29], ExitExc
    [0] assert(! <>y<>18 < <>obj<>19["length"])

  Block[25] -> [27], ExitExc
    [0] assert(<>obj<>21["enumerable"])
    [1] <>obj<>22 := @ToObject(<>props<>3) @ #-2311
    [2] <>desc<>8 := <>obj<>22[<>P<>6]
    [3] <>Global<>ignore9 := @DefineOwnProperty(<>O<>1, <>P<>6, <>desc<>8)

  Block[26] -> [27], ExitExc
    [0] assert(! <>obj<>21["enumerable"])

  Block[27] -> [28]

  LCont[28] -> [22], ExitExc
    [0] <>old<>23 := <>i<>5
    [1] <>new<>24 := @ToNumber(<>old<>23)
    [2] <>i<>5 := <>new<>24 + 1
    [3] <>Global<>ignore5 := <>new<>24
    [4] <>y<>18 := <>i<>5
    [5] <>obj<>19 := @ToObject(<>names<>4) @ #-2312

  LBreak[29] -> Exit, ExitExc
    [0] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-22] defineProperty {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>6 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>6 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>6 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>6)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>6)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>7 := @ToObject(TypeError) @ #-221
    [1] <>arguments<>8 := allocArg(0) @ #-222
    [2] <>proto<>9 := <>fun<>7["prototype"]
    [3] <>obj<>10 := alloc(<>proto<>9) @ #-223

  Call[14] -> ExitExc
    [0] construct(<>fun<>7, <>obj<>10, <>arguments<>8) @ #-224

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>12 := @isObject(<>newObj<>11)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>12)
    [1] <>new1<>13 := <>newObj<>11

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>12)
    [1] <>new1<>13 := <>obj<>10

  Block[20] -> ExitExc
    [0] throw(<>new1<>13)

  Branch[21] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @ToString(<>P<>2)
    [1] <>name<>4 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @DefineOwnProperty(<>O<>1, <>name<>4, <>Attributes<>3)
    [3] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-21] create {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new<>5 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new<>5 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new<>5 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [9], ExitExc
    [0] assert(<>new<>5)
    [1] <>fun<>6 := @ToObject(TypeError) @ #-211
    [2] <>arguments<>7 := allocArg(0) @ #-212
    [3] <>proto<>8 := <>fun<>6["prototype"]
    [4] <>obj<>9 := alloc(<>proto<>8) @ #-213

  Block[8] -> [16], ExitExc
    [0] assert(! <>new<>5)

  Call[9] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-214

  AfterCall[10] -> [12]

  AfterCatch[11] -> ExitExc

  Block[12] -> [14], [13]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[13] -> [15], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[14] -> [15], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[15] -> ExitExc
    [0] throw(<>new1<>12)

  Block[16] -> [17], ExitExc
    [0] <>fun<>13 := @ToObject(Object) @ #-215
    [1] <>arguments<>14 := allocArg(0) @ #-216
    [2] <>proto<>15 := <>fun<>13["prototype"]
    [3] <>obj<>16 := alloc(<>proto<>15) @ #-217

  Call[17] -> ExitExc
    [0] construct(<>fun<>13, <>obj<>16, <>arguments<>14) @ #-218

  AfterCall[18] -> [20]

  AfterCatch[19] -> ExitExc

  Block[20] -> [22], [21]
    [0] <>cond<>18 := @isObject(<>newObj<>17)

  Block[21] -> [23], ExitExc
    [0] assert(<>cond<>18)
    [1] <>Global<>ignore1 := <>newObj<>17

  Block[22] -> [23], ExitExc
    [0] assert(! <>cond<>18)
    [1] <>Global<>ignore1 := <>obj<>16

  Block[23] -> [25], [24], ExitExc
    [0] <>obj<>3 := <>Global<>ignore1
    [1] <>Global<>ignore2 := @Prototype(<>obj<>3, <>O<>1)

  Block[24] -> [26], ExitExc
    [0] assert(<>Properties<>2 !== undefined)
    [1] <>obj<>19 := @ToObject(Object) @ #-219
    [2] <>temp<>20 := <>obj<>3
    [3] <>temp<>21 := <>Properties<>2
    [4] <>arguments<>22 := allocArg(2) @ #-2110
    [5] <>arguments<>22["0"] := <>temp<>20
    [6] <>arguments<>22["1"] := <>temp<>21
    [7] <>fun<>23 := @ToObject(<>obj<>19["defineProperties"]) @ #-2111
    [8] <>this<> := enterCode(<>obj<>19)

  Block[25] -> [29], ExitExc
    [0] assert(<>Properties<>2 === undefined)

  Call[26] -> ExitExc
    [0] call(<>fun<>23, <>this<>, <>arguments<>22) @ #-2112

  AfterCall[27] -> [29]

  AfterCatch[28] -> ExitExc

  Block[29] -> Exit, ExitExc
    [0] return(<>obj<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-20] getOwnPropertyNames {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new1<>3 := @getOwnPropertyNames(<>O<>1) @ #-201
    [1] return(<>new1<>3)

  Exit[-2]

  ExitExc[-3]

}

function[-19] getOwnPropertyDescriptor {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>5 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>5 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>5 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>5)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>5)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>6 := @ToObject(TypeError) @ #-191
    [1] <>arguments<>7 := allocArg(0) @ #-192
    [2] <>proto<>8 := <>fun<>6["prototype"]
    [3] <>obj<>9 := alloc(<>proto<>8) @ #-193

  Call[14] -> ExitExc
    [0] construct(<>fun<>6, <>obj<>9, <>arguments<>7) @ #-194

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>11 := @isObject(<>newObj<>10)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>11)
    [1] <>new1<>12 := <>newObj<>10

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>11)
    [1] <>new1<>12 := <>obj<>9

  Block[20] -> ExitExc
    [0] throw(<>new1<>12)

  Branch[21] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @ToString(<>P<>2)
    [1] <>name<>3 := <>Global<>ignore1
    [2] <>new1<>13 := @GetOwnProperty(<>O<>1, <>name<>3) @ #-195
    [3] return(<>new1<>13)

  Exit[-2]

  ExitExc[-3]

}

function[-18] getPrototypeOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>O<>1 !== "function")
    [1] <>new1<>3 := typeof <>O<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>O<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" == "boolean")
    [1] <>new1<>3 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>O<>1 !== "function" != "boolean")
    [1] <>new1<>3 := typeof <>O<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>3)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>3)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>O<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>O<>1 !== null)

  Block[12] -> [21]

  Branch[13] -> [14], ExitExc
    [0] <>fun<>4 := @ToObject(TypeError) @ #-181
    [1] <>arguments<>5 := allocArg(0) @ #-182
    [2] <>proto<>6 := <>fun<>4["prototype"]
    [3] <>obj<>7 := alloc(<>proto<>6) @ #-183

  Call[14] -> ExitExc
    [0] construct(<>fun<>4, <>obj<>7, <>arguments<>5) @ #-184

  AfterCall[15] -> [17]

  AfterCatch[16] -> ExitExc

  Block[17] -> [19], [18]
    [0] <>cond<>9 := @isObject(<>newObj<>8)

  Block[18] -> [20], ExitExc
    [0] assert(<>cond<>9)
    [1] <>new1<>10 := <>newObj<>8

  Block[19] -> [20], ExitExc
    [0] assert(! <>cond<>9)
    [1] <>new1<>10 := <>obj<>7

  Block[20] -> ExitExc
    [0] throw(<>new1<>10)

  Branch[21] -> Exit, ExitExc
    [0] <>new1<>11 := @Prototype(<>O<>1)
    [1] return(<>new1<>11)

  Exit[-2]

  ExitExc[-3]

}

function[-17] Object {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [7], ExitExc
    [0] assert(<>value<>1 === null)

  Block[2] -> [3], ExitExc
    [0] assert(<>value<>1 !== null)

  Block[3] -> [5], [4]

  Block[4] -> [7], ExitExc
    [0] assert(<>value<>1 === undefined)

  Block[5] -> [6], ExitExc
    [0] assert(<>value<>1 !== undefined)

  Block[6] -> Exit, ExitExc
    [0] <>new1<>3 := @ToObject(<>value<>1) @ #-171
    [1] return(<>new1<>3)

  Branch[7] -> Exit, ExitExc
    [0] <>new1<>4 := alloc() @ #-172
    [1] return(<>new1<>4)

  Branch[8] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-16] Object {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [7], ExitExc
    [0] assert(<>value<>1 === null)

  Block[2] -> [3], ExitExc
    [0] assert(<>value<>1 !== null)

  Block[3] -> [5], [4]

  Block[4] -> [7], ExitExc
    [0] assert(<>value<>1 === undefined)

  Block[5] -> [6], ExitExc
    [0] assert(<>value<>1 !== undefined)

  Block[6] -> Exit, ExitExc
    [0] <>new1<>3 := @ToObject(<>value<>1) @ #-161
    [1] return(<>new1<>3)

  Branch[7] -> Exit, ExitExc
    [0] <>new1<>4 := alloc() @ #-162
    [1] return(<>new1<>4)

  Branch[8] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-15] propertyIsEnumerable {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToString(<>V<>1)
    [1] <>P<>2 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @ToObject(this) @ #-151
    [3] <>O<>3 := <>Global<>ignore2
    [4] <>Global<>ignore3 := @GetOwnProperty(<>O<>3, <>P<>2) @ #-152
    [5] <>desc<>4 := <>Global<>ignore3

  Block[1] -> Exit, ExitExc
    [0] assert(<>desc<>4 === undefined)
    [1] return(false)

  Block[2] -> [3], ExitExc
    [0] assert(<>desc<>4 !== undefined)

  Block[3] -> Exit, ExitExc
    [0] <>obj<>6 := @ToObject(<>desc<>4) @ #-153
    [1] return(<>obj<>6["enumerable"])

  Exit[-2]

  ExitExc[-3]

}

function[-14] isPrototypeOf {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> [3], ExitExc
    [0] assert(typeof <>V<>1 !== "function")
    [1] <>new1<>5 := typeof <>V<>1 !== "object"

  Block[2] -> [5], [4], ExitExc
    [0] assert(typeof <>V<>1 === "function")

  Block[3] -> [8], [7]

  Block[4] -> [6], ExitExc
    [0] assert(typeof typeof <>V<>1 !== "function" == "boolean")
    [1] <>new1<>5 := false

  Block[5] -> [6], ExitExc
    [0] assert(typeof typeof <>V<>1 !== "function" != "boolean")
    [1] <>new1<>5 := typeof <>V<>1 !== "function"

  Block[6] -> [3]

  Block[7] -> [13], ExitExc
    [0] assert(<>new1<>5)

  Block[8] -> [9], ExitExc
    [0] assert(! <>new1<>5)

  Block[9] -> [11], [10]

  Block[10] -> [13], ExitExc
    [0] assert(<>V<>1 === null)

  Block[11] -> [12], ExitExc
    [0] assert(<>V<>1 !== null)

  Block[12] -> [14]

  Branch[13] -> Exit, ExitExc
    [0] return(false)

  Branch[14] -> [15], ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-141
    [1] <>O<>2 := <>Global<>ignore1
    [2] <>_V<>3 := <>V<>1

  LoopHead[15] -> [17], [16]

  Block[16] -> [19], [18], ExitExc
    [0] assert(true)
    [1] <>Global<>ignore3 := @Prototype(<>V<>1)
    [2] <>V<>1 := <>Global<>ignore3

  Block[17] -> [25], ExitExc
    [0] assert(! true)

  Block[18] -> Exit, ExitExc
    [0] assert(<>V<>1 === null)
    [1] return(false)

  Block[19] -> [20], ExitExc
    [0] assert(<>V<>1 !== null)

  Block[20] -> [22], [21]

  Block[21] -> Exit, ExitExc
    [0] assert(<>O<>2 === <>V<>1)
    [1] return(true)

  Block[22] -> [23], ExitExc
    [0] assert(<>O<>2 !== <>V<>1)

  Block[23] -> [24]

  LCont[24] -> [15]

  LBreak[25] -> Exit

  Exit[-2]

  ExitExc[-3]

}

function[-13] hasOwnProperty {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToString(<>V<>1)
    [1] <>P<>2 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @ToObject(this) @ #-131
    [3] <>O<>3 := <>Global<>ignore2
    [4] <>Global<>ignore3 := @GetOwnProperty(<>O<>3, <>P<>2) @ #-132
    [5] <>desc<>4 := <>Global<>ignore3

  Block[1] -> Exit, ExitExc
    [0] assert(<>desc<>4 === undefined)
    [1] return(false)

  Block[2] -> [3], ExitExc
    [0] assert(<>desc<>4 !== undefined)

  Block[3] -> Exit, ExitExc
    [0] return(true)

  Exit[-2]

  ExitExc[-3]

}

function[-12] valueOf {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-121
    [1] <>O<>1 := <>Global<>ignore1
    [2] return(<>O<>1)

  Exit[-2]

  ExitExc[-3]

}

function[-11] toLocaleString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(this === undefined)
    [1] return("[object Undefined")

  Block[2] -> [3], ExitExc
    [0] assert(this !== undefined)

  Block[3] -> [5], [4]

  Block[4] -> Exit, ExitExc
    [0] assert(this === null)
    [1] return("[object Null]")

  Block[5] -> [6], ExitExc
    [0] assert(this !== null)

  Block[6] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-111
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @Class(<>O<>1)
    [3] <>class<>2 := <>Global<>ignore2
    [4] return("[object " + <>class<>2 + "]")

  Exit[-2]

  ExitExc[-3]

}

function[-10] toString {
  Entry[-1] -> [0]

  Block[0] -> [2], [1]

  Block[1] -> Exit, ExitExc
    [0] assert(this === undefined)
    [1] return("[object Undefined]")

  Block[2] -> [3], ExitExc
    [0] assert(this !== undefined)

  Block[3] -> [5], [4]

  Block[4] -> Exit, ExitExc
    [0] assert(this === null)
    [1] return("[object Null]")

  Block[5] -> [6], ExitExc
    [0] assert(this !== null)

  Block[6] -> Exit, ExitExc
    [0] <>Global<>ignore1 := @ToObject(this) @ #-101
    [1] <>O<>1 := <>Global<>ignore1
    [2] <>Global<>ignore2 := @Class(<>O<>1)
    [3] <>class<>2 := <>Global<>ignore2
    [4] return("[object " + <>class<>2 + "]")

  Exit[-2]

  ExitExc[-3]

}

function[-9] encodeURIComponent {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("encodeURIComponent")

  Exit[-2]

  ExitExc[-3]

}

function[-8] encodeURI {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("encodeURI")

  Exit[-2]

  ExitExc[-3]

}

function[-7] decodeURIComponent {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("decodeURIComponent")

  Exit[-2]

  ExitExc[-3]

}

function[-6] decodeURI {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("decodeURI")

  Exit[-2]

  ExitExc[-3]

}

function[-5] isFinite {
  Entry[-1] -> [0]

  Block[0] -> [2], [1], ExitExc
    [0] <>Global<>ignore1 := @ToNumber(<>number<>1)
    [1] <>num<>2 := <>Global<>ignore1
    [2] <>y<>4 := @SameValue(<>num<>2, NaN)

  Block[1] -> [4], [3], ExitExc
    [0] assert(! <>y<>4)
    [1] <>y<>5 := @SameValue(<>num<>2, Infinity)

  Block[2] -> [11], [10], ExitExc
    [0] assert(! ! <>y<>4)

  Block[3] -> [5], ExitExc
    [0] assert(! <>y<>5)
    [1] <>y<>6 := @SameValue(<>num<>2, - Infinity)
    [2] <>new1<>7 := ! <>y<>6

  Block[4] -> [7], [6], ExitExc
    [0] assert(! ! <>y<>5)

  Block[5] -> [9]

  Block[6] -> [8], ExitExc
    [0] assert(typeof ! <>y<>5 == "boolean")
    [1] <>new1<>7 := false

  Block[7] -> [8], ExitExc
    [0] assert(typeof ! <>y<>5 != "boolean")
    [1] <>new1<>7 := ! <>y<>5

  Block[8] -> [5]

  Block[9] -> Exit, ExitExc
    [0] return(<>new1<>7)

  Block[10] -> [12], ExitExc
    [0] assert(typeof ! <>y<>4 == "boolean")
    [1] <>new1<>7 := false

  Block[11] -> [12], ExitExc
    [0] assert(typeof ! <>y<>4 != "boolean")
    [1] <>new1<>7 := ! <>y<>4

  Block[12] -> [9]

  Exit[-2]

  ExitExc[-3]

}

function[-4] isNaN {
  Entry[-1] -> [0]

  Block[0] -> Exit, ExitExc
    [0] <>new0<>3 := @ToNumber(<>number<>1)
    [1] <>new1<>4 := @SameValue(<>new0<>3, NaN)
    [2] return(<>new1<>4)

  Exit[-2]

  ExitExc[-3]

}

function[-3] parseFloat {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("parseFloat")

  Exit[-2]

  ExitExc[-3]

}

function[-2] parseInt {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("parseInt")

  Exit[-2]

  ExitExc[-3]

}

function[-1] eval {
  Entry[-1] -> [0]

  Block[0] -> Exit
    [0] <>Global<>ignore1 := @NotYetImplemented("eval")

  Exit[-2]

  ExitExc[-3]

}


